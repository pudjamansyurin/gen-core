
VCU-BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b000  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800b1e0  0800b1e0  0001b1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba30  0800ba30  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba38  0800ba38  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba3c  0800ba3c  0001ba3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ba40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000200  0800bc3c  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  0800bc3c  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4f1  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041bc  00000000  00000000  0003b71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  0003f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00040a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025599  00000000  00000000  00041a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e08  00000000  00000000  00066fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce1bf  00000000  00000000  0007bdc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bdc  00000000  00000000  0014a004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b1c8 	.word	0x0800b1c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800b1c8 	.word	0x0800b1c8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800042e:	f1a4 0401 	sub.w	r4, r4, #1
 8000432:	d1e9      	bne.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <FLASHER_WriteByte>:
static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors);
static uint32_t FLASHER_GetSector(uint32_t Address);
static uint32_t FLASHER_GetSectorSize(uint32_t Sector);

/* Public functions implementation ---------------------------------------------*/
static uint8_t FLASHER_WriteByte(uint8_t *ptr, uint32_t size, uint32_t address, uint32_t end) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
    uint32_t *ptr32 = (uint32_t*) ptr;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	617b      	str	r3, [r7, #20]
    uint32_t errors = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8000e82:	f002 fe0f 	bl	8003aa4 <HAL_FLASH_Unlock>

    /* Writing...... */
    while (size && address <= end) {
 8000e86:	e01b      	b.n	8000ec0 <FLASHER_WriteByte+0x54>
        errors += (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *ptr32++) != HAL_OK);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	617a      	str	r2, [r7, #20]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f002 fdae 	bl	80039fc <HAL_FLASH_Program>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

        address += 4;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	607b      	str	r3, [r7, #4]
        size -= 4;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3b04      	subs	r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
    while (size && address <= end) {
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <FLASHER_WriteByte+0x62>
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d9dc      	bls.n	8000e88 <FLASHER_WriteByte+0x1c>
    }

    /* Indicator */
    if (!errors) {
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <FLASHER_WriteByte+0x70>
        LOG_StrLn("HAL_FLASH_Program = OK");
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <FLASHER_WriteByte+0x9c>)
 8000ed6:	f008 fe19 	bl	8009b0c <LOG_StrLn>
 8000eda:	e008      	b.n	8000eee <FLASHER_WriteByte+0x82>
    } else {
        LOG_Str("HAL_FLASH_Program = ERROR:");
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <FLASHER_WriteByte+0xa0>)
 8000ede:	f008 fdfd 	bl	8009adc <LOG_Str>
        LOG_Int(errors);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 fd81 	bl	80099ec <LOG_Int>
        LOG_Enter();
 8000eea:	f008 fd73 	bl	80099d4 <LOG_Enter>
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8000eee:	f002 fdfb 	bl	8003ae8 <HAL_FLASH_Lock>

    return (errors == 0);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	0800b1e0 	.word	0x0800b1e0
 8000f0c:	0800b1f8 	.word	0x0800b1f8

08000f10 <FLASHER_Erase>:

static uint8_t FLASHER_Erase(uint32_t FirstSector, uint32_t NbOfSectors) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
    uint8_t ret;

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FirstSector;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = NbOfSectors;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	61fb      	str	r3, [r7, #28]

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8000f2e:	f002 fdb9 	bl	8003aa4 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f34:	22f3      	movs	r2, #243	; 0xf3
 8000f36:	60da      	str	r2, [r3, #12]
            FLASH_FLAG_PGPERR |
            FLASH_FLAG_PGSERR
            );

    /* Erasing......... */
    ret = (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 ff2a 	bl	8003d9c <HAL_FLASHEx_Erase>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Handle error */
    if (!ret) {
 8000f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10b      	bne.n	8000f78 <FLASHER_Erase+0x68>
         HAL_FLASH_ERROR_PGP          0x00000004U    !< Programming Parallelism error
         HAL_FLASH_ERROR_PGA          0x00000008U    !< Programming Alignment error
         HAL_FLASH_ERROR_WRP          0x00000010U    !< Write protection error
         HAL_FLASH_ERROR_OPERATION    0x00000020U    !< Operation Error
         */
        LOG_Str("HAL_FLASHEx_Erase = ERROR:0x");
 8000f60:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <FLASHER_Erase+0xe4>)
 8000f62:	f008 fdbb 	bl	8009adc <LOG_Str>
        LOG_Hex32(HAL_FLASH_GetError());
 8000f66:	f002 fdcf 	bl	8003b08 <HAL_FLASH_GetError>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 fd8b 	bl	8009a88 <LOG_Hex32>
        LOG_Enter();
 8000f72:	f008 fd2f 	bl	80099d4 <LOG_Enter>
 8000f76:	e002      	b.n	8000f7e <FLASHER_Erase+0x6e>
    } else {
        LOG_StrLn("HAL_FLASHEx_Erase = OK");
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <FLASHER_Erase+0xe8>)
 8000f7a:	f008 fdc7 	bl	8009b0c <LOG_StrLn>

    /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f88:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f94:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_DATA_CACHE_RESET();
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fac:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fc4:	6013      	str	r3, [r2, #0]

    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd0:	6013      	str	r3, [r2, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <FLASHER_Erase+0xe0>)
 8000fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fdc:	6013      	str	r3, [r2, #0]

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8000fde:	f002 fd83 	bl	8003ae8 <HAL_FLASH_Lock>

    return ret;
 8000fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00
 8000ff4:	0800b214 	.word	0x0800b214
 8000ff8:	0800b234 	.word	0x0800b234

08000ffc <FLASHER_GetSector>:
/**
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t FLASHER_GetSector(uint32_t Address) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0)) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <FLASHER_GetSector+0x168>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d806      	bhi.n	800101e <FLASHER_GetSector+0x22>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001016:	d302      	bcc.n	800101e <FLASHER_GetSector+0x22>
        sector = FLASH_SECTOR_0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e09b      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1)) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <FLASHER_GetSector+0x16c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d806      	bhi.n	8001034 <FLASHER_GetSector+0x38>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <FLASHER_GetSector+0x168>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d902      	bls.n	8001034 <FLASHER_GetSector+0x38>
        sector = FLASH_SECTOR_1;
 800102e:	2301      	movs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e090      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2)) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4d      	ldr	r2, [pc, #308]	; (800116c <FLASHER_GetSector+0x170>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d806      	bhi.n	800104a <FLASHER_GetSector+0x4e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <FLASHER_GetSector+0x16c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d902      	bls.n	800104a <FLASHER_GetSector+0x4e>
        sector = FLASH_SECTOR_2;
 8001044:	2302      	movs	r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e085      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3)) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <FLASHER_GetSector+0x174>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d806      	bhi.n	8001060 <FLASHER_GetSector+0x64>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <FLASHER_GetSector+0x170>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d902      	bls.n	8001060 <FLASHER_GetSector+0x64>
        sector = FLASH_SECTOR_3;
 800105a:	2303      	movs	r3, #3
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e07a      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4)) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a44      	ldr	r2, [pc, #272]	; (8001174 <FLASHER_GetSector+0x178>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d806      	bhi.n	8001076 <FLASHER_GetSector+0x7a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a41      	ldr	r2, [pc, #260]	; (8001170 <FLASHER_GetSector+0x174>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d902      	bls.n	8001076 <FLASHER_GetSector+0x7a>
        sector = FLASH_SECTOR_4;
 8001070:	2304      	movs	r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e06f      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5)) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <FLASHER_GetSector+0x17c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d806      	bhi.n	800108c <FLASHER_GetSector+0x90>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <FLASHER_GetSector+0x178>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d902      	bls.n	800108c <FLASHER_GetSector+0x90>
        sector = FLASH_SECTOR_5;
 8001086:	2305      	movs	r3, #5
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e064      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6)) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <FLASHER_GetSector+0x180>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d806      	bhi.n	80010a2 <FLASHER_GetSector+0xa6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <FLASHER_GetSector+0x17c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d902      	bls.n	80010a2 <FLASHER_GetSector+0xa6>
        sector = FLASH_SECTOR_6;
 800109c:	2306      	movs	r3, #6
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e059      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7)) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a36      	ldr	r2, [pc, #216]	; (8001180 <FLASHER_GetSector+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d806      	bhi.n	80010b8 <FLASHER_GetSector+0xbc>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a33      	ldr	r2, [pc, #204]	; (800117c <FLASHER_GetSector+0x180>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d902      	bls.n	80010b8 <FLASHER_GetSector+0xbc>
        sector = FLASH_SECTOR_7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e04e      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8)) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <FLASHER_GetSector+0x188>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d806      	bhi.n	80010ce <FLASHER_GetSector+0xd2>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <FLASHER_GetSector+0x184>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d902      	bls.n	80010ce <FLASHER_GetSector+0xd2>
        sector = FLASH_SECTOR_8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e043      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9)) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <FLASHER_GetSector+0x18c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d806      	bhi.n	80010e4 <FLASHER_GetSector+0xe8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <FLASHER_GetSector+0x188>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d902      	bls.n	80010e4 <FLASHER_GetSector+0xe8>
        sector = FLASH_SECTOR_9;
 80010de:	2309      	movs	r3, #9
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e038      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10)) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <FLASHER_GetSector+0x190>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d806      	bhi.n	80010fa <FLASHER_GetSector+0xfe>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <FLASHER_GetSector+0x18c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d902      	bls.n	80010fa <FLASHER_GetSector+0xfe>
        sector = FLASH_SECTOR_10;
 80010f4:	230a      	movs	r3, #10
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e02d      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11)) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001100:	d206      	bcs.n	8001110 <FLASHER_GetSector+0x114>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <FLASHER_GetSector+0x190>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d902      	bls.n	8001110 <FLASHER_GetSector+0x114>
        sector = FLASH_SECTOR_11;
 800110a:	230b      	movs	r3, #11
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e022      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12)) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <FLASHER_GetSector+0x194>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d806      	bhi.n	8001126 <FLASHER_GetSector+0x12a>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800111e:	d302      	bcc.n	8001126 <FLASHER_GetSector+0x12a>
        sector = FLASH_SECTOR_12;
 8001120:	230c      	movs	r3, #12
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e017      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13)) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <FLASHER_GetSector+0x198>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d806      	bhi.n	800113c <FLASHER_GetSector+0x140>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <FLASHER_GetSector+0x194>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d902      	bls.n	800113c <FLASHER_GetSector+0x140>
        sector = FLASH_SECTOR_13;
 8001136:	230d      	movs	r3, #13
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e00c      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else if ((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14)) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <FLASHER_GetSector+0x19c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d806      	bhi.n	8001152 <FLASHER_GetSector+0x156>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <FLASHER_GetSector+0x198>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d902      	bls.n	8001152 <FLASHER_GetSector+0x156>
        sector = FLASH_SECTOR_14;
 800114c:	230e      	movs	r3, #14
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e001      	b.n	8001156 <FLASHER_GetSector+0x15a>
    }
    else { /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_14) */
        sector = FLASH_SECTOR_15;
 8001152:	230f      	movs	r3, #15
 8001154:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	08003fff 	.word	0x08003fff
 8001168:	08007fff 	.word	0x08007fff
 800116c:	0800bfff 	.word	0x0800bfff
 8001170:	0800ffff 	.word	0x0800ffff
 8001174:	0801ffff 	.word	0x0801ffff
 8001178:	0803ffff 	.word	0x0803ffff
 800117c:	0805ffff 	.word	0x0805ffff
 8001180:	0807ffff 	.word	0x0807ffff
 8001184:	0809ffff 	.word	0x0809ffff
 8001188:	080bffff 	.word	0x080bffff
 800118c:	080dffff 	.word	0x080dffff
 8001190:	0811ffff 	.word	0x0811ffff
 8001194:	0813ffff 	.word	0x0813ffff
 8001198:	0815ffff 	.word	0x0815ffff

0800119c <FLASHER_EraseBkpArea>:
    }
    return sectorsize;
}

/* ============================================================= */
uint8_t FLASHER_EraseBkpArea(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(BKP_START_ADDR);
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <FLASHER_EraseBkpArea+0x38>)
 80011ac:	f7ff ff26 	bl	8000ffc <FLASHER_GetSector>
 80011b0:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(BKP_END_ADDR) - FirstSector + 1;
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <FLASHER_EraseBkpArea+0x3c>)
 80011b4:	f7ff ff22 	bl	8000ffc <FLASHER_GetSector>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fea3 	bl	8000f10 <FLASHER_Erase>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	080a0000 	.word	0x080a0000
 80011d8:	0811ffff 	.word	0x0811ffff

080011dc <FLASHER_EraseAppArea>:

uint8_t FLASHER_EraseAppArea(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    uint32_t FirstSector = 0, NbOfSectors = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]

    /* Get the 1st sector to erase */
    FirstSector = FLASHER_GetSector(APP_START_ADDR);
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <FLASHER_EraseAppArea+0x38>)
 80011ec:	f7ff ff06 	bl	8000ffc <FLASHER_GetSector>
 80011f0:	6078      	str	r0, [r7, #4]
    /* Get the number of sector to erase from 1st sector*/
    NbOfSectors = FLASHER_GetSector(APP_END_ADDR) - FirstSector + 1;
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <FLASHER_EraseAppArea+0x3c>)
 80011f4:	f7ff ff02 	bl	8000ffc <FLASHER_GetSector>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	3301      	adds	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
    // Erase
    return FLASHER_Erase(FirstSector, NbOfSectors);
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fe83 	bl	8000f10 <FLASHER_Erase>
 800120a:	4603      	mov	r3, r0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08020000 	.word	0x08020000
 8001218:	0809ffff 	.word	0x0809ffff

0800121c <FLASHER_WriteBkpArea>:

uint8_t FLASHER_WriteBkpArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
    uint32_t address = BKP_START_ADDR + offset;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800122e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001232:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, BKP_END_ADDR);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <FLASHER_WriteBkpArea+0x30>)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fe16 	bl	8000e6c <FLASHER_WriteByte>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0811ffff 	.word	0x0811ffff

08001250 <FLASHER_WriteAppArea>:

uint8_t FLASHER_WriteAppArea(uint8_t *ptr, uint32_t size, uint32_t offset) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
    uint32_t address = APP_START_ADDR + offset;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001262:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001266:	617b      	str	r3, [r7, #20]

    return FLASHER_WriteByte(ptr, size, address, APP_END_ADDR);
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <FLASHER_WriteAppArea+0x30>)
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fdfc 	bl	8000e6c <FLASHER_WriteByte>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	0809ffff 	.word	0x0809ffff

08001284 <FLASHER_BackupApp>:

uint8_t FLASHER_BackupApp(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) APP_START_ADDR;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <FLASHER_BackupApp+0x34>)
 800128c:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseBkpArea();
 800128e:	f7ff ff85 	bl	800119c <FLASHER_EraseBkpArea>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <FLASHER_BackupApp+0x28>
        ret = FLASHER_WriteBkpArea(ptr, APP_MAX_SIZE, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ffba 	bl	800121c <FLASHER_WriteBkpArea>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08020000 	.word	0x08020000

080012bc <FLASHER_RestoreApp>:

uint8_t FLASHER_RestoreApp(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) BKP_START_ADDR;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <FLASHER_RestoreApp+0x34>)
 80012c4:	603b      	str	r3, [r7, #0]

    ret = FLASHER_EraseAppArea();
 80012c6:	f7ff ff89 	bl	80011dc <FLASHER_EraseAppArea>
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]

    if (ret) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <FLASHER_RestoreApp+0x28>
        ret = FLASHER_WriteAppArea(ptr, APP_MAX_SIZE, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff ffb8 	bl	8001250 <FLASHER_WriteAppArea>
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
    }

    return ret;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	080a0000 	.word	0x080a0000

080012f4 <FOCAN_Upgrade>:
static void FOCAN_SetTarget(uint16_t address);
static uint8_t FOCAN_EnterModeIAP(void);
static uint8_t FOCAN_GetVersion(uint16_t *version);

/* Public functions implementation --------------------------------------------*/
uint8_t FOCAN_Upgrade(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
    uint16_t version;
    uint8_t p;

    FOCAN_SetTarget(CAND_HMI1_LEFT);
 80012fa:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 80012fe:	f000 f813 	bl	8001328 <FOCAN_SetTarget>
    /* Tell HMI to enter IAP mode */
    p = FOCAN_EnterModeIAP();
 8001302:	f000 f821 	bl	8001348 <FOCAN_EnterModeIAP>
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]

    /* Get HMI version via CAN */
    if (p > 0) {
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <FOCAN_Upgrade+0x28>
        p = FOCAN_GetVersion(&version);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f878 	bl	8001408 <FOCAN_GetVersion>
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
    }

    return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <FOCAN_SetTarget>:

/* Private functions implementation ------------------------------------------*/
static void FOCAN_SetTarget(uint16_t address) {
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
    HMI_ADDR = address;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <FOCAN_SetTarget+0x1c>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	8013      	strh	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	2000021c 	.word	0x2000021c

08001348 <FOCAN_EnterModeIAP>:

static uint8_t FOCAN_EnterModeIAP(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
    CAN_DATA *txd = &(CB.tx.data);
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <FOCAN_EnterModeIAP+0xac>)
 8001350:	613b      	str	r3, [r7, #16]
    CAN_DATA *rxd = &(CB.rx.data);
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <FOCAN_EnterModeIAP+0xb0>)
 8001354:	60fb      	str	r3, [r7, #12]
    uint8_t step = 0, reply = 1;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
 800135a:	2301      	movs	r3, #1
 800135c:	72fb      	strb	r3, [r7, #11]
    uint32_t tick;
    uint8_t ret;

    // set message
    txd->u16[0] = HMI_ADDR;
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <FOCAN_EnterModeIAP+0xb4>)
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	801a      	strh	r2, [r3, #0]

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_ENTER_IAP, 2);
 8001366:	2202      	movs	r2, #2
 8001368:	2100      	movs	r1, #0
 800136a:	4825      	ldr	r0, [pc, #148]	; (8001400 <FOCAN_EnterModeIAP+0xb8>)
 800136c:	f008 f974 	bl	8009658 <CANBUS_Header>
    // send message
    ret = CANBUS_Write(&(CB.tx));
 8001370:	4823      	ldr	r0, [pc, #140]	; (8001400 <FOCAN_EnterModeIAP+0xb8>)
 8001372:	f008 f9b3 	bl	80096dc <CANBUS_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	75bb      	strb	r3, [r7, #22]

    // wait response
    if (ret) {
 800137a:	7dbb      	ldrb	r3, [r7, #22]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d033      	beq.n	80013e8 <FOCAN_EnterModeIAP+0xa0>
        tick = _GetTickMS();
 8001380:	f009 f9a6 	bl	800a6d0 <_GetTickMS>
 8001384:	6078      	str	r0, [r7, #4]
        while ((step < reply) && (_GetTickMS() - tick < 1000)) {
 8001386:	e01b      	b.n	80013c0 <FOCAN_EnterModeIAP+0x78>
            // read
            if (CANBUS_Read(&(CB.rx))) {
 8001388:	481e      	ldr	r0, [pc, #120]	; (8001404 <FOCAN_EnterModeIAP+0xbc>)
 800138a:	f008 f9d1 	bl	8009730 <CANBUS_Read>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <FOCAN_EnterModeIAP+0x76>
                if (CANBUS_ReadID() == CAND_ENTER_IAP) {
 8001394:	f008 f9ea 	bl	800976c <CANBUS_ReadID>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <FOCAN_EnterModeIAP+0x76>
                    switch (step) {
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <FOCAN_EnterModeIAP+0x74>
                        case 0: // ack
                            step += (rxd->u8[0] == FOCAN_ACK );
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b79      	cmp	r3, #121	; 0x79
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	4413      	add	r3, r2
 80013b8:	75fb      	strb	r3, [r7, #23]
                            break;
 80013ba:	e001      	b.n	80013c0 <FOCAN_EnterModeIAP+0x78>
                        default:
                            break;
 80013bc:	e000      	b.n	80013c0 <FOCAN_EnterModeIAP+0x78>
                    }
                }
 80013be:	bf00      	nop
        while ((step < reply) && (_GetTickMS() - tick < 1000)) {
 80013c0:	7dfa      	ldrb	r2, [r7, #23]
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <FOCAN_EnterModeIAP+0x90>
 80013c8:	f009 f982 	bl	800a6d0 <_GetTickMS>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d6:	d3d7      	bcc.n	8001388 <FOCAN_EnterModeIAP+0x40>
            }
        }
        ret = (step == reply);
 80013d8:	7dfa      	ldrb	r2, [r7, #23]
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	429a      	cmp	r2, r3
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 80013e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000a18 	.word	0x20000a18
 80013f8:	20000a40 	.word	0x20000a40
 80013fc:	2000021c 	.word	0x2000021c
 8001400:	20000a00 	.word	0x20000a00
 8001404:	20000a20 	.word	0x20000a20

08001408 <FOCAN_GetVersion>:

static uint8_t FOCAN_GetVersion(uint16_t *version) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    //    CAN_DATA *txd = &(CB.tx.data);
    CAN_DATA *rxd = &(CB.rx.data);
 8001410:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <FOCAN_GetVersion+0xf4>)
 8001412:	613b      	str	r3, [r7, #16]
    uint8_t step = 0, reply = 4;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
 8001418:	2304      	movs	r3, #4
 800141a:	73fb      	strb	r3, [r7, #15]
    uint32_t tick;
    uint8_t ret;

    // set default header
    CANBUS_Header(&(CB.tx.header), CAND_GET_VERSION, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	4837      	ldr	r0, [pc, #220]	; (8001500 <FOCAN_GetVersion+0xf8>)
 8001422:	f008 f919 	bl	8009658 <CANBUS_Header>
    // send message
    ret = CANBUS_Write(&(CB.tx));
 8001426:	4836      	ldr	r0, [pc, #216]	; (8001500 <FOCAN_GetVersion+0xf8>)
 8001428:	f008 f958 	bl	80096dc <CANBUS_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	75bb      	strb	r3, [r7, #22]

    // wait response
    if (ret) {
 8001430:	7dbb      	ldrb	r3, [r7, #22]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d05d      	beq.n	80014f2 <FOCAN_GetVersion+0xea>
        tick = _GetTickMS();
 8001436:	f009 f94b 	bl	800a6d0 <_GetTickMS>
 800143a:	60b8      	str	r0, [r7, #8]
        while ((step < reply) && (_GetTickMS() - tick < 1000)) {
 800143c:	e045      	b.n	80014ca <FOCAN_GetVersion+0xc2>
            // read
            if (CANBUS_Read(&(CB.rx))) {
 800143e:	4831      	ldr	r0, [pc, #196]	; (8001504 <FOCAN_GetVersion+0xfc>)
 8001440:	f008 f976 	bl	8009730 <CANBUS_Read>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03e      	beq.n	80014c8 <FOCAN_GetVersion+0xc0>
                if (CANBUS_ReadID() == CAND_GET_VERSION) {
 800144a:	f008 f98f 	bl	800976c <CANBUS_ReadID>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d139      	bne.n	80014c8 <FOCAN_GetVersion+0xc0>
                    switch (step) {
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d837      	bhi.n	80014ca <FOCAN_GetVersion+0xc2>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <FOCAN_GetVersion+0x58>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001471 	.word	0x08001471
 8001464:	08001489 	.word	0x08001489
 8001468:	08001499 	.word	0x08001499
 800146c:	080014b1 	.word	0x080014b1
                        case 0: // ack
                            step += (rxd->u8[0] == FOCAN_ACK );
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b79      	cmp	r3, #121	; 0x79
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	4413      	add	r3, r2
 8001484:	75fb      	strb	r3, [r7, #23]
                            break;
 8001486:	e020      	b.n	80014ca <FOCAN_GetVersion+0xc2>
                        case 1: // version
                            *version = rxd->u16[0];
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	801a      	strh	r2, [r3, #0]
                            step++;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	3301      	adds	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
                            break;
 8001496:	e018      	b.n	80014ca <FOCAN_GetVersion+0xc2>
                        case 2: // option message (2 bytes)
                            step += (rxd->u16[0] == 0x0000);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	4413      	add	r3, r2
 80014ac:	75fb      	strb	r3, [r7, #23]
                            break;
 80014ae:	e00c      	b.n	80014ca <FOCAN_GetVersion+0xc2>
                        case 3: // ack
                            step += (rxd->u8[0] == FOCAN_ACK );
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b79      	cmp	r3, #121	; 0x79
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	4413      	add	r3, r2
 80014c4:	75fb      	strb	r3, [r7, #23]
                            break;
 80014c6:	e000      	b.n	80014ca <FOCAN_GetVersion+0xc2>
                        default:
                            break;
                    }
                }
 80014c8:	bf00      	nop
        while ((step < reply) && (_GetTickMS() - tick < 1000)) {
 80014ca:	7dfa      	ldrb	r2, [r7, #23]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d207      	bcs.n	80014e2 <FOCAN_GetVersion+0xda>
 80014d2:	f009 f8fd 	bl	800a6d0 <_GetTickMS>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e0:	d3ad      	bcc.n	800143e <FOCAN_GetVersion+0x36>
            }
        }
        ret = (step == reply);
 80014e2:	7dfa      	ldrb	r2, [r7, #23]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000a40 	.word	0x20000a40
 8001500:	20000a00 	.word	0x20000a00
 8001504:	20000a20 	.word	0x20000a20

08001508 <FOTA_GetChecksum>:
extern CRC_HandleTypeDef hcrc;
extern I2C_HandleTypeDef hi2c2;
extern UART_HandleTypeDef huart1;

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT FOTA_GetChecksum(at_ftp_t *setFTP, uint32_t *checksum) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    SIMCOM_RESULT p;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // FTP Set file name
    sprintf(setFTP->file, "%s.crc", setFTP->version);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	337c      	adds	r3, #124	; 0x7c
 800151c:	461a      	mov	r2, r3
 800151e:	4929      	ldr	r1, [pc, #164]	; (80015c4 <FOTA_GetChecksum+0xbc>)
 8001520:	f009 f978 	bl	800a814 <siprintf>
    p = AT_FtpSetFile(setFTP);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f007 fbe5 	bl	8008cf4 <AT_FtpSetFile>
 800152a:	4603      	mov	r3, r0
 800152c:	77fb      	strb	r3, [r7, #31]

    // Open FTP Session
    if (p > 0) {
 800152e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dd08      	ble.n	8001548 <FOTA_GetChecksum+0x40>
        setFTPGET.mode = FTPGET_OPEN;
 8001536:	2301      	movs	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
        p = AT_FtpDownload(&setFTPGET);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f007 fc4c 	bl	8008ddc <AT_FtpDownload>
 8001544:	4603      	mov	r3, r0
 8001546:	77fb      	strb	r3, [r7, #31]
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 8001548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800154c:	2b00      	cmp	r3, #0
 800154e:	dd24      	ble.n	800159a <FOTA_GetChecksum+0x92>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d121      	bne.n	800159a <FOTA_GetChecksum+0x92>
        // Initiate Download
        setFTPGET.mode = FTPGET_READ;
 8001556:	2302      	movs	r3, #2
 8001558:	60bb      	str	r3, [r7, #8]
        setFTPGET.reqlength = 8;
 800155a:	2308      	movs	r3, #8
 800155c:	823b      	strh	r3, [r7, #16]
        p = AT_FtpDownload(&setFTPGET);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4618      	mov	r0, r3
 8001564:	f007 fc3a 	bl	8008ddc <AT_FtpDownload>
 8001568:	4603      	mov	r3, r0
 800156a:	77fb      	strb	r3, [r7, #31]

        if (p > 0) {
 800156c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd12      	ble.n	800159a <FOTA_GetChecksum+0x92>
            // Copy to Buffer
            *checksum = strtoul(setFTPGET.ptr, (char**) NULL, 16);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2210      	movs	r2, #16
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f009 fa10 	bl	800a9a0 <strtoul>
 8001580:	4602      	mov	r2, r0
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	601a      	str	r2, [r3, #0]

            // Indicator
            LOG_Str("FOTA:ChecksumOrigin = ");
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <FOTA_GetChecksum+0xc0>)
 8001588:	f008 faa8 	bl	8009adc <LOG_Str>
            LOG_Hex32(*checksum);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f008 fa79 	bl	8009a88 <LOG_Hex32>
            LOG_Enter();
 8001596:	f008 fa1d 	bl	80099d4 <LOG_Enter>
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fcca 	bl	8008f38 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d106      	bne.n	80015b8 <FOTA_GetChecksum+0xb0>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 80015aa:	2300      	movs	r3, #0
 80015ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b0:	2100      	movs	r1, #0
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <FOTA_GetChecksum+0xc4>)
 80015b4:	f008 fecc 	bl	800a350 <Simcom_Command>
    }

    return p;
 80015b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	0800b24c 	.word	0x0800b24c
 80015c8:	0800b254 	.word	0x0800b254
 80015cc:	0800b26c 	.word	0x0800b26c

080015d0 <FOTA_DownloadAndInstall>:

SIMCOM_RESULT FOTA_DownloadAndInstall(at_ftp_t *setFTP, uint32_t *len) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    uint32_t timer;
    AT_FTP_STATE state;
    at_ftpget_t setFTPGET;

    // FTP Set file name
    sprintf(setFTP->file, "%s.bin", setFTP->version);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	337c      	adds	r3, #124	; 0x7c
 80015e4:	461a      	mov	r2, r3
 80015e6:	495a      	ldr	r1, [pc, #360]	; (8001750 <FOTA_DownloadAndInstall+0x180>)
 80015e8:	f009 f914 	bl	800a814 <siprintf>
    p = AT_FtpSetFile(setFTP);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f007 fb81 	bl	8008cf4 <AT_FtpSetFile>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Get file size
    if (p > 0) {
 80015f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dd05      	ble.n	800160c <FOTA_DownloadAndInstall+0x3c>
        p = AT_FtpFileSize(setFTP);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f007 fb8d 	bl	8008d20 <AT_FtpFileSize>
 8001606:	4603      	mov	r3, r0
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Open FTP Session
    if (p > 0 && setFTP->size) {
 800160c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001610:	2b00      	cmp	r3, #0
 8001612:	dd0e      	ble.n	8001632 <FOTA_DownloadAndInstall+0x62>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <FOTA_DownloadAndInstall+0x62>
        setFTPGET.mode = FTPGET_OPEN;
 800161e:	2301      	movs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
        p = AT_FtpDownload(&setFTPGET);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fbd8 	bl	8008ddc <AT_FtpDownload>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Read FTP File
    if (p > 0 && setFTPGET.response == FTP_READY) {
 8001632:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd75      	ble.n	8001726 <FOTA_DownloadAndInstall+0x156>
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d172      	bne.n	8001726 <FOTA_DownloadAndInstall+0x156>
        // Prepare, start timer
        LOG_StrLn("FOTA:Start");
 8001640:	4844      	ldr	r0, [pc, #272]	; (8001754 <FOTA_DownloadAndInstall+0x184>)
 8001642:	f008 fa63 	bl	8009b0c <LOG_StrLn>
        timer = _GetTickMS();
 8001646:	f009 f843 	bl	800a6d0 <_GetTickMS>
 800164a:	6238      	str	r0, [r7, #32]

        // Erase APP area
        FLASHER_EraseAppArea();
 800164c:	f7ff fdc6 	bl	80011dc <FLASHER_EraseAppArea>

        // Copy chunk by chunk
        setFTPGET.mode = FTPGET_READ;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
        setFTPGET.reqlength = 1376;
 8001654:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8001658:	82bb      	strh	r3, [r7, #20]
        do {
            // Initiate Download
            p = AT_FtpDownload(&setFTPGET);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4618      	mov	r0, r3
 8001660:	f007 fbbc 	bl	8008ddc <AT_FtpDownload>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (p > 0 && setFTPGET.cnflength) {
 800166a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd34      	ble.n	80016dc <FOTA_DownloadAndInstall+0x10c>
 8001672:	8afb      	ldrh	r3, [r7, #22]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d031      	beq.n	80016dc <FOTA_DownloadAndInstall+0x10c>
                // Copy to Buffer
                FLASHER_WriteAppArea((uint8_t*) setFTPGET.ptr, setFTPGET.cnflength, *len);
 8001678:	69b8      	ldr	r0, [r7, #24]
 800167a:	8afb      	ldrh	r3, [r7, #22]
 800167c:	4619      	mov	r1, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f7ff fde4 	bl	8001250 <FLASHER_WriteAppArea>
                *len += setFTPGET.cnflength;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	8afa      	ldrh	r2, [r7, #22]
 800168e:	441a      	add	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]

                // Indicator
                _LedToggle();
 8001694:	f009 f836 	bl	800a704 <_LedToggle>
                LOG_Str("FOTA:Progress = ");
 8001698:	482f      	ldr	r0, [pc, #188]	; (8001758 <FOTA_DownloadAndInstall+0x188>)
 800169a:	f008 fa1f 	bl	8009adc <LOG_Str>
                LOG_Int(*len);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f008 f9a2 	bl	80099ec <LOG_Int>
                LOG_Str(" Bytes (");
 80016a8:	482c      	ldr	r0, [pc, #176]	; (800175c <FOTA_DownloadAndInstall+0x18c>)
 80016aa:	f008 fa17 	bl	8009adc <LOG_Str>
                LOG_Int(*len * 100 / setFTP->size);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	fb02 f203 	mul.w	r2, r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f008 f992 	bl	80099ec <LOG_Int>
                LOG_StrLn("%)");
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <FOTA_DownloadAndInstall+0x190>)
 80016ca:	f008 fa1f 	bl	8009b0c <LOG_StrLn>
            } else {
                break;
            }
        } while (*len < setFTP->size);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3be      	bcc.n	800165a <FOTA_DownloadAndInstall+0x8a>

        // Check, stop timer
        if (*len && *len == setFTP->size) {
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01a      	beq.n	800171a <FOTA_DownloadAndInstall+0x14a>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d113      	bne.n	800171a <FOTA_DownloadAndInstall+0x14a>
            /* Glue size information to image */
            FLASHER_WriteAppArea((uint8_t*) len, sizeof(uint32_t), SIZE_OFFSET);
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <FOTA_DownloadAndInstall+0x194>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f7ff fdaa 	bl	8001250 <FLASHER_WriteAppArea>

            LOG_Str("FOTA:End = ");
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <FOTA_DownloadAndInstall+0x198>)
 80016fe:	f008 f9ed 	bl	8009adc <LOG_Str>
            LOG_Int(_GetTickMS() - timer);
 8001702:	f008 ffe5 	bl	800a6d0 <_GetTickMS>
 8001706:	4602      	mov	r2, r0
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f008 f96d 	bl	80099ec <LOG_Int>
            LOG_StrLn("ms");
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <FOTA_DownloadAndInstall+0x19c>)
 8001714:	f008 f9fa 	bl	8009b0c <LOG_StrLn>
 8001718:	e005      	b.n	8001726 <FOTA_DownloadAndInstall+0x156>
        } else {
            LOG_StrLn("FOTA:Failed");
 800171a:	4815      	ldr	r0, [pc, #84]	; (8001770 <FOTA_DownloadAndInstall+0x1a0>)
 800171c:	f008 f9f6 	bl	8009b0c <LOG_StrLn>
            p = SIM_RESULT_ERROR;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    // Check state
    AT_FtpCurrentState(&state);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4618      	mov	r0, r3
 800172c:	f007 fc04 	bl	8008f38 <AT_FtpCurrentState>
    if (state == FTP_STATE_ESTABLISHED) {
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <FOTA_DownloadAndInstall+0x174>
        // Close session
        Simcom_Command("AT+FTPQUIT\r", NULL, 500, 0);
 8001736:	2300      	movs	r3, #0
 8001738:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <FOTA_DownloadAndInstall+0x1a4>)
 8001740:	f008 fe06 	bl	800a350 <Simcom_Command>
    }

    return p;
 8001744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001748:	4618      	mov	r0, r3
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800b278 	.word	0x0800b278
 8001754:	0800b280 	.word	0x0800b280
 8001758:	0800b28c 	.word	0x0800b28c
 800175c:	0800b2a0 	.word	0x0800b2a0
 8001760:	0800b2ac 	.word	0x0800b2ac
 8001764:	0007fffc 	.word	0x0007fffc
 8001768:	0800b2b0 	.word	0x0800b2b0
 800176c:	0800b2bc 	.word	0x0800b2bc
 8001770:	0800b2c0 	.word	0x0800b2c0
 8001774:	0800b26c 	.word	0x0800b26c

08001778 <FOTA_CompareChecksum>:

uint8_t FOTA_CompareChecksum(uint32_t checksum, uint32_t len, uint32_t address) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
    uint32_t crc = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
    uint8_t *addr = (uint8_t*) address;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	617b      	str	r3, [r7, #20]

    // Calculate CRC
    crc = CRC_Calculate8(addr, len, 1);
 800178c:	2201      	movs	r2, #1
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	6978      	ldr	r0, [r7, #20]
 8001792:	f008 f80d 	bl	80097b0 <CRC_Calculate8>
 8001796:	4603      	mov	r3, r0
 8001798:	613b      	str	r3, [r7, #16]

    // Indicator
    LOG_Str("FOTA:Checksum = ");
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <FOTA_CompareChecksum+0x7c>)
 800179c:	f008 f99e 	bl	8009adc <LOG_Str>
    if (crc == checksum) {
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10a      	bne.n	80017be <FOTA_CompareChecksum+0x46>
        LOG_StrLn("MATCH");
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <FOTA_CompareChecksum+0x80>)
 80017aa:	f008 f9af 	bl	8009b0c <LOG_StrLn>
        /* Glue checksum information to image */
        FLASHER_WriteAppArea((uint8_t*) &crc, sizeof(uint32_t), CHECKSUM_OFFSET);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <FOTA_CompareChecksum+0x84>)
 80017b4:	2104      	movs	r1, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fd4a 	bl	8001250 <FLASHER_WriteAppArea>
 80017bc:	e00e      	b.n	80017dc <FOTA_CompareChecksum+0x64>
    } else {
        LOG_StrLn("NOT MATCH");
 80017be:	4810      	ldr	r0, [pc, #64]	; (8001800 <FOTA_CompareChecksum+0x88>)
 80017c0:	f008 f9a4 	bl	8009b0c <LOG_StrLn>
        LOG_Hex32(checksum);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f008 f95f 	bl	8009a88 <LOG_Hex32>
        LOG_Str(" != ");
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <FOTA_CompareChecksum+0x8c>)
 80017cc:	f008 f986 	bl	8009adc <LOG_Str>
        LOG_Hex32(crc);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 f958 	bl	8009a88 <LOG_Hex32>
        LOG_Enter();
 80017d8:	f008 f8fc 	bl	80099d4 <LOG_Enter>
    }

    return (crc == checksum);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	0800b2cc 	.word	0x0800b2cc
 80017f8:	0800b2e0 	.word	0x0800b2e0
 80017fc:	0007fff8 	.word	0x0007fff8
 8001800:	0800b2e8 	.word	0x0800b2e8
 8001804:	0800b2f4 	.word	0x0800b2f4

08001808 <FOTA_Reboot>:

void FOTA_Reboot(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    /* Clear backup area */
    FLASHER_EraseBkpArea();
 800180c:	f7ff fcc6 	bl	800119c <FLASHER_EraseBkpArea>
    /* Reset DFU flag */
    EEPROM_FlagDFU(EE_CMD_W, 0);
 8001810:	2100      	movs	r1, #0
 8001812:	2001      	movs	r0, #1
 8001814:	f008 fa48 	bl	8009ca8 <EEPROM_FlagDFU>

    HAL_NVIC_SystemReset();
 8001818:	f001 fcd5 	bl	80031c6 <HAL_NVIC_SystemReset>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <FOTA_ValidImage>:

uint8_t FOTA_ValidImage(uint32_t address) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    uint32_t size, checksum = 0, crc = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
    uint8_t ret;
    uint8_t *ptr = (uint8_t*) address;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60fb      	str	r3, [r7, #12]

    /* Check beginning stack pointer */
    ret = IS_VALID_SP(APP_START_ADDR);
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <FOTA_ValidImage+0xbc>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <FOTA_ValidImage+0xc0>)
 800183a:	4013      	ands	r3, r2
 800183c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	76fb      	strb	r3, [r7, #27]

    /* Check the size */
    if (ret) {
 800184a:	7efb      	ldrb	r3, [r7, #27]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <FOTA_ValidImage+0x4e>
        /* Get the stored size information */
        size = *(uint32_t*) (address + SIZE_OFFSET);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8001856:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61fb      	str	r3, [r7, #28]
        ret = (size < APP_MAX_SIZE );
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <FOTA_ValidImage+0xc4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	bf94      	ite	ls
 8001866:	2301      	movls	r3, #1
 8001868:	2300      	movhi	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	76fb      	strb	r3, [r7, #27]
    }

    /* Check the checksum */
    if (ret) {
 800186e:	7efb      	ldrb	r3, [r7, #27]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02d      	beq.n	80018d0 <FOTA_ValidImage+0xb0>
        /* Get the stored checksum information */
        checksum = *(uint32_t*) (address + CHECKSUM_OFFSET);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 800187a:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]
        /* Calculate CRC */
        crc = CRC_Calculate8(ptr, size, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f007 ff92 	bl	80097b0 <CRC_Calculate8>
 800188c:	6138      	str	r0, [r7, #16]

        // Indicator
        LOG_Str("APP:Checksum = ");
 800188e:	4816      	ldr	r0, [pc, #88]	; (80018e8 <FOTA_ValidImage+0xc8>)
 8001890:	f008 f924 	bl	8009adc <LOG_Str>
        if (crc == checksum) {
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d103      	bne.n	80018a4 <FOTA_ValidImage+0x84>
            LOG_StrLn("MATCH");
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <FOTA_ValidImage+0xcc>)
 800189e:	f008 f935 	bl	8009b0c <LOG_StrLn>
 80018a2:	e00d      	b.n	80018c0 <FOTA_ValidImage+0xa0>
        } else {
            LOG_StrLn("NOT MATCH");
 80018a4:	4812      	ldr	r0, [pc, #72]	; (80018f0 <FOTA_ValidImage+0xd0>)
 80018a6:	f008 f931 	bl	8009b0c <LOG_StrLn>
            LOG_Hex32(checksum);
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f008 f8ec 	bl	8009a88 <LOG_Hex32>
            LOG_Str(" != ");
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <FOTA_ValidImage+0xd4>)
 80018b2:	f008 f913 	bl	8009adc <LOG_Str>
            LOG_Hex32(crc);
 80018b6:	6938      	ldr	r0, [r7, #16]
 80018b8:	f008 f8e6 	bl	8009a88 <LOG_Hex32>
            LOG_Enter();
 80018bc:	f008 f88a 	bl	80099d4 <LOG_Enter>
        }

        ret = (checksum == crc);
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	76fb      	strb	r3, [r7, #27]
    }

    return ret;
 80018d0:	7efb      	ldrb	r3, [r7, #27]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	08020000 	.word	0x08020000
 80018e0:	2ffb0000 	.word	0x2ffb0000
 80018e4:	0007ffff 	.word	0x0007ffff
 80018e8:	0800b2fc 	.word	0x0800b2fc
 80018ec:	0800b2e0 	.word	0x0800b2e0
 80018f0:	0800b2e8 	.word	0x0800b2e8
 80018f4:	0800b2f4 	.word	0x0800b2f4

080018f8 <FOTA_InProgressDFU>:

uint8_t FOTA_InProgressDFU(void) {
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
    return IS_DFU_IN_PROGRESS(DFU_FLAG);
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <FOTA_InProgressDFU+0x20>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <FOTA_InProgressDFU+0x24>)
 8001902:	4293      	cmp	r3, r2
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200002ac 	.word	0x200002ac
 800191c:	89abcdef 	.word	0x89abcdef

08001920 <FOTA_JumpToApplication>:

void FOTA_JumpToApplication(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
    uint32_t appStack, appEntry;

    /* Get stack & entry pointer */
    appStack = *(__IO uint32_t*) APP_START_ADDR;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <FOTA_JumpToApplication+0x58>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
    appEntry = *(__IO uint32_t*) (APP_START_ADDR + 4);
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <FOTA_JumpToApplication+0x5c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60bb      	str	r3, [r7, #8]

    /* Shutdown all peripherals */
    HAL_CAN_MspDeInit(&hcan1);
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <FOTA_JumpToApplication+0x60>)
 8001934:	f000 fbba 	bl	80020ac <HAL_CAN_MspDeInit>
    HAL_CRC_MspDeInit(&hcrc);
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <FOTA_JumpToApplication+0x64>)
 800193a:	f000 fbf7 	bl	800212c <HAL_CRC_MspDeInit>
    HAL_I2C_MspDeInit(&hi2c2);
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <FOTA_JumpToApplication+0x68>)
 8001940:	f000 fc68 	bl	8002214 <HAL_I2C_MspDeInit>
    HAL_UART_MspDeInit(&huart1);
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <FOTA_JumpToApplication+0x6c>)
 8001946:	f000 fd07 	bl	8002358 <HAL_UART_MspDeInit>
    HAL_RCC_DeInit();
 800194a:	f004 f94b 	bl	8005be4 <HAL_RCC_DeInit>
    HAL_DeInit();
 800194e:	f000 fdfd 	bl	800254c <HAL_DeInit>

    /* Reset systick */
    SysTick->CTRL = 0;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <FOTA_JumpToApplication+0x70>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <FOTA_JumpToApplication+0x70>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <FOTA_JumpToApplication+0x70>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f383 8808 	msr	MSP, r3

    /* Set stack pointer */
    __set_MSP(appStack);

    /* Jump to user ResetHandler */
    void (*jump)(void) = (void (*)(void))(appEntry);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	607b      	str	r3, [r7, #4]
    jump();
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4798      	blx	r3

    /* Never reached */
    while (1)
 8001976:	e7fe      	b.n	8001976 <FOTA_JumpToApplication+0x56>
 8001978:	08020000 	.word	0x08020000
 800197c:	08020004 	.word	0x08020004
 8001980:	200003b4 	.word	0x200003b4
 8001984:	200002b8 	.word	0x200002b8
 8001988:	200002c0 	.word	0x200002c0
 800198c:	20000374 	.word	0x20000374
 8001990:	e000e010 	.word	0xe000e010

08001994 <FOTA_Upgrade>:
        ;
}

uint8_t FOTA_Upgrade(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
    uint8_t p;
    uint32_t checksum;

    /* Set DFU flag */
    if (!FOTA_InProgressDFU()) {
 800199a:	f7ff ffad 	bl	80018f8 <FOTA_InProgressDFU>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <FOTA_Upgrade+0x2c>
        EEPROM_FlagDFU(EE_CMD_W, DFU_FLAG);
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <FOTA_Upgrade+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	2001      	movs	r0, #1
 80019ac:	f008 f97c 	bl	8009ca8 <EEPROM_FlagDFU>

        // Backup current application (if necessary)
        if (FOTA_ValidImage(APP_START_ADDR)) {
 80019b0:	480e      	ldr	r0, [pc, #56]	; (80019ec <FOTA_Upgrade+0x58>)
 80019b2:	f7ff ff35 	bl	8001820 <FOTA_ValidImage>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <FOTA_Upgrade+0x2c>
            FLASHER_BackupApp();
 80019bc:	f7ff fc62 	bl	8001284 <FLASHER_BackupApp>
        }
    }

    /* Get the stored checksum information */
    checksum = *(uint32_t*) (BKP_START_ADDR + CHECKSUM_OFFSET);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <FOTA_Upgrade+0x5c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	607b      	str	r3, [r7, #4]

    /* Download image and install */
    p = Simcom_FOTA(checksum);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f008 fbea 	bl	800a1a0 <Simcom_FOTA>
 80019cc:	4603      	mov	r3, r0
 80019ce:	70fb      	strb	r3, [r7, #3]

    // Reset DFU flag only when FOTA success
    if (p) {
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <FOTA_Upgrade+0x4a>
        EEPROM_FlagDFU(EE_CMD_W, 0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2001      	movs	r0, #1
 80019da:	f008 f965 	bl	8009ca8 <EEPROM_FlagDFU>
    }

    return p;
 80019de:	78fb      	ldrb	r3, [r7, #3]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002ac 	.word	0x200002ac
 80019ec:	08020000 	.word	0x08020000
 80019f0:	0811fff8 	.word	0x0811fff8

080019f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80019fa:	f000 fd85 	bl	8002508 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80019fe:	f000 f8a5 	bl	8001b4c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001a02:	f000 f9e1 	bl	8001dc8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001a06:	f000 f9bf 	bl	8001d88 <MX_DMA_Init>
    MX_CRC_Init();
 8001a0a:	f000 f93f 	bl	8001c8c <MX_CRC_Init>
    MX_CAN1_Init();
 8001a0e:	f000 f907 	bl	8001c20 <MX_CAN1_Init>
    MX_I2C2_Init();
 8001a12:	f000 f94f 	bl	8001cb4 <MX_I2C2_Init>
    MX_USART1_UART_Init();
 8001a16:	f000 f98d 	bl	8001d34 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    SIMCOM_DMA_Init();
 8001a1a:	f006 fd37 	bl	800848c <SIMCOM_DMA_Init>
    EEPROM_Init();
 8001a1e:	f008 f8ed 	bl	8009bfc <EEPROM_Init>
    CANBUS_Init();
 8001a22:	f007 fe03 	bl	800962c <CANBUS_Init>
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* IAP flag has been set, initiate firmware download procedure */
    _LedWrite(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f008 fe5a 	bl	800a6e0 <_LedWrite>
    if (*(uint32_t*) IAP_FLAG_ADDR == IAP_FLAG) {
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <main+0x124>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <main+0x128>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d121      	bne.n	8001a7a <main+0x86>
        /* Handle VCU FOTA */
        if (*(uint32_t*) IAP_TYPE_ADDR == IAP_TYPE_VCU) {
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <main+0x12c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <main+0x130>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d107      	bne.n	8001a50 <main+0x5c>
            LOG_StrLn("IAP set, do FOTA.");
 8001a40:	4839      	ldr	r0, [pc, #228]	; (8001b28 <main+0x134>)
 8001a42:	f008 f863 	bl	8009b0c <LOG_StrLn>
            ret = FOTA_Upgrade();
 8001a46:	f7ff ffa5 	bl	8001994 <FOTA_Upgrade>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	e006      	b.n	8001a5e <main+0x6a>
        }
        /* Handle HMI FOCAN */
        else {
            LOG_StrLn("IAP set, do FOCAN.");
 8001a50:	4836      	ldr	r0, [pc, #216]	; (8001b2c <main+0x138>)
 8001a52:	f008 f85b 	bl	8009b0c <LOG_StrLn>
            ret = FOCAN_Upgrade();
 8001a56:	f7ff fc4d 	bl	80012f4 <FOCAN_Upgrade>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
        }
        /* Everything went well */
        if (ret) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <main+0x7a>
            /* Reset IAP flag */
            *(uint32_t*) IAP_FLAG_ADDR = 0;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <main+0x124>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 8001a6a:	f7ff fecd 	bl	8001808 <FOTA_Reboot>
        }
        /* Reset IAP flag */
        *(uint32_t*) IAP_FLAG_ADDR = 0;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <main+0x124>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SystemReset();
 8001a74:	f001 fba7 	bl	80031c6 <HAL_NVIC_SystemReset>
 8001a78:	e048      	b.n	8001b0c <main+0x118>
    }
    /* Jump to application if it exist and DFU finished */
    else if (FOTA_ValidImage(APP_START_ADDR) && !FOTA_InProgressDFU()) {
 8001a7a:	482d      	ldr	r0, [pc, #180]	; (8001b30 <main+0x13c>)
 8001a7c:	f7ff fed0 	bl	8001820 <FOTA_ValidImage>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <main+0xa8>
 8001a86:	f7ff ff37 	bl	80018f8 <FOTA_InProgressDFU>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <main+0xa8>
        LOG_StrLn("Jump to application.");
 8001a90:	4828      	ldr	r0, [pc, #160]	; (8001b34 <main+0x140>)
 8001a92:	f008 f83b 	bl	8009b0c <LOG_StrLn>
        /* Jump sequence */
        FOTA_JumpToApplication();
 8001a96:	f7ff ff43 	bl	8001920 <FOTA_JumpToApplication>
 8001a9a:	e037      	b.n	8001b0c <main+0x118>
    }
    /* Power reset during DFU, try once more */
    else if (FOTA_InProgressDFU()) {
 8001a9c:	f7ff ff2c 	bl	80018f8 <FOTA_InProgressDFU>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <main+0xd8>
        LOG_StrLn("DFU set, do FOTA once more.");
 8001aa6:	4824      	ldr	r0, [pc, #144]	; (8001b38 <main+0x144>)
 8001aa8:	f008 f830 	bl	8009b0c <LOG_StrLn>
        /* Everything went well, boot form new image */
        if (FOTA_Upgrade()) {
 8001aac:	f7ff ff72 	bl	8001994 <FOTA_Upgrade>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <main+0xc6>
            /* Take branching decision on next reboot */
            FOTA_Reboot();
 8001ab6:	f7ff fea7 	bl	8001808 <FOTA_Reboot>
        }
        /* Erase partially programmed application area */
        FLASHER_EraseAppArea();
 8001aba:	f7ff fb8f 	bl	80011dc <FLASHER_EraseAppArea>
        /* Reset DFU flag */
        EEPROM_FlagDFU(EE_CMD_W, 0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f008 f8f1 	bl	8009ca8 <EEPROM_FlagDFU>
        HAL_NVIC_SystemReset();
 8001ac6:	f001 fb7e 	bl	80031c6 <HAL_NVIC_SystemReset>
 8001aca:	e01f      	b.n	8001b0c <main+0x118>
    }
    /* Try to restore the backup */
    else {
        /* Check is the backup image valid */
        if (FOTA_ValidImage(BKP_START_ADDR)) {
 8001acc:	481b      	ldr	r0, [pc, #108]	; (8001b3c <main+0x148>)
 8001ace:	f7ff fea7 	bl	8001820 <FOTA_ValidImage>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <main+0xfa>
            LOG_StrLn("Has backed-up image, roll-back.");
 8001ad8:	4819      	ldr	r0, [pc, #100]	; (8001b40 <main+0x14c>)
 8001ada:	f008 f817 	bl	8009b0c <LOG_StrLn>
            /* Restore back old image to application area */
            if (FLASHER_RestoreApp()) {
 8001ade:	f7ff fbed 	bl	80012bc <FLASHER_RestoreApp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00c      	beq.n	8001b02 <main+0x10e>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8001ae8:	f7ff fe8e 	bl	8001808 <FOTA_Reboot>
 8001aec:	e009      	b.n	8001b02 <main+0x10e>
            }
        } else {
            LOG_StrLn("No image at all, do FOTA.");
 8001aee:	4815      	ldr	r0, [pc, #84]	; (8001b44 <main+0x150>)
 8001af0:	f008 f80c 	bl	8009b0c <LOG_StrLn>
            /* Download new firmware for the first time */
            if (FOTA_Upgrade()) {
 8001af4:	f7ff ff4e 	bl	8001994 <FOTA_Upgrade>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <main+0x10e>
                /* Take branching decision on next reboot */
                FOTA_Reboot();
 8001afe:	f7ff fe83 	bl	8001808 <FOTA_Reboot>
            }
        }
        HAL_NVIC_SystemReset();
 8001b02:	f001 fb60 	bl	80031c6 <HAL_NVIC_SystemReset>
        /* Meaningless, failure indicator */
        _Error("Boot-loader failure!!");
 8001b06:	4810      	ldr	r0, [pc, #64]	; (8001b48 <main+0x154>)
 8001b08:	f008 fe08 	bl	800a71c <_Error>
 8001b0c:	2300      	movs	r3, #0
    }
    /* USER CODE END 3 */
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2004fffc 	.word	0x2004fffc
 8001b1c:	aabbccdd 	.word	0xaabbccdd
 8001b20:	2004fff8 	.word	0x2004fff8
 8001b24:	a1b2c3d4 	.word	0xa1b2c3d4
 8001b28:	0800b30c 	.word	0x0800b30c
 8001b2c:	0800b320 	.word	0x0800b320
 8001b30:	08020000 	.word	0x08020000
 8001b34:	0800b334 	.word	0x0800b334
 8001b38:	0800b34c 	.word	0x0800b34c
 8001b3c:	080a0000 	.word	0x080a0000
 8001b40:	0800b368 	.word	0x0800b368
 8001b44:	0800b388 	.word	0x0800b388
 8001b48:	0800b3a4 	.word	0x0800b3a4

08001b4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b094      	sub	sp, #80	; 0x50
 8001b50:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	2234      	movs	r2, #52	; 0x34
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 fe52 	bl	800a804 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <SystemClock_Config+0xcc>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <SystemClock_Config+0xcc>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <SystemClock_Config+0xcc>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <SystemClock_Config+0xd0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <SystemClock_Config+0xd0>)
 8001b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <SystemClock_Config+0xd0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 100;
 8001bc0:	2364      	movs	r3, #100	; 0x64
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 f8d1 	bl	8005d7c <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x98>
            {
        Error_Handler();
 8001be0:	f000 f9ec 	bl	8001fbc <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001be4:	230f      	movs	r3, #15
 8001be6:	60bb      	str	r3, [r7, #8]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	2302      	movs	r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fdfd 	bl	8005800 <HAL_RCC_ClockConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0xc4>
            {
        Error_Handler();
 8001c0c:	f000 f9d6 	bl	8001fbc <Error_Handler>
    }
}
 8001c10:	bf00      	nop
 8001c12:	3750      	adds	r7, #80	; 0x50
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000

08001c20 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
    /* USER CODE END CAN1_Init 0 */

    /* USER CODE BEGIN CAN1_Init 1 */

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <MX_CAN1_Init+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 10;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c3e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c42:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = ENABLE;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c70:	f000 fd12 	bl	8002698 <HAL_CAN_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_CAN1_Init+0x5e>
            {
        Error_Handler();
 8001c7a:	f000 f99f 	bl	8001fbc <Error_Handler>
    }
    /* USER CODE BEGIN CAN1_Init 2 */

    /* USER CODE END CAN1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003b4 	.word	0x200003b4
 8001c88:	40006400 	.word	0x40006400

08001c8c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_CRC_Init+0x20>)
 8001c92:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <MX_CRC_Init+0x24>)
 8001c94:	601a      	str	r2, [r3, #0]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_CRC_Init+0x20>)
 8001c98:	f001 faa5 	bl	80031e6 <HAL_CRC_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_CRC_Init+0x1a>
            {
        Error_Handler();
 8001ca2:	f000 f98b 	bl	8001fbc <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002b8 	.word	0x200002b8
 8001cb0:	40023000 	.word	0x40023000

08001cb4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <MX_I2C2_Init+0x78>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <MX_I2C2_Init+0x7c>)
 8001cc2:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001cf2:	f002 fc2d 	bl	8004550 <HAL_I2C_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C2_Init+0x4c>
            {
        Error_Handler();
 8001cfc:	f000 f95e 	bl	8001fbc <Error_Handler>
    }
    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d00:	2100      	movs	r1, #0
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001d04:	f003 fd01 	bl	800570a <HAL_I2CEx_ConfigAnalogFilter>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_I2C2_Init+0x5e>
            {
        Error_Handler();
 8001d0e:	f000 f955 	bl	8001fbc <Error_Handler>
    }
    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d12:	2100      	movs	r1, #0
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_I2C2_Init+0x74>)
 8001d16:	f003 fd34 	bl	8005782 <HAL_I2CEx_ConfigDigitalFilter>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_I2C2_Init+0x70>
            {
        Error_Handler();
 8001d20:	f000 f94c 	bl	8001fbc <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002c0 	.word	0x200002c0
 8001d2c:	40005800 	.word	0x40005800
 8001d30:	000186a0 	.word	0x000186a0

08001d34 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_USART1_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	f004 fa48 	bl	8006200 <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 8001d76:	f000 f921 	bl	8001fbc <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000374 	.word	0x20000374
 8001d84:	40011000 	.word	0x40011000

08001d88 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_DMA_Init+0x3c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	203a      	movs	r0, #58	; 0x3a
 8001db0:	f001 f9d1 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001db4:	203a      	movs	r0, #58	; 0x3a
 8001db6:	f001 f9ea 	bl	800318e <HAL_NVIC_EnableIRQ>

}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a61      	ldr	r2, [pc, #388]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <MX_GPIO_Init+0x1dc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4847      	ldr	r0, [pc, #284]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001e8c:	f002 fb2c 	bl	80044e8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, INT_NET_RST_Pin | INT_NET_DTR_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001e96:	4845      	ldr	r0, [pc, #276]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001e98:	f002 fb26 	bl	80044e8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea2:	4843      	ldr	r0, [pc, #268]	; (8001fb0 <MX_GPIO_Init+0x1e8>)
 8001ea4:	f002 fb20 	bl	80044e8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE2 PE3 PE4 PE5
     PE6 PE7 PE8 PE9
     PE10 PE11 PE12 PE13
     PE14 PE15 PE0 PE1 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8001ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eac:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
            | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	483d      	ldr	r0, [pc, #244]	; (8001fb4 <MX_GPIO_Init+0x1ec>)
 8001ebe:	f002 f88f 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 PC14 PC15 PC1
     PC2 PC3 PC4 PC5
     PC6 PC7 PC8 PC9
     PC10 PC11 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
 8001ec2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001ec6:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
            | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
            | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4834      	ldr	r0, [pc, #208]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001ed8:	f002 f882 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pin : INT_NET_PWR_Pin */
    GPIO_InitStruct.Pin = INT_NET_PWR_Pin;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(INT_NET_PWR_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <MX_GPIO_Init+0x1e0>)
 8001ef4:	f002 f874 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 PA2 PA3
     PA4 PA5 PA6 PA7
     PA8 PA11 PA12 PA15 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8001ef8:	f649 13ff 	movw	r3, #39423	; 0x99ff
 8001efc:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <MX_GPIO_Init+0x1f0>)
 8001f0e:	f002 f867 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 PB12 PB13
     PB4 PB5 PB6 PB7
     PB8 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_12 | GPIO_PIN_13
 8001f12:	f243 13f3 	movw	r3, #12787	; 0x31f3
 8001f16:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
            | GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4821      	ldr	r0, [pc, #132]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001f28:	f002 f85a 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f34:	2302      	movs	r3, #2
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001f40:	f002 f84e 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pins : INT_NET_RST_Pin INT_NET_DTR_Pin */
    GPIO_InitStruct.Pin = INT_NET_RST_Pin | INT_NET_DTR_Pin;
 8001f44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4813      	ldr	r0, [pc, #76]	; (8001fac <MX_GPIO_Init+0x1e4>)
 8001f5e:	f002 f83f 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD8 PD9 PD10 PD11
     PD12 PD14 PD15 PD2
     PD3 PD4 PD5 PD6
     PD7 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001f62:	f64d 73fc 	movw	r3, #57340	; 0xdffc
 8001f66:	61fb      	str	r3, [r7, #28]
            | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_2
            | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
            | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <MX_GPIO_Init+0x1e8>)
 8001f78:	f002 f832 	bl	8003fe0 <HAL_GPIO_Init>

    /*Configure GPIO pin : SYS_LED_Pin */
    GPIO_InitStruct.Pin = SYS_LED_Pin;
 8001f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f86:	2302      	movs	r3, #2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SYS_LED_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <MX_GPIO_Init+0x1e8>)
 8001f96:	f002 f823 	bl	8003fe0 <HAL_GPIO_Init>

}
 8001f9a:	bf00      	nop
 8001f9c:	3730      	adds	r7, #48	; 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40020000 	.word	0x40020000

08001fbc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_MspInit+0x4c>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_CAN_MspInit+0x84>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12b      	bne.n	8002096 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 8002048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_CAN_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002076:	2303      	movs	r3, #3
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002086:	2309      	movs	r3, #9
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_CAN_MspInit+0x8c>)
 8002092:	f001 ffa5 	bl	8003fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40006400 	.word	0x40006400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020c00 	.word	0x40020c00

080020ac <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_CAN_MspDeInit+0x30>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d109      	bne.n	80020d2 <HAL_CAN_MspDeInit+0x26>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_CAN_MspDeInit+0x34>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_CAN_MspDeInit+0x34>)
 80020c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 80020ca:	2103      	movs	r1, #3
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_CAN_MspDeInit+0x38>)
 80020ce:	f002 f919 	bl	8004304 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40006400 	.word	0x40006400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020c00 	.word	0x40020c00

080020e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_CRC_MspInit+0x3c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10d      	bne.n	8002116 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_CRC_MspInit+0x40>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_CRC_MspInit+0x40>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_CRC_MspInit+0x40>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023000 	.word	0x40023000
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_CRC_MspDeInit+0x2c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d105      	bne.n	800214a <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_CRC_MspDeInit+0x30>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_CRC_MspDeInit+0x30>)
 8002144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023000 	.word	0x40023000
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_I2C_MspInit+0xa8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d13d      	bne.n	80021fe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_I2C_MspInit+0xac>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_I2C_MspInit+0xac>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_I2C_MspInit+0xac>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INT_EEPROM_SCL_Pin;
 800219e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021b0:	2304      	movs	r3, #4
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4815      	ldr	r0, [pc, #84]	; (8002210 <HAL_I2C_MspInit+0xb0>)
 80021bc:	f001 ff10 	bl	8003fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INT_EEPROM_SDA_Pin;
 80021c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80021d2:	2309      	movs	r3, #9
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INT_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <HAL_I2C_MspInit+0xb0>)
 80021de:	f001 feff 	bl	8003fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_I2C_MspInit+0xac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_I2C_MspInit+0xac>)
 80021ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_I2C_MspInit+0xac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005800 	.word	0x40005800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020400 	.word	0x40020400

08002214 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_I2C_MspDeInit+0x30>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10a      	bne.n	800223c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_I2C_MspDeInit+0x34>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_I2C_MspDeInit+0x34>)
 800222c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INT_EEPROM_SCL_Pin|INT_EEPROM_SDA_Pin);
 8002232:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_I2C_MspDeInit+0x38>)
 8002238:	f002 f864 	bl	8004304 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40005800 	.word	0x40005800
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a35      	ldr	r2, [pc, #212]	; (8002344 <HAL_UART_MspInit+0xf4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d164      	bne.n	800233c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_UART_MspInit+0xf8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a33      	ldr	r2, [pc, #204]	; (8002348 <HAL_UART_MspInit+0xf8>)
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_UART_MspInit+0xf8>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_UART_MspInit+0xf8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <HAL_UART_MspInit+0xf8>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_UART_MspInit+0xf8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = INT_NET_TX_Pin|INT_NET_RX_Pin;
 80022aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022bc:	2307      	movs	r3, #7
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4821      	ldr	r0, [pc, #132]	; (800234c <HAL_UART_MspInit+0xfc>)
 80022c8:	f001 fe8a 	bl	8003fe0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_UART_MspInit+0x104>)
 80022d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_UART_MspInit+0x100>)
 80022fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002300:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x100>)
 8002304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002308:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_UART_MspInit+0x100>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002310:	480f      	ldr	r0, [pc, #60]	; (8002350 <HAL_UART_MspInit+0x100>)
 8002312:	f000 ff85 	bl	8003220 <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800231c:	f7ff fe4e 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_UART_MspInit+0x100>)
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_UART_MspInit+0x100>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	2025      	movs	r0, #37	; 0x25
 8002332:	f000 ff10 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002336:	2025      	movs	r0, #37	; 0x25
 8002338:	f000 ff29 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40011000 	.word	0x40011000
 8002348:	40023800 	.word	0x40023800
 800234c:	40020000 	.word	0x40020000
 8002350:	20000314 	.word	0x20000314
 8002354:	40026440 	.word	0x40026440

08002358 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_UART_MspDeInit+0x40>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d112      	bne.n	8002390 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_UART_MspDeInit+0x44>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <HAL_UART_MspDeInit+0x44>)
 8002370:	f023 0310 	bic.w	r3, r3, #16
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, INT_NET_TX_Pin|INT_NET_RX_Pin);
 8002376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <HAL_UART_MspDeInit+0x48>)
 800237c:	f001 ffc2 	bl	8004304 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fff9 	bl	800337c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800238a:	2025      	movs	r0, #37	; 0x25
 800238c:	f000 ff0d 	bl	80031aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40011000 	.word	0x40011000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 f90c 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <USART1_IRQHandler+0x14>)
 8002406:	f004 f861 	bl	80064cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
    SIMCOM_USART_IrqHandler();
 800240a:	f004 ff2d 	bl	8007268 <SIMCOM_USART_IrqHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000374 	.word	0x20000374

08002418 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <DMA2_Stream2_IRQHandler+0x14>)
 800241e:	f001 f885 	bl	800352c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
    SIMCOM_DMA_IrqHandler();
 8002422:	f004 ff3f 	bl	80072a4 <SIMCOM_DMA_IrqHandler>

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000314 	.word	0x20000314

08002430 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x50>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <_sbrk+0x16>
		heap_end = &end;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <_sbrk+0x50>)
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <_sbrk+0x54>)
 8002444:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <_sbrk+0x50>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <_sbrk+0x50>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	466a      	mov	r2, sp
 8002456:	4293      	cmp	r3, r2
 8002458:	d907      	bls.n	800246a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800245a:	f008 f98f 	bl	800a77c <__errno>
 800245e:	4602      	mov	r2, r0
 8002460:	230c      	movs	r3, #12
 8002462:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002468:	e006      	b.n	8002478 <_sbrk+0x48>
	}

	heap_end += incr;
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <_sbrk+0x50>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4a03      	ldr	r2, [pc, #12]	; (8002480 <_sbrk+0x50>)
 8002474:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000220 	.word	0x20000220
 8002484:	20000a50 	.word	0x20000a50

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <SystemInit+0x28>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <SystemInit+0x28>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SystemInit+0x28>)
 800249e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a2:	609a      	str	r2, [r3, #8]
#endif
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80024b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80024b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ba:	e003      	b.n	80024c4 <LoopCopyDataInit>

080024bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024c2:	3104      	adds	r1, #4

080024c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024cc:	d3f6      	bcc.n	80024bc <CopyDataInit>
  ldr  r2, =_sbss
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024d0:	e002      	b.n	80024d8 <LoopFillZerobss>

080024d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80024d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024d4:	f842 3b04 	str.w	r3, [r2], #4

080024d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024dc:	d3f9      	bcc.n	80024d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024de:	f7ff ffd3 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e2:	f008 f951 	bl	800a788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e6:	f7ff fa85 	bl	80019f4 <main>
  bx  lr    
 80024ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024ec:	2004fff8 	.word	0x2004fff8
  ldr  r3, =_sidata
 80024f0:	0800ba40 	.word	0x0800ba40
  ldr  r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024f8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80024fc:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8002500:	20000a4c 	.word	0x20000a4c

08002504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <HAL_Init+0x40>)
 8002512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_Init+0x40>)
 800251e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_Init+0x40>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 fe05 	bl	8003140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f83c 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800253c:	f7ff fd46 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_DeInit+0x54>)
 8002552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002556:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_DeInit+0x54>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_DeInit+0x54>)
 8002560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_DeInit+0x54>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_DeInit+0x54>)
 800256e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002572:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_DeInit+0x54>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_DeInit+0x54>)
 800257c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002580:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_DeInit+0x54>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_DeInit+0x54>)
 800258a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_DeInit+0x54>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002596:	f000 f805 	bl	80025a4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fdfb 	bl	80031ce <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	f000 fdb1 	bl	8003156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000000 	.word	0x20000000
 800260c:	20000008 	.word	0x20000008
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008
 8002638:	200003dc 	.word	0x200003dc

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200003dc 	.word	0x200003dc

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff ffee 	bl	800263c <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_Delay+0x40>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffde 	bl	800263c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0ed      	b.n	8002886 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fcb0 	bl	800201c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0202 	bic.w	r2, r2, #2
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026cc:	f7ff ffb6 	bl	800263c <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026d2:	e012      	b.n	80026fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d4:	f7ff ffb2 	bl	800263c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d90b      	bls.n	80026fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0c5      	b.n	8002886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e5      	bne.n	80026d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002718:	f7ff ff90 	bl	800263c <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800271e:	e012      	b.n	8002746 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002720:	f7ff ff8c 	bl	800263c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b0a      	cmp	r3, #10
 800272c:	d90b      	bls.n	8002746 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2205      	movs	r2, #5
 800273e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e09f      	b.n	8002886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0e5      	beq.n	8002720 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d108      	bne.n	800276e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e007      	b.n	800277e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7e5b      	ldrb	r3, [r3, #25]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e007      	b.n	80027a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7e9b      	ldrb	r3, [r3, #26]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d108      	bne.n	80027c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0220 	orr.w	r2, r2, #32
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e007      	b.n	80027d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0220 	bic.w	r2, r2, #32
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7edb      	ldrb	r3, [r3, #27]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0210 	bic.w	r2, r2, #16
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e007      	b.n	80027fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0210 	orr.w	r2, r2, #16
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7f1b      	ldrb	r3, [r3, #28]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e007      	b.n	8002826 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0208 	bic.w	r2, r2, #8
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7f5b      	ldrb	r3, [r3, #29]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0204 	orr.w	r2, r2, #4
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e007      	b.n	8002850 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	ea42 0103 	orr.w	r1, r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <HAL_CAN_ConfigFilter+0x26>
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f040 80c7 	bne.w	8002a44 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_CAN_ConfigFilter+0x1d0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d001      	beq.n	80028c4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_CAN_ConfigFilter+0x1d4>)
 80028c2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_CAN_ConfigFilter+0x1d4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	431a      	orrs	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2201      	movs	r2, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d123      	bne.n	8002972 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800294c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3248      	adds	r2, #72	; 0x48
 8002952:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002966:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	3348      	adds	r3, #72	; 0x48
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d122      	bne.n	80029c0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	431a      	orrs	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800299a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3248      	adds	r2, #72	; 0x48
 80029a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029b6:	6979      	ldr	r1, [r7, #20]
 80029b8:	3348      	adds	r3, #72	; 0x48
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029da:	e007      	b.n	80029ec <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a06:	e007      	b.n	8002a18 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d107      	bne.n	8002a30 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e006      	b.n	8002a52 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40006c00 	.word	0x40006c00
 8002a64:	40006400 	.word	0x40006400

08002a68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d12e      	bne.n	8002ada <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a94:	f7ff fdd2 	bl	800263c <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a9a:	e012      	b.n	8002ac2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a9c:	f7ff fdce 	bl	800263c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b0a      	cmp	r3, #10
 8002aa8:	d90b      	bls.n	8002ac2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e012      	b.n	8002ae8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e006      	b.n	8002ae8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d003      	beq.n	8002b1c <HAL_CAN_AddTxMessage+0x2c>
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	f040 80b8 	bne.w	8002c8c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a0 	beq.w	8002c7c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	0e1b      	lsrs	r3, r3, #24
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d907      	bls.n	8002b5c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e09e      	b.n	8002c9a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	409a      	lsls	r2, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b78:	68f9      	ldr	r1, [r7, #12]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3318      	adds	r3, #24
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	440b      	add	r3, r1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e00f      	b.n	8002baa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	440b      	add	r3, r1
 8002ba8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	440b      	add	r3, r1
 8002bba:	3304      	adds	r3, #4
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	7d1b      	ldrb	r3, [r3, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d111      	bne.n	8002bea <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3318      	adds	r3, #24
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3318      	adds	r3, #24
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	440b      	add	r3, r1
 8002be6:	3304      	adds	r3, #4
 8002be8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3307      	adds	r3, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	061a      	lsls	r2, r3, #24
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3306      	adds	r3, #6
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3305      	adds	r3, #5
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4313      	orrs	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	3204      	adds	r2, #4
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	ea43 0200 	orr.w	r2, r3, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3303      	adds	r3, #3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	061a      	lsls	r2, r3, #24
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3301      	adds	r3, #1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	4610      	mov	r0, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	ea43 0200 	orr.w	r2, r3, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3318      	adds	r3, #24
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4413      	add	r3, r2
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3318      	adds	r3, #24
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e00e      	b.n	8002c9a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e006      	b.n	8002c9a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d002      	beq.n	8002cc6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d11d      	bne.n	8002d02 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d003      	beq.n	8002d34 <HAL_CAN_GetRxMessage+0x24>
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	f040 80f3 	bne.w	8002f1a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10e      	bne.n	8002d58 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0e7      	b.n	8002f28 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0d8      	b.n	8002f28 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	331b      	adds	r3, #27
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0204 	and.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10c      	bne.n	8002dae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	331b      	adds	r3, #27
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	4413      	add	r3, r2
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0d5b      	lsrs	r3, r3, #21
 8002da4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e00b      	b.n	8002dc6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	331b      	adds	r3, #27
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	331b      	adds	r3, #27
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0202 	and.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	331b      	adds	r3, #27
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	331b      	adds	r3, #27
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	331b      	adds	r3, #27
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0a1a      	lsrs	r2, r3, #8
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0c1a      	lsrs	r2, r3, #16
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e1a      	lsrs	r2, r3, #24
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3303      	adds	r3, #3
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0a1a      	lsrs	r2, r3, #8
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	3305      	adds	r3, #5
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0c1a      	lsrs	r2, r3, #16
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3306      	adds	r3, #6
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e1a      	lsrs	r2, r3, #24
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	e007      	b.n	8002f16 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e006      	b.n	8002f28 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f50:	4013      	ands	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__NVIC_GetPriorityGrouping+0x18>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	f003 0307 	and.w	r3, r3, #7
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db0b      	blt.n	8002fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <__NVIC_EnableIRQ+0x38>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2001      	movs	r0, #1
 8002fba:	fa00 f202 	lsl.w	r2, r0, r2
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db10      	blt.n	8003008 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4909      	ldr	r1, [pc, #36]	; (8003014 <__NVIC_DisableIRQ+0x40>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003004:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80030d8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <__NVIC_SystemReset+0x20>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80030e4:	4903      	ldr	r1, [pc, #12]	; (80030f4 <__NVIC_SystemReset+0x20>)
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_SystemReset+0x24>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
 80030ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <__NVIC_SystemReset+0x1c>
 80030f4:	e000ed00 	.word	0xe000ed00
 80030f8:	05fa0004 	.word	0x05fa0004

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800310c:	d301      	bcc.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e00f      	b.n	8003132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <SysTick_Config+0x40>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	210f      	movs	r1, #15
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003120:	f7ff ff7a 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SysTick_Config+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <SysTick_Config+0x40>)
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fef3 	bl	8002f34 <__NVIC_SetPriorityGrouping>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003168:	f7ff ff08 	bl	8002f7c <__NVIC_GetPriorityGrouping>
 800316c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff7a 	bl	800306c <NVIC_EncodePriority>
 8003178:	4602      	mov	r2, r0
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff49 	bl	8003018 <__NVIC_SetPriority>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fefb 	bl	8002f98 <__NVIC_EnableIRQ>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff0b 	bl	8002fd4 <__NVIC_DisableIRQ>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031ca:	f7ff ff83 	bl	80030d4 <__NVIC_SystemReset>

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ff90 	bl	80030fc <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00e      	b.n	8003216 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fe ff6d 	bl	80020e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff fa06 	bl	800263c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e099      	b.n	8003370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325c:	e00f      	b.n	800327e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325e:	f7ff f9ed 	bl	800263c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b05      	cmp	r3, #5
 800326a:	d908      	bls.n	800327e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e078      	b.n	8003370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e8      	bne.n	800325e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_DMA_Init+0x158>)
 8003298:	4013      	ands	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4313      	orrs	r3, r2
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b04      	cmp	r3, #4
 8003310:	d117      	bne.n	8003342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 faef 	bl	8003908 <DMA_CheckFifoParam>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800333e:	2301      	movs	r3, #1
 8003340:	e016      	b.n	8003370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 faa6 	bl	800389c <DMA_CalcBaseAndBitshift>
 8003350:	4603      	mov	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	223f      	movs	r2, #63	; 0x3f
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	e010803f 	.word	0xe010803f

0800337c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e050      	b.n	8003430 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d101      	bne.n	800339e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e048      	b.n	8003430 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2221      	movs	r2, #33	; 0x21
 80033dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa5c 	bl	800389c <DMA_CalcBaseAndBitshift>
 80033e4:	4603      	mov	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	223f      	movs	r2, #63	; 0x3f
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_DMA_Start_IT+0x26>
 800345a:	2302      	movs	r3, #2
 800345c:	e040      	b.n	80034e0 <HAL_DMA_Start_IT+0xa8>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d12f      	bne.n	80034d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f9da 	bl	8003840 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	223f      	movs	r2, #63	; 0x3f
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0216 	orr.w	r2, r2, #22
 80034a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e005      	b.n	80034de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034de:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e00c      	b.n	8003520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2205      	movs	r2, #5
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003538:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_DMA_IRQHandler+0x258>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a92      	ldr	r2, [pc, #584]	; (8003788 <HAL_DMA_IRQHandler+0x25c>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2208      	movs	r2, #8
 8003558:	409a      	lsls	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01a      	beq.n	8003598 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2208      	movs	r2, #8
 8003586:	409a      	lsls	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2201      	movs	r2, #1
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f043 0202 	orr.w	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2204      	movs	r2, #4
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d012      	beq.n	8003604 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2204      	movs	r2, #4
 80035f2:	409a      	lsls	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f043 0204 	orr.w	r2, r3, #4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2210      	movs	r2, #16
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d043      	beq.n	800369c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d03c      	beq.n	800369c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	2210      	movs	r2, #16
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d018      	beq.n	800366e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d024      	beq.n	800369c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
 800365a:	e01f      	b.n	800369c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
 800366c:	e016      	b.n	800369c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0208 	bic.w	r2, r2, #8
 800368a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2220      	movs	r2, #32
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 808e 	beq.w	80037ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8086 	beq.w	80037ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	2220      	movs	r2, #32
 80036c4:	409a      	lsls	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d136      	bne.n	8003744 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0216 	bic.w	r2, r2, #22
 80036e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_DMA_IRQHandler+0x1da>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	223f      	movs	r2, #63	; 0x3f
 800371c:	409a      	lsls	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	2b00      	cmp	r3, #0
 8003738:	d07d      	beq.n	8003836 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
        }
        return;
 8003742:	e078      	b.n	8003836 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01c      	beq.n	800378c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	2b00      	cmp	r3, #0
 8003766:	d030      	beq.n	80037ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e02b      	b.n	80037ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d027      	beq.n	80037ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	e022      	b.n	80037ca <HAL_DMA_IRQHandler+0x29e>
 8003784:	20000000 	.word	0x20000000
 8003788:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0210 	bic.w	r2, r2, #16
 80037a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d032      	beq.n	8003838 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d022      	beq.n	8003824 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2205      	movs	r2, #5
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d307      	bcc.n	8003812 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f2      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x2ca>
 8003810:	e000      	b.n	8003814 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003812:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
 8003834:	e000      	b.n	8003838 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003836:	bf00      	nop
    }
  }
}
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop

08003840 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800385c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d108      	bne.n	8003880 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800387e:	e007      	b.n	8003890 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	3b10      	subs	r3, #16
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <DMA_CalcBaseAndBitshift+0x64>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <DMA_CalcBaseAndBitshift+0x68>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d909      	bls.n	80038de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	659a      	str	r2, [r3, #88]	; 0x58
 80038dc:	e007      	b.n	80038ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	aaaaaaab 	.word	0xaaaaaaab
 8003904:	0800b8e8 	.word	0x0800b8e8

08003908 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11f      	bne.n	8003962 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d855      	bhi.n	80039d4 <DMA_CheckFifoParam+0xcc>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <DMA_CheckFifoParam+0x28>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003941 	.word	0x08003941
 8003934:	08003953 	.word	0x08003953
 8003938:	08003941 	.word	0x08003941
 800393c:	080039d5 	.word	0x080039d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d045      	beq.n	80039d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e042      	b.n	80039d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800395a:	d13f      	bne.n	80039dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e03c      	b.n	80039dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d121      	bne.n	80039b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d836      	bhi.n	80039e0 <DMA_CheckFifoParam+0xd8>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <DMA_CheckFifoParam+0x70>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	08003989 	.word	0x08003989
 800397c:	0800398f 	.word	0x0800398f
 8003980:	08003989 	.word	0x08003989
 8003984:	080039a1 	.word	0x080039a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e02f      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d024      	beq.n	80039e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399e:	e021      	b.n	80039e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a8:	d11e      	bne.n	80039e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ae:	e01b      	b.n	80039e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <DMA_CheckFifoParam+0xb4>
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d003      	beq.n	80039c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ba:	e018      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e015      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00e      	beq.n	80039ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      break;
 80039d2:	e00b      	b.n	80039ec <DMA_CheckFifoParam+0xe4>
      break;
 80039d4:	bf00      	nop
 80039d6:	e00a      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;
 80039d8:	bf00      	nop
 80039da:	e008      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;
 80039dc:	bf00      	nop
 80039de:	e006      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;
 80039e0:	bf00      	nop
 80039e2:	e004      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;   
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <DMA_CheckFifoParam+0xe6>
      break;
 80039ec:	bf00      	nop
    }
  } 
  
  return status; 
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_FLASH_Program+0xa0>)
 8003a10:	7e1b      	ldrb	r3, [r3, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_FLASH_Program+0x1e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e03b      	b.n	8003a92 <HAL_FLASH_Program+0x96>
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_FLASH_Program+0xa0>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a24:	f000 f87c 	bl	8003b20 <FLASH_WaitForLastOperation>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d12b      	bne.n	8003a8a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a38:	783b      	ldrb	r3, [r7, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f000 f925 	bl	8003c8c <FLASH_Program_Byte>
 8003a42:	e016      	b.n	8003a72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a4a:	883b      	ldrh	r3, [r7, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68b8      	ldr	r0, [r7, #8]
 8003a50:	f000 f8f8 	bl	8003c44 <FLASH_Program_HalfWord>
 8003a54:	e00d      	b.n	8003a72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d105      	bne.n	8003a68 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	68b8      	ldr	r0, [r7, #8]
 8003a62:	f000 f8cd 	bl	8003c00 <FLASH_Program_Word>
 8003a66:	e004      	b.n	8003a72 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f000 f897 	bl	8003ba0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a76:	f000 f853 	bl	8003b20 <FLASH_WaitForLastOperation>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_FLASH_Program+0xa4>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <HAL_FLASH_Program+0xa4>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_FLASH_Program+0xa0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200003e0 	.word	0x200003e0
 8003aa0:	40023c00 	.word	0x40023c00

08003aa4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_FLASH_Unlock+0x38>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da0b      	bge.n	8003ace <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_FLASH_Unlock+0x38>)
 8003ab8:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_FLASH_Unlock+0x3c>)
 8003aba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_FLASH_Unlock+0x38>)
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_FLASH_Unlock+0x40>)
 8003ac0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_FLASH_Unlock+0x38>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da01      	bge.n	8003ace <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ace:	79fb      	ldrb	r3, [r7, #7]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40023c00 	.word	0x40023c00
 8003ae0:	45670123 	.word	0x45670123
 8003ae4:	cdef89ab 	.word	0xcdef89ab

08003ae8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_FLASH_Lock+0x1c>)
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_FLASH_Lock+0x1c>)
 8003af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_FLASH_GetError+0x14>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
}  
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	200003e0 	.word	0x200003e0

08003b20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <FLASH_WaitForLastOperation+0x78>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b32:	f7fe fd83 	bl	800263c <HAL_GetTick>
 8003b36:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b38:	e010      	b.n	8003b5c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d00c      	beq.n	8003b5c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <FLASH_WaitForLastOperation+0x38>
 8003b48:	f7fe fd78 	bl	800263c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d201      	bcs.n	8003b5c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e019      	b.n	8003b90 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <FLASH_WaitForLastOperation+0x7c>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e8      	bne.n	8003b3a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <FLASH_WaitForLastOperation+0x7c>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <FLASH_WaitForLastOperation+0x7c>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <FLASH_WaitForLastOperation+0x7c>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b86:	f000 f8a3 	bl	8003cd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
  
}  
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200003e0 	.word	0x200003e0
 8003b9c:	40023c00 	.word	0x40023c00

08003ba0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ba0:	b490      	push	{r4, r7}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <FLASH_Program_DoubleWord+0x5c>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003bd6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003bda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f04f 0400 	mov.w	r4, #0
 8003be6:	0013      	movs	r3, r2
 8003be8:	2400      	movs	r4, #0
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	3204      	adds	r2, #4
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc90      	pop	{r4, r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00

08003c00 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40023c00 	.word	0x40023c00

08003c44 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	801a      	strh	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00

08003c8c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	701a      	strb	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003cea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cee:	2210      	movs	r2, #16
 8003cf0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f043 0308 	orr.w	r3, r3, #8
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d6a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d86:	2202      	movs	r2, #2
 8003d88:	60da      	str	r2, [r3, #12]
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40023c00 	.word	0x40023c00
 8003d98:	200003e0 	.word	0x200003e0

08003d9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003db0:	7e1b      	ldrb	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_FLASHEx_Erase+0x1e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e058      	b.n	8003e6c <HAL_FLASHEx_Erase+0xd0>
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc4:	f7ff feac 	bl	8003b20 <FLASH_WaitForLastOperation>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d148      	bne.n	8003e64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dd8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d115      	bne.n	8003e0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 f844 	bl	8003e7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003df8:	f7ff fe92 	bl	8003b20 <FLASH_WaitForLastOperation>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	e028      	b.n	8003e60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	e01c      	b.n	8003e50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	68b8      	ldr	r0, [r7, #8]
 8003e20:	f000 f850 	bl	8003ec4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e28:	f7ff fe7a 	bl	8003b20 <FLASH_WaitForLastOperation>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e36:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8003e3a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	601a      	str	r2, [r3, #0]
          break;
 8003e48:	e00a      	b.n	8003e60 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4413      	add	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3da      	bcc.n	8003e16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003e60:	f000 f878 	bl	8003f54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	761a      	strb	r2, [r3, #24]

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200003e0 	.word	0x200003e0
 8003e78:	40023c00 	.word	0x40023c00

08003e7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6113      	str	r3, [r2, #16]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e010      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d103      	bne.n	8003eee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e009      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d103      	bne.n	8003efc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	490f      	ldr	r1, [pc, #60]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f20:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8003f24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6113      	str	r3, [r2, #16]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40023c00 	.word	0x40023c00

08003f54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f92:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d017      	beq.n	8003fd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003faa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fce:	6013      	str	r3, [r2, #0]
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00

08003fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e165      	b.n	80042c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	f040 8154 	bne.w	80042c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d00b      	beq.n	800403a <HAL_GPIO_Init+0x5a>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d007      	beq.n	800403a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800402e:	2b11      	cmp	r3, #17
 8004030:	d003      	beq.n	800403a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b12      	cmp	r3, #18
 8004038:	d130      	bne.n	800409c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004070:	2201      	movs	r2, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0201 	and.w	r2, r3, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0xfc>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b12      	cmp	r3, #18
 80040da:	d123      	bne.n	8004124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	08da      	lsrs	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3208      	adds	r2, #8
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80ae 	beq.w	80042c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b5c      	ldr	r3, [pc, #368]	; (80042dc <HAL_GPIO_Init+0x2fc>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	4a5b      	ldr	r2, [pc, #364]	; (80042dc <HAL_GPIO_Init+0x2fc>)
 8004170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004174:	6453      	str	r3, [r2, #68]	; 0x44
 8004176:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_GPIO_Init+0x2fc>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004182:	4a57      	ldr	r2, [pc, #348]	; (80042e0 <HAL_GPIO_Init+0x300>)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4e      	ldr	r2, [pc, #312]	; (80042e4 <HAL_GPIO_Init+0x304>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d025      	beq.n	80041fa <HAL_GPIO_Init+0x21a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4d      	ldr	r2, [pc, #308]	; (80042e8 <HAL_GPIO_Init+0x308>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <HAL_GPIO_Init+0x216>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4c      	ldr	r2, [pc, #304]	; (80042ec <HAL_GPIO_Init+0x30c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d019      	beq.n	80041f2 <HAL_GPIO_Init+0x212>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4b      	ldr	r2, [pc, #300]	; (80042f0 <HAL_GPIO_Init+0x310>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_GPIO_Init+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4a      	ldr	r2, [pc, #296]	; (80042f4 <HAL_GPIO_Init+0x314>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_GPIO_Init+0x20a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a49      	ldr	r2, [pc, #292]	; (80042f8 <HAL_GPIO_Init+0x318>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <HAL_GPIO_Init+0x206>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a48      	ldr	r2, [pc, #288]	; (80042fc <HAL_GPIO_Init+0x31c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_GPIO_Init+0x202>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00c      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e00a      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e008      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e006      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e004      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e002      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_GPIO_Init+0x21c>
 80041fa:	2300      	movs	r3, #0
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	f002 0203 	and.w	r2, r2, #3
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	4093      	lsls	r3, r2
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800420c:	4934      	ldr	r1, [pc, #208]	; (80042e0 <HAL_GPIO_Init+0x300>)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	3302      	adds	r3, #2
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <HAL_GPIO_Init+0x320>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423e:	4a30      	ldr	r2, [pc, #192]	; (8004300 <HAL_GPIO_Init+0x320>)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004244:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_GPIO_Init+0x320>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <HAL_GPIO_Init+0x320>)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_GPIO_Init+0x320>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_GPIO_Init+0x320>)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_GPIO_Init+0x320>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042bc:	4a10      	ldr	r2, [pc, #64]	; (8004300 <HAL_GPIO_Init+0x320>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	f67f ae96 	bls.w	8003ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3724      	adds	r7, #36	; 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40020400 	.word	0x40020400
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020c00 	.word	0x40020c00
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40021400 	.word	0x40021400
 80042fc:	40021800 	.word	0x40021800
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e0c7      	b.n	80044b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004320:	2201      	movs	r2, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	f040 80b7 	bne.w	80044aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800433c:	4a61      	ldr	r2, [pc, #388]	; (80044c4 <HAL_GPIO_DeInit+0x1c0>)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	3302      	adds	r3, #2
 8004344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004348:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_GPIO_DeInit+0x1c4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d025      	beq.n	80043b2 <HAL_GPIO_DeInit+0xae>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_GPIO_DeInit+0x1c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01f      	beq.n	80043ae <HAL_GPIO_DeInit+0xaa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a57      	ldr	r2, [pc, #348]	; (80044d0 <HAL_GPIO_DeInit+0x1cc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d019      	beq.n	80043aa <HAL_GPIO_DeInit+0xa6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a56      	ldr	r2, [pc, #344]	; (80044d4 <HAL_GPIO_DeInit+0x1d0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_GPIO_DeInit+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <HAL_GPIO_DeInit+0x1d4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00d      	beq.n	80043a2 <HAL_GPIO_DeInit+0x9e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a54      	ldr	r2, [pc, #336]	; (80044dc <HAL_GPIO_DeInit+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <HAL_GPIO_DeInit+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a53      	ldr	r2, [pc, #332]	; (80044e0 <HAL_GPIO_DeInit+0x1dc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_GPIO_DeInit+0x96>
 8004396:	2306      	movs	r3, #6
 8004398:	e00c      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 800439a:	2307      	movs	r3, #7
 800439c:	e00a      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 800439e:	2305      	movs	r3, #5
 80043a0:	e008      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 80043a2:	2304      	movs	r3, #4
 80043a4:	e006      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 80043a6:	2303      	movs	r3, #3
 80043a8:	e004      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e002      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_GPIO_DeInit+0xb0>
 80043b2:	2300      	movs	r3, #0
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	f002 0203 	and.w	r2, r2, #3
 80043ba:	0092      	lsls	r2, r2, #2
 80043bc:	4093      	lsls	r3, r2
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d132      	bne.n	800442a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043c4:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	4945      	ldr	r1, [pc, #276]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80043d2:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	43db      	mvns	r3, r3
 80043da:	4942      	ldr	r1, [pc, #264]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80043e0:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	493e      	ldr	r1, [pc, #248]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	493b      	ldr	r1, [pc, #236]	; (80044e4 <HAL_GPIO_DeInit+0x1e0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	220f      	movs	r2, #15
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800440c:	4a2d      	ldr	r2, [pc, #180]	; (80044c4 <HAL_GPIO_DeInit+0x1c0>)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	3302      	adds	r3, #2
 8004414:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	43da      	mvns	r2, r3
 800441c:	4829      	ldr	r0, [pc, #164]	; (80044c4 <HAL_GPIO_DeInit+0x1c0>)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	400a      	ands	r2, r1
 8004424:	3302      	adds	r3, #2
 8004426:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2103      	movs	r1, #3
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	08da      	lsrs	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3208      	adds	r2, #8
 8004448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	08d2      	lsrs	r2, r2, #3
 8004460:	4019      	ands	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3208      	adds	r2, #8
 8004466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2103      	movs	r1, #3
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	2101      	movs	r1, #1
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2103      	movs	r1, #3
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	3301      	adds	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	f67f af34 	bls.w	8004320 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40021400 	.word	0x40021400
 80044e0:	40021800 	.word	0x40021800
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004504:	e003      	b.n	800450e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	619a      	str	r2, [r3, #24]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	401a      	ands	r2, r3
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	429a      	cmp	r2, r3
 8004532:	d104      	bne.n	800453e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800453c:	e002      	b.n	8004544 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	619a      	str	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e11f      	b.n	80047a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fdf2 	bl	8002160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045b4:	f001 faee 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80045b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4a7b      	ldr	r2, [pc, #492]	; (80047ac <HAL_I2C_Init+0x25c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d807      	bhi.n	80045d4 <HAL_I2C_Init+0x84>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_I2C_Init+0x260>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bf94      	ite	ls
 80045cc:	2301      	movls	r3, #1
 80045ce:	2300      	movhi	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e006      	b.n	80045e2 <HAL_I2C_Init+0x92>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a77      	ldr	r2, [pc, #476]	; (80047b4 <HAL_I2C_Init+0x264>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	bf94      	ite	ls
 80045dc:	2301      	movls	r3, #1
 80045de:	2300      	movhi	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0db      	b.n	80047a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a72      	ldr	r2, [pc, #456]	; (80047b8 <HAL_I2C_Init+0x268>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0c9b      	lsrs	r3, r3, #18
 80045f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a64      	ldr	r2, [pc, #400]	; (80047ac <HAL_I2C_Init+0x25c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d802      	bhi.n	8004624 <HAL_I2C_Init+0xd4>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	e009      	b.n	8004638 <HAL_I2C_Init+0xe8>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_I2C_Init+0x26c>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	3301      	adds	r3, #1
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	430b      	orrs	r3, r1
 800463e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800464a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4956      	ldr	r1, [pc, #344]	; (80047ac <HAL_I2C_Init+0x25c>)
 8004654:	428b      	cmp	r3, r1
 8004656:	d80d      	bhi.n	8004674 <HAL_I2C_Init+0x124>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1e59      	subs	r1, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	fbb1 f3f3 	udiv	r3, r1, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b04      	cmp	r3, #4
 800466e:	bf38      	it	cc
 8004670:	2304      	movcc	r3, #4
 8004672:	e04f      	b.n	8004714 <HAL_I2C_Init+0x1c4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d111      	bne.n	80046a0 <HAL_I2C_Init+0x150>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e58      	subs	r0, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e012      	b.n	80046c6 <HAL_I2C_Init+0x176>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1e58      	subs	r0, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	0099      	lsls	r1, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Init+0x17e>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e022      	b.n	8004714 <HAL_I2C_Init+0x1c4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <HAL_I2C_Init+0x1a4>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1e58      	subs	r0, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	440b      	add	r3, r1
 80046e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	e00f      	b.n	8004714 <HAL_I2C_Init+0x1c4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	0099      	lsls	r1, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	fbb0 f3f3 	udiv	r3, r0, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	6809      	ldr	r1, [r1, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6911      	ldr	r1, [r2, #16]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68d2      	ldr	r2, [r2, #12]
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	430b      	orrs	r3, r1
 8004756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	000186a0 	.word	0x000186a0
 80047b0:	001e847f 	.word	0x001e847f
 80047b4:	003d08ff 	.word	0x003d08ff
 80047b8:	431bde83 	.word	0x431bde83
 80047bc:	10624dd3 	.word	0x10624dd3

080047c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047da:	f7fd ff2f 	bl	800263c <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	f040 80d9 	bne.w	80049a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	496d      	ldr	r1, [pc, #436]	; (80049ac <HAL_I2C_Mem_Write+0x1ec>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fda9 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	e0cc      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Mem_Write+0x56>
 8004812:	2302      	movs	r3, #2
 8004814:	e0c5      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d007      	beq.n	800483c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a4d      	ldr	r2, [pc, #308]	; (80049b0 <HAL_I2C_Mem_Write+0x1f0>)
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487e:	88f8      	ldrh	r0, [r7, #6]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	8979      	ldrh	r1, [r7, #10]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4603      	mov	r3, r0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fbe4 	bl	800505c <I2C_RequestMemoryWrite>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d052      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e081      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fe2a 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06b      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_I2C_Mem_Write+0x180>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1aa      	bne.n	800489e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fe16 	bl	800557e <I2C_WaitOnBTFFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e016      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00100002 	.word	0x00100002
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	460b      	mov	r3, r1
 80049c8:	813b      	strh	r3, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ce:	f7fd fe35 	bl	800263c <HAL_GetTick>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 8208 	bne.w	8004df2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2319      	movs	r3, #25
 80049e8:	2201      	movs	r2, #1
 80049ea:	497b      	ldr	r1, [pc, #492]	; (8004bd8 <HAL_I2C_Mem_Read+0x224>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fcaf 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
 80049fa:	e1fb      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x56>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e1f4      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2222      	movs	r2, #34	; 0x22
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a5b      	ldr	r2, [pc, #364]	; (8004bdc <HAL_I2C_Mem_Read+0x228>)
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a72:	88f8      	ldrh	r0, [r7, #6]
 8004a74:	893a      	ldrh	r2, [r7, #8]
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4603      	mov	r3, r0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fb7e 	bl	8005184 <I2C_RequestMemoryRead>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1b0      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d113      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e184      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d11b      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e164      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d11b      	bne.n	8004b42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	e144      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b58:	e138      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	f200 80f1 	bhi.w	8004d46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d123      	bne.n	8004bb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fd45 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e139      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb2:	e10b      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d14e      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4906      	ldr	r1, [pc, #24]	; (8004be0 <HAL_I2C_Mem_Read+0x22c>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fbc2 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e10e      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
 8004bd6:	bf00      	nop
 8004bd8:	00100002 	.word	0x00100002
 8004bdc:	ffff0000 	.word	0xffff0000
 8004be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c58:	e0b8      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	4966      	ldr	r1, [pc, #408]	; (8004dfc <HAL_I2C_Mem_Read+0x448>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb73 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0bf      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	494f      	ldr	r1, [pc, #316]	; (8004dfc <HAL_I2C_Mem_Read+0x448>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fb45 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e091      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d44:	e042      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fc58 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e04c      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d118      	bne.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f47f aec2 	bne.w	8004b5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3728      	adds	r7, #40	; 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	00010004 	.word	0x00010004

08004e00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7fd fc14 	bl	800263c <HAL_GetTick>
 8004e14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	f040 8110 	bne.w	8005048 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2319      	movs	r3, #25
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4988      	ldr	r1, [pc, #544]	; (8005054 <HAL_I2C_IsDeviceReady+0x254>)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa8c 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e103      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_I2C_IsDeviceReady+0x50>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e0fc      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d007      	beq.n	8004e76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a70      	ldr	r2, [pc, #448]	; (8005058 <HAL_I2C_IsDeviceReady+0x258>)
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa4a 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0b6      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004edc:	897b      	ldrh	r3, [r7, #10]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eea:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004eec:	f7fd fba6 	bl	800263c <HAL_GetTick>
 8004ef0:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f20:	e025      	b.n	8004f6e <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7fd fb8b 	bl	800263c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <HAL_I2C_IsDeviceReady+0x138>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	22a0      	movs	r2, #160	; 0xa0
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2ba0      	cmp	r3, #160	; 0xa0
 8004f78:	d005      	beq.n	8004f86 <HAL_I2C_IsDeviceReady+0x186>
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <HAL_I2C_IsDeviceReady+0x186>
 8004f80:	7dbb      	ldrb	r3, [r7, #22]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0cd      	beq.n	8004f22 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d129      	bne.n	8004ff0 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2319      	movs	r3, #25
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4922      	ldr	r1, [pc, #136]	; (8005054 <HAL_I2C_IsDeviceReady+0x254>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f9bf 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e036      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e02c      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005008:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2319      	movs	r3, #25
 8005010:	2201      	movs	r2, #1
 8005012:	4910      	ldr	r1, [pc, #64]	; (8005054 <HAL_I2C_IsDeviceReady+0x254>)
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f99b 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e012      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	3301      	adds	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	f4ff af33 	bcc.w	8004e9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	00100002 	.word	0x00100002
 8005058:	ffff0000 	.word	0xffff0000

0800505c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	460b      	mov	r3, r1
 8005070:	813b      	strh	r3, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2200      	movs	r2, #0
 800508e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f95c 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e05f      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	492c      	ldr	r1, [pc, #176]	; (8005180 <I2C_RequestMemoryWrite+0x124>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f995 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e04c      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	6a39      	ldr	r1, [r7, #32]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f9ff 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	2b04      	cmp	r3, #4
 800510a:	d107      	bne.n	800511c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e02b      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005126:	893b      	ldrh	r3, [r7, #8]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e021      	b.n	8005176 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005132:	893b      	ldrh	r3, [r7, #8]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	b29b      	uxth	r3, r3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d9 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e005      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	460b      	mov	r3, r1
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f8c0 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0a9      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051f0:	897b      	ldrh	r3, [r7, #10]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	4951      	ldr	r1, [pc, #324]	; (800534c <I2C_RequestMemoryRead+0x1c8>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f8f9 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e096      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f963 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e075      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	e021      	b.n	80052ae <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800526a:	893b      	ldrh	r3, [r7, #8]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b29b      	uxth	r3, r3
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	6a39      	ldr	r1, [r7, #32]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f93d 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04f      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f922 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e034      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f82a 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e013      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800531c:	897b      	ldrh	r3, [r7, #10]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	4906      	ldr	r1, [pc, #24]	; (800534c <I2C_RequestMemoryRead+0x1c8>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f863 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	00010002 	.word	0x00010002

08005350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005360:	e025      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d021      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fd f967 	bl	800263c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e023      	b.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10d      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	e00c      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d0b6      	beq.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800540c:	e051      	b.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d123      	bne.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005436:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e046      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546c:	d021      	beq.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fd f8e5 	bl	800263c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e020      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10c      	bne.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e00b      	b.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	43da      	mvns	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d18d      	bne.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005508:	e02d      	b.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f8ce 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e02d      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005520:	d021      	beq.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fd f88b 	bl	800263c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e007      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d1ca      	bne.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558a:	e02d      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f88d 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e02d      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a2:	d021      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fd f84a 	bl	800263c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e007      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d1ca      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800560c:	e042      	b.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d119      	bne.n	8005650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0210 	mvn.w	r2, #16
 8005624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e029      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fc fff4 	bl	800263c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d1b5      	bne.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d11b      	bne.n	80056fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b20      	cmp	r3, #32
 800571e:	d129      	bne.n	8005774 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0210 	bic.w	r2, r2, #16
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b20      	cmp	r3, #32
 800579a:	d12a      	bne.n	80057f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057bc:	89fb      	ldrh	r3, [r7, #14]
 80057be:	f023 030f 	bic.w	r3, r3, #15
 80057c2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	89fa      	ldrh	r2, [r7, #14]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0cc      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d90c      	bls.n	800583c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0b8      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a58      	ldr	r2, [pc, #352]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800585e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a52      	ldr	r2, [pc, #328]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005878:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	494d      	ldr	r1, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d119      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d003      	beq.n	80058be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e06f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e067      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 0203 	bic.w	r2, r3, #3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4934      	ldr	r1, [pc, #208]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058f0:	f7fc fea4 	bl	800263c <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f8:	f7fc fea0 	bl	800263c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e04f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 020c 	and.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	429a      	cmp	r2, r3
 800591e:	d1eb      	bne.n	80058f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20c      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e032      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4916      	ldr	r1, [pc, #88]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005986:	f000 f821 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 800598a:	4601      	mov	r1, r0
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	5cd3      	ldrb	r3, [r2, r3]
 800599a:	fa21 f303 	lsr.w	r3, r1, r3
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fe04 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40023c00 	.word	0x40023c00
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800b8d0 	.word	0x0800b8d0
 80059c4:	20000000 	.word	0x20000000
 80059c8:	20000004 	.word	0x20000004

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	2300      	movs	r3, #0
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d007      	beq.n	80059fe <HAL_RCC_GetSysClockFreq+0x32>
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d008      	beq.n	8005a04 <HAL_RCC_GetSysClockFreq+0x38>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80b4 	bne.w	8005b60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4b5e      	ldr	r3, [pc, #376]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059fa:	60bb      	str	r3, [r7, #8]
       break;
 80059fc:	e0b3      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059fe:	4b5e      	ldr	r3, [pc, #376]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a00:	60bb      	str	r3, [r7, #8]
      break;
 8005a02:	e0b0      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a04:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a0e:	4b58      	ldr	r3, [pc, #352]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04a      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1a:	4b55      	ldr	r3, [pc, #340]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	f04f 0400 	mov.w	r4, #0
 8005a24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	ea03 0501 	and.w	r5, r3, r1
 8005a30:	ea04 0602 	and.w	r6, r4, r2
 8005a34:	4629      	mov	r1, r5
 8005a36:	4632      	mov	r2, r6
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	0154      	lsls	r4, r2, #5
 8005a42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a46:	014b      	lsls	r3, r1, #5
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	1b49      	subs	r1, r1, r5
 8005a4e:	eb62 0206 	sbc.w	r2, r2, r6
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	0194      	lsls	r4, r2, #6
 8005a5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a60:	018b      	lsls	r3, r1, #6
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	eb64 0402 	sbc.w	r4, r4, r2
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	00e2      	lsls	r2, r4, #3
 8005a72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a76:	00d9      	lsls	r1, r3, #3
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	195b      	adds	r3, r3, r5
 8005a7e:	eb44 0406 	adc.w	r4, r4, r6
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	0262      	lsls	r2, r4, #9
 8005a8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a90:	0259      	lsls	r1, r3, #9
 8005a92:	460b      	mov	r3, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	4621      	mov	r1, r4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f7fb f862 	bl	8000b6c <__aeabi_uldivmod>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e049      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab0:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	f04f 0400 	mov.w	r4, #0
 8005aba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	ea03 0501 	and.w	r5, r3, r1
 8005ac6:	ea04 0602 	and.w	r6, r4, r2
 8005aca:	4629      	mov	r1, r5
 8005acc:	4632      	mov	r2, r6
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	f04f 0400 	mov.w	r4, #0
 8005ad6:	0154      	lsls	r4, r2, #5
 8005ad8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005adc:	014b      	lsls	r3, r1, #5
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	1b49      	subs	r1, r1, r5
 8005ae4:	eb62 0206 	sbc.w	r2, r2, r6
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f04f 0400 	mov.w	r4, #0
 8005af0:	0194      	lsls	r4, r2, #6
 8005af2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005af6:	018b      	lsls	r3, r1, #6
 8005af8:	1a5b      	subs	r3, r3, r1
 8005afa:	eb64 0402 	sbc.w	r4, r4, r2
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	00e2      	lsls	r2, r4, #3
 8005b08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b0c:	00d9      	lsls	r1, r3, #3
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	195b      	adds	r3, r3, r5
 8005b14:	eb44 0406 	adc.w	r4, r4, r6
 8005b18:	f04f 0100 	mov.w	r1, #0
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	02a2      	lsls	r2, r4, #10
 8005b22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b26:	0299      	lsls	r1, r3, #10
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	4621      	mov	r1, r4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f04f 0400 	mov.w	r4, #0
 8005b36:	461a      	mov	r2, r3
 8005b38:	4623      	mov	r3, r4
 8005b3a:	f7fb f817 	bl	8000b6c <__aeabi_uldivmod>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	3301      	adds	r3, #1
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	60bb      	str	r3, [r7, #8]
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b62:	60bb      	str	r3, [r7, #8]
      break;
 8005b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b66:	68bb      	ldr	r3, [r7, #8]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	00f42400 	.word	0x00f42400
 8005b78:	007a1200 	.word	0x007a1200

08005b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000000 	.word	0x20000000

08005b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b98:	f7ff fff0 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	0a9b      	lsrs	r3, r3, #10
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	4a03      	ldr	r2, [pc, #12]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	0800b8e0 	.word	0x0800b8e0

08005bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc0:	f7ff ffdc 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0b5b      	lsrs	r3, r3, #13
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4a03      	ldr	r2, [pc, #12]	; (8005be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd2:	5cd3      	ldrb	r3, [r2, r3]
 8005bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800b8e0 	.word	0x0800b8e0

08005be4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005bea:	f7fc fd27 	bl	800263c <HAL_GetTick>
 8005bee:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bf0:	4b5d      	ldr	r3, [pc, #372]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5c      	ldr	r2, [pc, #368]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bfe:	f7fc fd1d 	bl	800263c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0a7      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005c10:	4b55      	ldr	r3, [pc, #340]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f0      	beq.n	8005bfe <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005c1c:	4b52      	ldr	r3, [pc, #328]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a51      	ldr	r2, [pc, #324]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005c28:	f7fc fd08 	bl	800263c <HAL_GetTick>
 8005c2c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005c2e:	4b4e      	ldr	r3, [pc, #312]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c36:	f7fc fd01 	bl	800263c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e089      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005c4c:	4b46      	ldr	r3, [pc, #280]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ee      	bne.n	8005c36 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005c58:	f7fc fcf0 	bl	800263c <HAL_GetTick>
 8005c5c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8005c5e:	4b42      	ldr	r3, [pc, #264]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a41      	ldr	r2, [pc, #260]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c64:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8005c68:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fc fce6 	bl	800263c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e070      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005c7e:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005c8a:	f7fc fcd7 	bl	800263c <HAL_GetTick>
 8005c8e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c90:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fc fccd 	bl	800263c <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e057      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005cbc:	f7fc fcbe 	bl	800263c <HAL_GetTick>
 8005cc0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cd0:	f7fc fcb4 	bl	800263c <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e03e      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005ce2:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <HAL_RCC_DeInit+0x188>)
 8005cf2:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_RCC_DeInit+0x188>)
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005d06:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8005d08:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d12:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d1a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8005d1e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d2a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <HAL_RCC_DeInit+0x184>)
 8005d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d42:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_RCC_DeInit+0x18c>)
 8005d46:	4a0b      	ldr	r2, [pc, #44]	; (8005d74 <HAL_RCC_DeInit+0x190>)
 8005d48:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_RCC_DeInit+0x194>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fc fc30 	bl	80025b4 <HAL_InitTick>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	24003010 	.word	0x24003010
 8005d70:	20000000 	.word	0x20000000
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	20000004 	.word	0x20000004

08005d7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d075      	beq.n	8005e80 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d94:	4ba2      	ldr	r3, [pc, #648]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d00c      	beq.n	8005dba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da0:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d112      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dac:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db8:	d10b      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dba:	4b99      	ldr	r3, [pc, #612]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x102>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d157      	bne.n	8005e7e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e20b      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x6e>
 8005ddc:	4b90      	ldr	r3, [pc, #576]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a8f      	ldr	r2, [pc, #572]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e01d      	b.n	8005e26 <HAL_RCC_OscConfig+0xaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005df2:	d10c      	bne.n	8005e0e <HAL_RCC_OscConfig+0x92>
 8005df4:	4b8a      	ldr	r3, [pc, #552]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a89      	ldr	r2, [pc, #548]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005dfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	4b87      	ldr	r3, [pc, #540]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a86      	ldr	r2, [pc, #536]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e00b      	b.n	8005e26 <HAL_RCC_OscConfig+0xaa>
 8005e0e:	4b84      	ldr	r3, [pc, #528]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a83      	ldr	r2, [pc, #524]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b81      	ldr	r3, [pc, #516]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a80      	ldr	r2, [pc, #512]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fc fc05 	bl	800263c <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e36:	f7fc fc01 	bl	800263c <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b64      	cmp	r3, #100	; 0x64
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1d0      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e48:	4b75      	ldr	r3, [pc, #468]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0xba>
 8005e54:	e014      	b.n	8005e80 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fc fbf1 	bl	800263c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e5e:	f7fc fbed 	bl	800263c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b64      	cmp	r3, #100	; 0x64
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e1bc      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f0      	bne.n	8005e5e <HAL_RCC_OscConfig+0xe2>
 8005e7c:	e000      	b.n	8005e80 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d063      	beq.n	8005f54 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e8c:	4b64      	ldr	r3, [pc, #400]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 030c 	and.w	r3, r3, #12
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e98:	4b61      	ldr	r3, [pc, #388]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d11c      	bne.n	8005ede <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea4:	4b5e      	ldr	r3, [pc, #376]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d116      	bne.n	8005ede <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb0:	4b5b      	ldr	r3, [pc, #364]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x14c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e190      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec8:	4b55      	ldr	r3, [pc, #340]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	4952      	ldr	r1, [pc, #328]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005edc:	e03a      	b.n	8005f54 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee6:	4b4f      	ldr	r3, [pc, #316]	; (8006024 <HAL_RCC_OscConfig+0x2a8>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eec:	f7fc fba6 	bl	800263c <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef4:	f7fc fba2 	bl	800263c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e171      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	493f      	ldr	r1, [pc, #252]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]
 8005f26:	e015      	b.n	8005f54 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <HAL_RCC_OscConfig+0x2a8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f7fc fb85 	bl	800263c <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fc fb81 	bl	800263c <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f48:	4b35      	ldr	r3, [pc, #212]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d030      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f68:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6e:	f7fc fb65 	bl	800263c <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f76:	f7fc fb61 	bl	800263c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e130      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1fa>
 8005f94:	e015      	b.n	8005fc2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fc fb4e 	bl	800263c <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa4:	f7fc fb4a 	bl	800263c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e119      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 809f 	beq.w	800610e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10f      	bne.n	8006000 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fee:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <HAL_RCC_OscConfig+0x2a4>)
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <HAL_RCC_OscConfig+0x2b0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d120      	bne.n	800604e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <HAL_RCC_OscConfig+0x2b0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a06      	ldr	r2, [pc, #24]	; (800602c <HAL_RCC_OscConfig+0x2b0>)
 8006012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006018:	f7fc fb10 	bl	800263c <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	e010      	b.n	8006042 <HAL_RCC_OscConfig+0x2c6>
 8006020:	40023800 	.word	0x40023800
 8006024:	42470000 	.word	0x42470000
 8006028:	42470e80 	.word	0x42470e80
 800602c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006030:	f7fc fb04 	bl	800263c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e0d3      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006042:	4b6c      	ldr	r3, [pc, #432]	; (80061f4 <HAL_RCC_OscConfig+0x478>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d106      	bne.n	8006064 <HAL_RCC_OscConfig+0x2e8>
 8006056:	4b68      	ldr	r3, [pc, #416]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4a67      	ldr	r2, [pc, #412]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6713      	str	r3, [r2, #112]	; 0x70
 8006062:	e01c      	b.n	800609e <HAL_RCC_OscConfig+0x322>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b05      	cmp	r3, #5
 800606a:	d10c      	bne.n	8006086 <HAL_RCC_OscConfig+0x30a>
 800606c:	4b62      	ldr	r3, [pc, #392]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a61      	ldr	r2, [pc, #388]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006072:	f043 0304 	orr.w	r3, r3, #4
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	4b5f      	ldr	r3, [pc, #380]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a5e      	ldr	r2, [pc, #376]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
 8006084:	e00b      	b.n	800609e <HAL_RCC_OscConfig+0x322>
 8006086:	4b5c      	ldr	r3, [pc, #368]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	4a5b      	ldr	r2, [pc, #364]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	6713      	str	r3, [r2, #112]	; 0x70
 8006092:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	4a58      	ldr	r2, [pc, #352]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d015      	beq.n	80060d2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a6:	f7fc fac9 	bl	800263c <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ac:	e00a      	b.n	80060c4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fc fac5 	bl	800263c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e092      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c4:	4b4c      	ldr	r3, [pc, #304]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ee      	beq.n	80060ae <HAL_RCC_OscConfig+0x332>
 80060d0:	e014      	b.n	80060fc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fc fab3 	bl	800263c <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fc faaf 	bl	800263c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e07c      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f0:	4b41      	ldr	r3, [pc, #260]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ee      	bne.n	80060da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006102:	4b3d      	ldr	r3, [pc, #244]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	4a3c      	ldr	r2, [pc, #240]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d068      	beq.n	80061e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006116:	4b38      	ldr	r3, [pc, #224]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b08      	cmp	r3, #8
 8006120:	d060      	beq.n	80061e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d145      	bne.n	80061b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <HAL_RCC_OscConfig+0x480>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc fa84 	bl	800263c <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006138:	f7fc fa80 	bl	800263c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e04f      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	071b      	lsls	r3, r3, #28
 8006182:	491d      	ldr	r1, [pc, #116]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <HAL_RCC_OscConfig+0x480>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fc fa55 	bl	800263c <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006196:	f7fc fa51 	bl	800263c <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e020      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x41a>
 80061b4:	e018      	b.n	80061e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b6:	4b11      	ldr	r3, [pc, #68]	; (80061fc <HAL_RCC_OscConfig+0x480>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fc fa3e 	bl	800263c <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc fa3a 	bl	800263c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e009      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HAL_RCC_OscConfig+0x47c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x448>
 80061e2:	e001      	b.n	80061e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40007000 	.word	0x40007000
 80061f8:	40023800 	.word	0x40023800
 80061fc:	42470060 	.word	0x42470060

08006200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e03f      	b.n	8006292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fc f812 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc77 	bl	8006b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af02      	add	r7, sp, #8
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	f040 8083 	bne.w	80063c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_UART_Transmit+0x2e>
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e07b      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_UART_Transmit+0x40>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e074      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	; 0x21
 80062ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062f0:	f7fc f9a4 	bl	800263c <HAL_GetTick>
 80062f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800630a:	e042      	b.n	8006392 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d122      	bne.n	800636a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa80 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e042      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	3302      	adds	r3, #2
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	e017      	b.n	8006392 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3301      	adds	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	e013      	b.n	8006392 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa5d 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01f      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1b7      	bne.n	800630c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa44 	bl	8006834 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e006      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d166      	bne.n	80064b4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_UART_Receive_DMA+0x26>
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e05f      	b.n	80064b6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Receive_DMA+0x38>
 8006400:	2302      	movs	r3, #2
 8006402:	e058      	b.n	80064b6 <HAL_UART_Receive_DMA+0xea>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2222      	movs	r2, #34	; 0x22
 8006422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <HAL_UART_Receive_DMA+0xf4>)
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006432:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <HAL_UART_Receive_DMA+0xf8>)
 8006434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	4a23      	ldr	r2, [pc, #140]	; (80064c8 <HAL_UART_Receive_DMA+0xfc>)
 800643c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	2200      	movs	r2, #0
 8006444:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	f7fc ffeb 	bl	8003438 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800648e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	0800671d 	.word	0x0800671d
 80064c4:	08006785 	.word	0x08006785
 80064c8:	080067a1 	.word	0x080067a1

080064cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_UART_IRQHandler+0x52>
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa8c 	bl	8006a34 <UART_Receive_IT>
      return;
 800651c:	e0d1      	b.n	80066c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80b0 	beq.w	8006686 <HAL_UART_IRQHandler+0x1ba>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <HAL_UART_IRQHandler+0x70>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80a5 	beq.w	8006686 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_UART_IRQHandler+0x90>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <HAL_UART_IRQHandler+0xb0>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	f043 0202 	orr.w	r2, r3, #2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_UART_IRQHandler+0xd0>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	f043 0204 	orr.w	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00f      	beq.n	80065c6 <HAL_UART_IRQHandler+0xfa>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <HAL_UART_IRQHandler+0xee>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	f043 0208 	orr.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d078      	beq.n	80066c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_UART_IRQHandler+0x11c>
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa26 	bl	8006a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <HAL_UART_IRQHandler+0x144>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d031      	beq.n	8006674 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f96f 	bl	80068f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d123      	bne.n	800666c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006632:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	4a21      	ldr	r2, [pc, #132]	; (80066c8 <HAL_UART_IRQHandler+0x1fc>)
 8006642:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	4618      	mov	r0, r3
 800664a:	f7fc ff4d 	bl	80034e8 <HAL_DMA_Abort_IT>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800665e:	4610      	mov	r0, r2
 8006660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006662:	e00e      	b.n	8006682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f84f 	bl	8006708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666a:	e00a      	b.n	8006682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f84b 	bl	8006708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006672:	e006      	b.n	8006682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f847 	bl	8006708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006680:	e01e      	b.n	80066c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006682:	bf00      	nop
    return;
 8006684:	e01c      	b.n	80066c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1d6>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f95c 	bl	8006958 <UART_Transmit_IT>
    return;
 80066a0:	e00f      	b.n	80066c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1f6>
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f9a4 	bl	8006a04 <UART_EndTransmit_IT>
    return;
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80066c0:	bf00      	nop
  }
}
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	08006931 	.word	0x08006931

080066cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11e      	bne.n	8006776 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695a      	ldr	r2, [r3, #20]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff ffb2 	bl	80066e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ffae 	bl	80066f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	bf0c      	ite	eq
 80067c0:	2301      	moveq	r3, #1
 80067c2:	2300      	movne	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b21      	cmp	r3, #33	; 0x21
 80067d2:	d108      	bne.n	80067e6 <UART_DMAError+0x46>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80067e0:	68b8      	ldr	r0, [r7, #8]
 80067e2:	f000 f871 	bl	80068c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b22      	cmp	r3, #34	; 0x22
 8006806:	d108      	bne.n	800681a <UART_DMAError+0x7a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2200      	movs	r2, #0
 8006812:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006814:	68b8      	ldr	r0, [r7, #8]
 8006816:	f000 f86d 	bl	80068f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	f043 0210 	orr.w	r2, r3, #16
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	f7ff ff6e 	bl	8006708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006844:	e02c      	b.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d028      	beq.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x30>
 8006854:	f7fb fef2 	bl	800263c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	429a      	cmp	r2, r3
 8006862:	d21d      	bcs.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006872:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695a      	ldr	r2, [r3, #20]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e00f      	b.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d0c3      	beq.n	8006846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800690a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fedc 	bl	8006708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b21      	cmp	r3, #33	; 0x21
 800696a:	d144      	bne.n	80069f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006974:	d11a      	bne.n	80069ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	1c9a      	adds	r2, r3, #2
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	621a      	str	r2, [r3, #32]
 800699e:	e00e      	b.n	80069be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	621a      	str	r2, [r3, #32]
 80069aa:	e008      	b.n	80069be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6211      	str	r1, [r2, #32]
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4619      	mov	r1, r3
 80069cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10f      	bne.n	80069f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fe51 	bl	80066cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b22      	cmp	r3, #34	; 0x22
 8006a46:	d171      	bne.n	8006b2c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a50:	d123      	bne.n	8006a9a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10e      	bne.n	8006a7e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a7c:	e029      	b.n	8006ad2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	629a      	str	r2, [r3, #40]	; 0x28
 8006a98:	e01b      	b.n	8006ad2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6858      	ldr	r0, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6291      	str	r1, [r2, #40]	; 0x28
 8006ab2:	b2c2      	uxtb	r2, r0
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e00c      	b.n	8006ad2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	1c58      	adds	r0, r3, #1
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	6288      	str	r0, [r1, #40]	; 0x28
 8006aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d120      	bne.n	8006b28 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0220 	bic.w	r2, r2, #32
 8006af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695a      	ldr	r2, [r3, #20]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0201 	bic.w	r2, r2, #1
 8006b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fdde 	bl	80066e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e002      	b.n	8006b2e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b7a:	f023 030c 	bic.w	r3, r3, #12
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	430b      	orrs	r3, r1
 8006b86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba6:	f040 8199 	bne.w	8006edc <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4ac6      	ldr	r2, [pc, #792]	; (8006ec8 <UART_SetConfig+0x390>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00f      	beq.n	8006bd4 <UART_SetConfig+0x9c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4ac4      	ldr	r2, [pc, #784]	; (8006ecc <UART_SetConfig+0x394>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00a      	beq.n	8006bd4 <UART_SetConfig+0x9c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4ac3      	ldr	r2, [pc, #780]	; (8006ed0 <UART_SetConfig+0x398>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d005      	beq.n	8006bd4 <UART_SetConfig+0x9c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4ac1      	ldr	r2, [pc, #772]	; (8006ed4 <UART_SetConfig+0x39c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f040 80bd 	bne.w	8006d4e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd4:	f7fe fff2 	bl	8005bbc <HAL_RCC_GetPCLK2Freq>
 8006bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	461d      	mov	r5, r3
 8006bde:	f04f 0600 	mov.w	r6, #0
 8006be2:	46a8      	mov	r8, r5
 8006be4:	46b1      	mov	r9, r6
 8006be6:	eb18 0308 	adds.w	r3, r8, r8
 8006bea:	eb49 0409 	adc.w	r4, r9, r9
 8006bee:	4698      	mov	r8, r3
 8006bf0:	46a1      	mov	r9, r4
 8006bf2:	eb18 0805 	adds.w	r8, r8, r5
 8006bf6:	eb49 0906 	adc.w	r9, r9, r6
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c0e:	4688      	mov	r8, r1
 8006c10:	4691      	mov	r9, r2
 8006c12:	eb18 0005 	adds.w	r0, r8, r5
 8006c16:	eb49 0106 	adc.w	r1, r9, r6
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	461d      	mov	r5, r3
 8006c20:	f04f 0600 	mov.w	r6, #0
 8006c24:	196b      	adds	r3, r5, r5
 8006c26:	eb46 0406 	adc.w	r4, r6, r6
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4623      	mov	r3, r4
 8006c2e:	f7f9 ff9d 	bl	8000b6c <__aeabi_uldivmod>
 8006c32:	4603      	mov	r3, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	461a      	mov	r2, r3
 8006c38:	4ba7      	ldr	r3, [pc, #668]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	461d      	mov	r5, r3
 8006c48:	f04f 0600 	mov.w	r6, #0
 8006c4c:	46a9      	mov	r9, r5
 8006c4e:	46b2      	mov	sl, r6
 8006c50:	eb19 0309 	adds.w	r3, r9, r9
 8006c54:	eb4a 040a 	adc.w	r4, sl, sl
 8006c58:	4699      	mov	r9, r3
 8006c5a:	46a2      	mov	sl, r4
 8006c5c:	eb19 0905 	adds.w	r9, r9, r5
 8006c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c78:	4689      	mov	r9, r1
 8006c7a:	4692      	mov	sl, r2
 8006c7c:	eb19 0005 	adds.w	r0, r9, r5
 8006c80:	eb4a 0106 	adc.w	r1, sl, r6
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	461d      	mov	r5, r3
 8006c8a:	f04f 0600 	mov.w	r6, #0
 8006c8e:	196b      	adds	r3, r5, r5
 8006c90:	eb46 0406 	adc.w	r4, r6, r6
 8006c94:	461a      	mov	r2, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	f7f9 ff68 	bl	8000b6c <__aeabi_uldivmod>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b8d      	ldr	r3, [pc, #564]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2164      	movs	r1, #100	; 0x64
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	3332      	adds	r3, #50	; 0x32
 8006cb6:	4a88      	ldr	r2, [pc, #544]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cc4:	4498      	add	r8, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	461d      	mov	r5, r3
 8006cca:	f04f 0600 	mov.w	r6, #0
 8006cce:	46a9      	mov	r9, r5
 8006cd0:	46b2      	mov	sl, r6
 8006cd2:	eb19 0309 	adds.w	r3, r9, r9
 8006cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8006cda:	4699      	mov	r9, r3
 8006cdc:	46a2      	mov	sl, r4
 8006cde:	eb19 0905 	adds.w	r9, r9, r5
 8006ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cfa:	4689      	mov	r9, r1
 8006cfc:	4692      	mov	sl, r2
 8006cfe:	eb19 0005 	adds.w	r0, r9, r5
 8006d02:	eb4a 0106 	adc.w	r1, sl, r6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	f04f 0600 	mov.w	r6, #0
 8006d10:	196b      	adds	r3, r5, r5
 8006d12:	eb46 0406 	adc.w	r4, r6, r6
 8006d16:	461a      	mov	r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	f7f9 ff27 	bl	8000b6c <__aeabi_uldivmod>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b6c      	ldr	r3, [pc, #432]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006d26:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2164      	movs	r1, #100	; 0x64
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	3332      	adds	r3, #50	; 0x32
 8006d38:	4a67      	ldr	r2, [pc, #412]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	f003 0207 	and.w	r2, r3, #7
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4442      	add	r2, r8
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	e27d      	b.n	800724a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7fe ff21 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8006d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	461d      	mov	r5, r3
 8006d58:	f04f 0600 	mov.w	r6, #0
 8006d5c:	46a8      	mov	r8, r5
 8006d5e:	46b1      	mov	r9, r6
 8006d60:	eb18 0308 	adds.w	r3, r8, r8
 8006d64:	eb49 0409 	adc.w	r4, r9, r9
 8006d68:	4698      	mov	r8, r3
 8006d6a:	46a1      	mov	r9, r4
 8006d6c:	eb18 0805 	adds.w	r8, r8, r5
 8006d70:	eb49 0906 	adc.w	r9, r9, r6
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d88:	4688      	mov	r8, r1
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	eb18 0005 	adds.w	r0, r8, r5
 8006d90:	eb49 0106 	adc.w	r1, r9, r6
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	461d      	mov	r5, r3
 8006d9a:	f04f 0600 	mov.w	r6, #0
 8006d9e:	196b      	adds	r3, r5, r5
 8006da0:	eb46 0406 	adc.w	r4, r6, r6
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	f7f9 fee0 	bl	8000b6c <__aeabi_uldivmod>
 8006dac:	4603      	mov	r3, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006db4:	fba3 2302 	umull	r2, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	f04f 0600 	mov.w	r6, #0
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	46b2      	mov	sl, r6
 8006dca:	eb19 0309 	adds.w	r3, r9, r9
 8006dce:	eb4a 040a 	adc.w	r4, sl, sl
 8006dd2:	4699      	mov	r9, r3
 8006dd4:	46a2      	mov	sl, r4
 8006dd6:	eb19 0905 	adds.w	r9, r9, r5
 8006dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006df2:	4689      	mov	r9, r1
 8006df4:	4692      	mov	sl, r2
 8006df6:	eb19 0005 	adds.w	r0, r9, r5
 8006dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	461d      	mov	r5, r3
 8006e04:	f04f 0600 	mov.w	r6, #0
 8006e08:	196b      	adds	r3, r5, r5
 8006e0a:	eb46 0406 	adc.w	r4, r6, r6
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4623      	mov	r3, r4
 8006e12:	f7f9 feab 	bl	8000b6c <__aeabi_uldivmod>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	2164      	movs	r1, #100	; 0x64
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	3332      	adds	r3, #50	; 0x32
 8006e30:	4a29      	ldr	r2, [pc, #164]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e3e:	4498      	add	r8, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	461d      	mov	r5, r3
 8006e44:	f04f 0600 	mov.w	r6, #0
 8006e48:	46a9      	mov	r9, r5
 8006e4a:	46b2      	mov	sl, r6
 8006e4c:	eb19 0309 	adds.w	r3, r9, r9
 8006e50:	eb4a 040a 	adc.w	r4, sl, sl
 8006e54:	4699      	mov	r9, r3
 8006e56:	46a2      	mov	sl, r4
 8006e58:	eb19 0905 	adds.w	r9, r9, r5
 8006e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e60:	f04f 0100 	mov.w	r1, #0
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e74:	4689      	mov	r9, r1
 8006e76:	4692      	mov	sl, r2
 8006e78:	eb19 0005 	adds.w	r0, r9, r5
 8006e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	461d      	mov	r5, r3
 8006e86:	f04f 0600 	mov.w	r6, #0
 8006e8a:	196b      	adds	r3, r5, r5
 8006e8c:	eb46 0406 	adc.w	r4, r6, r6
 8006e90:	461a      	mov	r2, r3
 8006e92:	4623      	mov	r3, r4
 8006e94:	f7f9 fe6a 	bl	8000b6c <__aeabi_uldivmod>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <UART_SetConfig+0x3a0>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4442      	add	r2, r8
 8006ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ec6:	e1c0      	b.n	800724a <UART_SetConfig+0x712>
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	40011800 	.word	0x40011800
 8006ed4:	40011c00 	.word	0x40011c00
 8006ed8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4adc      	ldr	r2, [pc, #880]	; (8007254 <UART_SetConfig+0x71c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00f      	beq.n	8006f06 <UART_SetConfig+0x3ce>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4adb      	ldr	r2, [pc, #876]	; (8007258 <UART_SetConfig+0x720>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00a      	beq.n	8006f06 <UART_SetConfig+0x3ce>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4ad9      	ldr	r2, [pc, #868]	; (800725c <UART_SetConfig+0x724>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d005      	beq.n	8006f06 <UART_SetConfig+0x3ce>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4ad8      	ldr	r2, [pc, #864]	; (8007260 <UART_SetConfig+0x728>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	f040 80d1 	bne.w	80070a8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f06:	f7fe fe59 	bl	8005bbc <HAL_RCC_GetPCLK2Freq>
 8006f0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	469a      	mov	sl, r3
 8006f10:	f04f 0b00 	mov.w	fp, #0
 8006f14:	46d0      	mov	r8, sl
 8006f16:	46d9      	mov	r9, fp
 8006f18:	eb18 0308 	adds.w	r3, r8, r8
 8006f1c:	eb49 0409 	adc.w	r4, r9, r9
 8006f20:	4698      	mov	r8, r3
 8006f22:	46a1      	mov	r9, r4
 8006f24:	eb18 080a 	adds.w	r8, r8, sl
 8006f28:	eb49 090b 	adc.w	r9, r9, fp
 8006f2c:	f04f 0100 	mov.w	r1, #0
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f40:	4688      	mov	r8, r1
 8006f42:	4691      	mov	r9, r2
 8006f44:	eb1a 0508 	adds.w	r5, sl, r8
 8006f48:	eb4b 0609 	adc.w	r6, fp, r9
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4619      	mov	r1, r3
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	0094      	lsls	r4, r2, #2
 8006f60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f64:	008b      	lsls	r3, r1, #2
 8006f66:	461a      	mov	r2, r3
 8006f68:	4623      	mov	r3, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	f7f9 fdfd 	bl	8000b6c <__aeabi_uldivmod>
 8006f72:	4603      	mov	r3, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	461a      	mov	r2, r3
 8006f78:	4bba      	ldr	r3, [pc, #744]	; (8007264 <UART_SetConfig+0x72c>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	469b      	mov	fp, r3
 8006f88:	f04f 0c00 	mov.w	ip, #0
 8006f8c:	46d9      	mov	r9, fp
 8006f8e:	46e2      	mov	sl, ip
 8006f90:	eb19 0309 	adds.w	r3, r9, r9
 8006f94:	eb4a 040a 	adc.w	r4, sl, sl
 8006f98:	4699      	mov	r9, r3
 8006f9a:	46a2      	mov	sl, r4
 8006f9c:	eb19 090b 	adds.w	r9, r9, fp
 8006fa0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fb8:	4689      	mov	r9, r1
 8006fba:	4692      	mov	sl, r2
 8006fbc:	eb1b 0509 	adds.w	r5, fp, r9
 8006fc0:	eb4c 060a 	adc.w	r6, ip, sl
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	f04f 0400 	mov.w	r4, #0
 8006fd6:	0094      	lsls	r4, r2, #2
 8006fd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fdc:	008b      	lsls	r3, r1, #2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	f7f9 fdc1 	bl	8000b6c <__aeabi_uldivmod>
 8006fea:	4603      	mov	r3, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4b9c      	ldr	r3, [pc, #624]	; (8007264 <UART_SetConfig+0x72c>)
 8006ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	2164      	movs	r1, #100	; 0x64
 8006ffa:	fb01 f303 	mul.w	r3, r1, r3
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	3332      	adds	r3, #50	; 0x32
 8007004:	4a97      	ldr	r2, [pc, #604]	; (8007264 <UART_SetConfig+0x72c>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007010:	4498      	add	r8, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	469b      	mov	fp, r3
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	46d9      	mov	r9, fp
 800701c:	46e2      	mov	sl, ip
 800701e:	eb19 0309 	adds.w	r3, r9, r9
 8007022:	eb4a 040a 	adc.w	r4, sl, sl
 8007026:	4699      	mov	r9, r3
 8007028:	46a2      	mov	sl, r4
 800702a:	eb19 090b 	adds.w	r9, r9, fp
 800702e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800703e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007042:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007046:	4689      	mov	r9, r1
 8007048:	4692      	mov	sl, r2
 800704a:	eb1b 0509 	adds.w	r5, fp, r9
 800704e:	eb4c 060a 	adc.w	r6, ip, sl
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	0094      	lsls	r4, r2, #2
 8007066:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800706a:	008b      	lsls	r3, r1, #2
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	4628      	mov	r0, r5
 8007072:	4631      	mov	r1, r6
 8007074:	f7f9 fd7a 	bl	8000b6c <__aeabi_uldivmod>
 8007078:	4603      	mov	r3, r0
 800707a:	460c      	mov	r4, r1
 800707c:	461a      	mov	r2, r3
 800707e:	4b79      	ldr	r3, [pc, #484]	; (8007264 <UART_SetConfig+0x72c>)
 8007080:	fba3 1302 	umull	r1, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	2164      	movs	r1, #100	; 0x64
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	3332      	adds	r3, #50	; 0x32
 8007092:	4a74      	ldr	r2, [pc, #464]	; (8007264 <UART_SetConfig+0x72c>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	f003 020f 	and.w	r2, r3, #15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4442      	add	r2, r8
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	e0d0      	b.n	800724a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fe fd74 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80070ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	469a      	mov	sl, r3
 80070b2:	f04f 0b00 	mov.w	fp, #0
 80070b6:	46d0      	mov	r8, sl
 80070b8:	46d9      	mov	r9, fp
 80070ba:	eb18 0308 	adds.w	r3, r8, r8
 80070be:	eb49 0409 	adc.w	r4, r9, r9
 80070c2:	4698      	mov	r8, r3
 80070c4:	46a1      	mov	r9, r4
 80070c6:	eb18 080a 	adds.w	r8, r8, sl
 80070ca:	eb49 090b 	adc.w	r9, r9, fp
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070e2:	4688      	mov	r8, r1
 80070e4:	4691      	mov	r9, r2
 80070e6:	eb1a 0508 	adds.w	r5, sl, r8
 80070ea:	eb4b 0609 	adc.w	r6, fp, r9
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	f04f 0400 	mov.w	r4, #0
 8007100:	0094      	lsls	r4, r2, #2
 8007102:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007106:	008b      	lsls	r3, r1, #2
 8007108:	461a      	mov	r2, r3
 800710a:	4623      	mov	r3, r4
 800710c:	4628      	mov	r0, r5
 800710e:	4631      	mov	r1, r6
 8007110:	f7f9 fd2c 	bl	8000b6c <__aeabi_uldivmod>
 8007114:	4603      	mov	r3, r0
 8007116:	460c      	mov	r4, r1
 8007118:	461a      	mov	r2, r3
 800711a:	4b52      	ldr	r3, [pc, #328]	; (8007264 <UART_SetConfig+0x72c>)
 800711c:	fba3 2302 	umull	r2, r3, r3, r2
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	469b      	mov	fp, r3
 800712a:	f04f 0c00 	mov.w	ip, #0
 800712e:	46d9      	mov	r9, fp
 8007130:	46e2      	mov	sl, ip
 8007132:	eb19 0309 	adds.w	r3, r9, r9
 8007136:	eb4a 040a 	adc.w	r4, sl, sl
 800713a:	4699      	mov	r9, r3
 800713c:	46a2      	mov	sl, r4
 800713e:	eb19 090b 	adds.w	r9, r9, fp
 8007142:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007152:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007156:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800715a:	4689      	mov	r9, r1
 800715c:	4692      	mov	sl, r2
 800715e:	eb1b 0509 	adds.w	r5, fp, r9
 8007162:	eb4c 060a 	adc.w	r6, ip, sl
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	f04f 0400 	mov.w	r4, #0
 8007178:	0094      	lsls	r4, r2, #2
 800717a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800717e:	008b      	lsls	r3, r1, #2
 8007180:	461a      	mov	r2, r3
 8007182:	4623      	mov	r3, r4
 8007184:	4628      	mov	r0, r5
 8007186:	4631      	mov	r1, r6
 8007188:	f7f9 fcf0 	bl	8000b6c <__aeabi_uldivmod>
 800718c:	4603      	mov	r3, r0
 800718e:	460c      	mov	r4, r1
 8007190:	461a      	mov	r2, r3
 8007192:	4b34      	ldr	r3, [pc, #208]	; (8007264 <UART_SetConfig+0x72c>)
 8007194:	fba3 1302 	umull	r1, r3, r3, r2
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	2164      	movs	r1, #100	; 0x64
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	3332      	adds	r3, #50	; 0x32
 80071a6:	4a2f      	ldr	r2, [pc, #188]	; (8007264 <UART_SetConfig+0x72c>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b2:	4498      	add	r8, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	469b      	mov	fp, r3
 80071b8:	f04f 0c00 	mov.w	ip, #0
 80071bc:	46d9      	mov	r9, fp
 80071be:	46e2      	mov	sl, ip
 80071c0:	eb19 0309 	adds.w	r3, r9, r9
 80071c4:	eb4a 040a 	adc.w	r4, sl, sl
 80071c8:	4699      	mov	r9, r3
 80071ca:	46a2      	mov	sl, r4
 80071cc:	eb19 090b 	adds.w	r9, r9, fp
 80071d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e8:	4689      	mov	r9, r1
 80071ea:	4692      	mov	sl, r2
 80071ec:	eb1b 0509 	adds.w	r5, fp, r9
 80071f0:	eb4c 060a 	adc.w	r6, ip, sl
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	f04f 0400 	mov.w	r4, #0
 8007206:	0094      	lsls	r4, r2, #2
 8007208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800720c:	008b      	lsls	r3, r1, #2
 800720e:	461a      	mov	r2, r3
 8007210:	4623      	mov	r3, r4
 8007212:	4628      	mov	r0, r5
 8007214:	4631      	mov	r1, r6
 8007216:	f7f9 fca9 	bl	8000b6c <__aeabi_uldivmod>
 800721a:	4603      	mov	r3, r0
 800721c:	460c      	mov	r4, r1
 800721e:	461a      	mov	r2, r3
 8007220:	4b10      	ldr	r3, [pc, #64]	; (8007264 <UART_SetConfig+0x72c>)
 8007222:	fba3 1302 	umull	r1, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	2164      	movs	r1, #100	; 0x64
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	3332      	adds	r3, #50	; 0x32
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <UART_SetConfig+0x72c>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4442      	add	r2, r8
 8007246:	609a      	str	r2, [r3, #8]
}
 8007248:	e7ff      	b.n	800724a <UART_SetConfig+0x712>
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	40011000 	.word	0x40011000
 8007258:	40011400 	.word	0x40011400
 800725c:	40011800 	.word	0x40011800
 8007260:	40011c00 	.word	0x40011c00
 8007264:	51eb851f 	.word	0x51eb851f

08007268 <SIMCOM_USART_IrqHandler>:
/* Private functions implementation -------------------------------------------*/
static void SIMCOM_Check_Buffer(void);
static void SIMCOM_Fill_Buffer(const void *data, size_t len);

/* Public functions implementation ---------------------------------------------*/
void SIMCOM_USART_IrqHandler(void) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
    /* if Idle flag is set */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <SIMCOM_USART_IrqHandler+0x38>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d10c      	bne.n	8007296 <SIMCOM_USART_IrqHandler+0x2e>
        /* Clear idle flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800727c:	2300      	movs	r3, #0
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <SIMCOM_USART_IrqHandler+0x38>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <SIMCOM_USART_IrqHandler+0x38>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	687b      	ldr	r3, [r7, #4]

        SIMCOM_Check_Buffer();
 8007292:	f001 f923 	bl	80084dc <SIMCOM_Check_Buffer>
    }
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000374 	.word	0x20000374

080072a4 <SIMCOM_DMA_IrqHandler>:

void SIMCOM_DMA_IrqHandler(void) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
    // if the source is HT
    if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_HT)) {
 80072a8:	4b9a      	ldr	r3, [pc, #616]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 81bc 	beq.w	8007630 <SIMCOM_DMA_IrqHandler+0x38c>
        /* Clear HT flag */
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_HT_FLAG_INDEX(&hdma_usart1_rx));
 80072b8:	4b96      	ldr	r3, [pc, #600]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	4b96      	ldr	r3, [pc, #600]	; (8007518 <SIMCOM_DMA_IrqHandler+0x274>)
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d960      	bls.n	8007386 <SIMCOM_DMA_IrqHandler+0xe2>
 80072c4:	4b93      	ldr	r3, [pc, #588]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a94      	ldr	r2, [pc, #592]	; (800751c <SIMCOM_DMA_IrqHandler+0x278>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d057      	beq.n	800737e <SIMCOM_DMA_IrqHandler+0xda>
 80072ce:	4b91      	ldr	r3, [pc, #580]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a93      	ldr	r2, [pc, #588]	; (8007520 <SIMCOM_DMA_IrqHandler+0x27c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d050      	beq.n	800737a <SIMCOM_DMA_IrqHandler+0xd6>
 80072d8:	4b8e      	ldr	r3, [pc, #568]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a91      	ldr	r2, [pc, #580]	; (8007524 <SIMCOM_DMA_IrqHandler+0x280>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d049      	beq.n	8007376 <SIMCOM_DMA_IrqHandler+0xd2>
 80072e2:	4b8c      	ldr	r3, [pc, #560]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a90      	ldr	r2, [pc, #576]	; (8007528 <SIMCOM_DMA_IrqHandler+0x284>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d042      	beq.n	8007372 <SIMCOM_DMA_IrqHandler+0xce>
 80072ec:	4b89      	ldr	r3, [pc, #548]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a8e      	ldr	r2, [pc, #568]	; (800752c <SIMCOM_DMA_IrqHandler+0x288>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d03a      	beq.n	800736c <SIMCOM_DMA_IrqHandler+0xc8>
 80072f6:	4b87      	ldr	r3, [pc, #540]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a8d      	ldr	r2, [pc, #564]	; (8007530 <SIMCOM_DMA_IrqHandler+0x28c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d032      	beq.n	8007366 <SIMCOM_DMA_IrqHandler+0xc2>
 8007300:	4b84      	ldr	r3, [pc, #528]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a8b      	ldr	r2, [pc, #556]	; (8007534 <SIMCOM_DMA_IrqHandler+0x290>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d02a      	beq.n	8007360 <SIMCOM_DMA_IrqHandler+0xbc>
 800730a:	4b82      	ldr	r3, [pc, #520]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a8a      	ldr	r2, [pc, #552]	; (8007538 <SIMCOM_DMA_IrqHandler+0x294>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d022      	beq.n	800735a <SIMCOM_DMA_IrqHandler+0xb6>
 8007314:	4b7f      	ldr	r3, [pc, #508]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a88      	ldr	r2, [pc, #544]	; (800753c <SIMCOM_DMA_IrqHandler+0x298>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01a      	beq.n	8007354 <SIMCOM_DMA_IrqHandler+0xb0>
 800731e:	4b7d      	ldr	r3, [pc, #500]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a87      	ldr	r2, [pc, #540]	; (8007540 <SIMCOM_DMA_IrqHandler+0x29c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d012      	beq.n	800734e <SIMCOM_DMA_IrqHandler+0xaa>
 8007328:	4b7a      	ldr	r3, [pc, #488]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a85      	ldr	r2, [pc, #532]	; (8007544 <SIMCOM_DMA_IrqHandler+0x2a0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00a      	beq.n	8007348 <SIMCOM_DMA_IrqHandler+0xa4>
 8007332:	4b78      	ldr	r3, [pc, #480]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a84      	ldr	r2, [pc, #528]	; (8007548 <SIMCOM_DMA_IrqHandler+0x2a4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d102      	bne.n	8007342 <SIMCOM_DMA_IrqHandler+0x9e>
 800733c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007340:	e01e      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007342:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007346:	e01b      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800734c:	e018      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 800734e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007352:	e015      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007358:	e012      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 800735a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800735e:	e00f      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007364:	e00c      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736a:	e009      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 800736c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007370:	e006      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007372:	2310      	movs	r3, #16
 8007374:	e004      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 8007376:	2310      	movs	r3, #16
 8007378:	e002      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 800737a:	2310      	movs	r3, #16
 800737c:	e000      	b.n	8007380 <SIMCOM_DMA_IrqHandler+0xdc>
 800737e:	2310      	movs	r3, #16
 8007380:	4a72      	ldr	r2, [pc, #456]	; (800754c <SIMCOM_DMA_IrqHandler+0x2a8>)
 8007382:	60d3      	str	r3, [r2, #12]
 8007384:	e150      	b.n	8007628 <SIMCOM_DMA_IrqHandler+0x384>
 8007386:	4b63      	ldr	r3, [pc, #396]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	4b70      	ldr	r3, [pc, #448]	; (8007550 <SIMCOM_DMA_IrqHandler+0x2ac>)
 800738e:	429a      	cmp	r2, r3
 8007390:	d960      	bls.n	8007454 <SIMCOM_DMA_IrqHandler+0x1b0>
 8007392:	4b60      	ldr	r3, [pc, #384]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a61      	ldr	r2, [pc, #388]	; (800751c <SIMCOM_DMA_IrqHandler+0x278>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d057      	beq.n	800744c <SIMCOM_DMA_IrqHandler+0x1a8>
 800739c:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5f      	ldr	r2, [pc, #380]	; (8007520 <SIMCOM_DMA_IrqHandler+0x27c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d050      	beq.n	8007448 <SIMCOM_DMA_IrqHandler+0x1a4>
 80073a6:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a5e      	ldr	r2, [pc, #376]	; (8007524 <SIMCOM_DMA_IrqHandler+0x280>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d049      	beq.n	8007444 <SIMCOM_DMA_IrqHandler+0x1a0>
 80073b0:	4b58      	ldr	r3, [pc, #352]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a5c      	ldr	r2, [pc, #368]	; (8007528 <SIMCOM_DMA_IrqHandler+0x284>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d042      	beq.n	8007440 <SIMCOM_DMA_IrqHandler+0x19c>
 80073ba:	4b56      	ldr	r3, [pc, #344]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a5b      	ldr	r2, [pc, #364]	; (800752c <SIMCOM_DMA_IrqHandler+0x288>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d03a      	beq.n	800743a <SIMCOM_DMA_IrqHandler+0x196>
 80073c4:	4b53      	ldr	r3, [pc, #332]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a59      	ldr	r2, [pc, #356]	; (8007530 <SIMCOM_DMA_IrqHandler+0x28c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d032      	beq.n	8007434 <SIMCOM_DMA_IrqHandler+0x190>
 80073ce:	4b51      	ldr	r3, [pc, #324]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a58      	ldr	r2, [pc, #352]	; (8007534 <SIMCOM_DMA_IrqHandler+0x290>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02a      	beq.n	800742e <SIMCOM_DMA_IrqHandler+0x18a>
 80073d8:	4b4e      	ldr	r3, [pc, #312]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a56      	ldr	r2, [pc, #344]	; (8007538 <SIMCOM_DMA_IrqHandler+0x294>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d022      	beq.n	8007428 <SIMCOM_DMA_IrqHandler+0x184>
 80073e2:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a55      	ldr	r2, [pc, #340]	; (800753c <SIMCOM_DMA_IrqHandler+0x298>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d01a      	beq.n	8007422 <SIMCOM_DMA_IrqHandler+0x17e>
 80073ec:	4b49      	ldr	r3, [pc, #292]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a53      	ldr	r2, [pc, #332]	; (8007540 <SIMCOM_DMA_IrqHandler+0x29c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d012      	beq.n	800741c <SIMCOM_DMA_IrqHandler+0x178>
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a52      	ldr	r2, [pc, #328]	; (8007544 <SIMCOM_DMA_IrqHandler+0x2a0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00a      	beq.n	8007416 <SIMCOM_DMA_IrqHandler+0x172>
 8007400:	4b44      	ldr	r3, [pc, #272]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a50      	ldr	r2, [pc, #320]	; (8007548 <SIMCOM_DMA_IrqHandler+0x2a4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d102      	bne.n	8007410 <SIMCOM_DMA_IrqHandler+0x16c>
 800740a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800740e:	e01e      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007414:	e01b      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007416:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800741a:	e018      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 800741c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007420:	e015      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007426:	e012      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800742c:	e00f      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 800742e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007432:	e00c      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007438:	e009      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 800743a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800743e:	e006      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007440:	2310      	movs	r3, #16
 8007442:	e004      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007444:	2310      	movs	r3, #16
 8007446:	e002      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 8007448:	2310      	movs	r3, #16
 800744a:	e000      	b.n	800744e <SIMCOM_DMA_IrqHandler+0x1aa>
 800744c:	2310      	movs	r3, #16
 800744e:	4a3f      	ldr	r2, [pc, #252]	; (800754c <SIMCOM_DMA_IrqHandler+0x2a8>)
 8007450:	6093      	str	r3, [r2, #8]
 8007452:	e0e9      	b.n	8007628 <SIMCOM_DMA_IrqHandler+0x384>
 8007454:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4b3e      	ldr	r3, [pc, #248]	; (8007554 <SIMCOM_DMA_IrqHandler+0x2b0>)
 800745c:	429a      	cmp	r2, r3
 800745e:	f240 8083 	bls.w	8007568 <SIMCOM_DMA_IrqHandler+0x2c4>
 8007462:	4b2c      	ldr	r3, [pc, #176]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2d      	ldr	r2, [pc, #180]	; (800751c <SIMCOM_DMA_IrqHandler+0x278>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d079      	beq.n	8007560 <SIMCOM_DMA_IrqHandler+0x2bc>
 800746c:	4b29      	ldr	r3, [pc, #164]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2b      	ldr	r2, [pc, #172]	; (8007520 <SIMCOM_DMA_IrqHandler+0x27c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d072      	beq.n	800755c <SIMCOM_DMA_IrqHandler+0x2b8>
 8007476:	4b27      	ldr	r3, [pc, #156]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <SIMCOM_DMA_IrqHandler+0x280>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d06b      	beq.n	8007558 <SIMCOM_DMA_IrqHandler+0x2b4>
 8007480:	4b24      	ldr	r3, [pc, #144]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <SIMCOM_DMA_IrqHandler+0x284>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d042      	beq.n	8007510 <SIMCOM_DMA_IrqHandler+0x26c>
 800748a:	4b22      	ldr	r3, [pc, #136]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a27      	ldr	r2, [pc, #156]	; (800752c <SIMCOM_DMA_IrqHandler+0x288>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d03a      	beq.n	800750a <SIMCOM_DMA_IrqHandler+0x266>
 8007494:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a25      	ldr	r2, [pc, #148]	; (8007530 <SIMCOM_DMA_IrqHandler+0x28c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d032      	beq.n	8007504 <SIMCOM_DMA_IrqHandler+0x260>
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <SIMCOM_DMA_IrqHandler+0x290>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02a      	beq.n	80074fe <SIMCOM_DMA_IrqHandler+0x25a>
 80074a8:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a22      	ldr	r2, [pc, #136]	; (8007538 <SIMCOM_DMA_IrqHandler+0x294>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d022      	beq.n	80074f8 <SIMCOM_DMA_IrqHandler+0x254>
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <SIMCOM_DMA_IrqHandler+0x298>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01a      	beq.n	80074f2 <SIMCOM_DMA_IrqHandler+0x24e>
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1f      	ldr	r2, [pc, #124]	; (8007540 <SIMCOM_DMA_IrqHandler+0x29c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d012      	beq.n	80074ec <SIMCOM_DMA_IrqHandler+0x248>
 80074c6:	4b13      	ldr	r3, [pc, #76]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	; (8007544 <SIMCOM_DMA_IrqHandler+0x2a0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00a      	beq.n	80074e6 <SIMCOM_DMA_IrqHandler+0x242>
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <SIMCOM_DMA_IrqHandler+0x270>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1c      	ldr	r2, [pc, #112]	; (8007548 <SIMCOM_DMA_IrqHandler+0x2a4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d102      	bne.n	80074e0 <SIMCOM_DMA_IrqHandler+0x23c>
 80074da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074de:	e040      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074e4:	e03d      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074ea:	e03a      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074f0:	e037      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074f6:	e034      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fc:	e031      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 80074fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007502:	e02e      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 8007504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007508:	e02b      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 800750a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800750e:	e028      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 8007510:	2310      	movs	r3, #16
 8007512:	e026      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 8007514:	20000314 	.word	0x20000314
 8007518:	40026458 	.word	0x40026458
 800751c:	40026010 	.word	0x40026010
 8007520:	40026410 	.word	0x40026410
 8007524:	40026070 	.word	0x40026070
 8007528:	40026470 	.word	0x40026470
 800752c:	40026028 	.word	0x40026028
 8007530:	40026428 	.word	0x40026428
 8007534:	40026088 	.word	0x40026088
 8007538:	40026488 	.word	0x40026488
 800753c:	40026040 	.word	0x40026040
 8007540:	40026440 	.word	0x40026440
 8007544:	400260a0 	.word	0x400260a0
 8007548:	400264a0 	.word	0x400264a0
 800754c:	40026400 	.word	0x40026400
 8007550:	400260b8 	.word	0x400260b8
 8007554:	40026058 	.word	0x40026058
 8007558:	2310      	movs	r3, #16
 800755a:	e002      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 800755c:	2310      	movs	r3, #16
 800755e:	e000      	b.n	8007562 <SIMCOM_DMA_IrqHandler+0x2be>
 8007560:	2310      	movs	r3, #16
 8007562:	4a9b      	ldr	r2, [pc, #620]	; (80077d0 <SIMCOM_DMA_IrqHandler+0x52c>)
 8007564:	60d3      	str	r3, [r2, #12]
 8007566:	e05f      	b.n	8007628 <SIMCOM_DMA_IrqHandler+0x384>
 8007568:	4b9a      	ldr	r3, [pc, #616]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a9a      	ldr	r2, [pc, #616]	; (80077d8 <SIMCOM_DMA_IrqHandler+0x534>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d057      	beq.n	8007622 <SIMCOM_DMA_IrqHandler+0x37e>
 8007572:	4b98      	ldr	r3, [pc, #608]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a99      	ldr	r2, [pc, #612]	; (80077dc <SIMCOM_DMA_IrqHandler+0x538>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d050      	beq.n	800761e <SIMCOM_DMA_IrqHandler+0x37a>
 800757c:	4b95      	ldr	r3, [pc, #596]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a97      	ldr	r2, [pc, #604]	; (80077e0 <SIMCOM_DMA_IrqHandler+0x53c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d049      	beq.n	800761a <SIMCOM_DMA_IrqHandler+0x376>
 8007586:	4b93      	ldr	r3, [pc, #588]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a96      	ldr	r2, [pc, #600]	; (80077e4 <SIMCOM_DMA_IrqHandler+0x540>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d042      	beq.n	8007616 <SIMCOM_DMA_IrqHandler+0x372>
 8007590:	4b90      	ldr	r3, [pc, #576]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a94      	ldr	r2, [pc, #592]	; (80077e8 <SIMCOM_DMA_IrqHandler+0x544>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d03a      	beq.n	8007610 <SIMCOM_DMA_IrqHandler+0x36c>
 800759a:	4b8e      	ldr	r3, [pc, #568]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a93      	ldr	r2, [pc, #588]	; (80077ec <SIMCOM_DMA_IrqHandler+0x548>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d032      	beq.n	800760a <SIMCOM_DMA_IrqHandler+0x366>
 80075a4:	4b8b      	ldr	r3, [pc, #556]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a91      	ldr	r2, [pc, #580]	; (80077f0 <SIMCOM_DMA_IrqHandler+0x54c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d02a      	beq.n	8007604 <SIMCOM_DMA_IrqHandler+0x360>
 80075ae:	4b89      	ldr	r3, [pc, #548]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a90      	ldr	r2, [pc, #576]	; (80077f4 <SIMCOM_DMA_IrqHandler+0x550>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d022      	beq.n	80075fe <SIMCOM_DMA_IrqHandler+0x35a>
 80075b8:	4b86      	ldr	r3, [pc, #536]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a8e      	ldr	r2, [pc, #568]	; (80077f8 <SIMCOM_DMA_IrqHandler+0x554>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01a      	beq.n	80075f8 <SIMCOM_DMA_IrqHandler+0x354>
 80075c2:	4b84      	ldr	r3, [pc, #528]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a8d      	ldr	r2, [pc, #564]	; (80077fc <SIMCOM_DMA_IrqHandler+0x558>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d012      	beq.n	80075f2 <SIMCOM_DMA_IrqHandler+0x34e>
 80075cc:	4b81      	ldr	r3, [pc, #516]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a8b      	ldr	r2, [pc, #556]	; (8007800 <SIMCOM_DMA_IrqHandler+0x55c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00a      	beq.n	80075ec <SIMCOM_DMA_IrqHandler+0x348>
 80075d6:	4b7f      	ldr	r3, [pc, #508]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a8a      	ldr	r2, [pc, #552]	; (8007804 <SIMCOM_DMA_IrqHandler+0x560>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d102      	bne.n	80075e6 <SIMCOM_DMA_IrqHandler+0x342>
 80075e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075e4:	e01e      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 80075e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075ea:	e01b      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 80075ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075f0:	e018      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 80075f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075f6:	e015      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 80075f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075fc:	e012      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 80075fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007602:	e00f      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 8007604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007608:	e00c      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 800760a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800760e:	e009      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 8007610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007614:	e006      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 8007616:	2310      	movs	r3, #16
 8007618:	e004      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 800761a:	2310      	movs	r3, #16
 800761c:	e002      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 800761e:	2310      	movs	r3, #16
 8007620:	e000      	b.n	8007624 <SIMCOM_DMA_IrqHandler+0x380>
 8007622:	2310      	movs	r3, #16
 8007624:	4a6a      	ldr	r2, [pc, #424]	; (80077d0 <SIMCOM_DMA_IrqHandler+0x52c>)
 8007626:	6093      	str	r3, [r2, #8]

        SIMCOM_Check_Buffer();
 8007628:	f000 ff58 	bl	80084dc <SIMCOM_Check_Buffer>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));

        /* Start DMA transfer */
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
    }
}
 800762c:	f000 bf0a 	b.w	8008444 <SIMCOM_DMA_IrqHandler+0x11a0>
    else if (__HAL_DMA_GET_IT_SOURCE(&hdma_usart1_rx, DMA_IT_TC)) {
 8007630:	4b68      	ldr	r3, [pc, #416]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 81bd 	beq.w	80079ba <SIMCOM_DMA_IrqHandler+0x716>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx));
 8007640:	4b64      	ldr	r3, [pc, #400]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	4b70      	ldr	r3, [pc, #448]	; (8007808 <SIMCOM_DMA_IrqHandler+0x564>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d960      	bls.n	800770e <SIMCOM_DMA_IrqHandler+0x46a>
 800764c:	4b61      	ldr	r3, [pc, #388]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a61      	ldr	r2, [pc, #388]	; (80077d8 <SIMCOM_DMA_IrqHandler+0x534>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d057      	beq.n	8007706 <SIMCOM_DMA_IrqHandler+0x462>
 8007656:	4b5f      	ldr	r3, [pc, #380]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a60      	ldr	r2, [pc, #384]	; (80077dc <SIMCOM_DMA_IrqHandler+0x538>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d050      	beq.n	8007702 <SIMCOM_DMA_IrqHandler+0x45e>
 8007660:	4b5c      	ldr	r3, [pc, #368]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5e      	ldr	r2, [pc, #376]	; (80077e0 <SIMCOM_DMA_IrqHandler+0x53c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d049      	beq.n	80076fe <SIMCOM_DMA_IrqHandler+0x45a>
 800766a:	4b5a      	ldr	r3, [pc, #360]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5d      	ldr	r2, [pc, #372]	; (80077e4 <SIMCOM_DMA_IrqHandler+0x540>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d042      	beq.n	80076fa <SIMCOM_DMA_IrqHandler+0x456>
 8007674:	4b57      	ldr	r3, [pc, #348]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a5b      	ldr	r2, [pc, #364]	; (80077e8 <SIMCOM_DMA_IrqHandler+0x544>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d03a      	beq.n	80076f4 <SIMCOM_DMA_IrqHandler+0x450>
 800767e:	4b55      	ldr	r3, [pc, #340]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a5a      	ldr	r2, [pc, #360]	; (80077ec <SIMCOM_DMA_IrqHandler+0x548>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d032      	beq.n	80076ee <SIMCOM_DMA_IrqHandler+0x44a>
 8007688:	4b52      	ldr	r3, [pc, #328]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a58      	ldr	r2, [pc, #352]	; (80077f0 <SIMCOM_DMA_IrqHandler+0x54c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02a      	beq.n	80076e8 <SIMCOM_DMA_IrqHandler+0x444>
 8007692:	4b50      	ldr	r3, [pc, #320]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a57      	ldr	r2, [pc, #348]	; (80077f4 <SIMCOM_DMA_IrqHandler+0x550>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <SIMCOM_DMA_IrqHandler+0x43e>
 800769c:	4b4d      	ldr	r3, [pc, #308]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a55      	ldr	r2, [pc, #340]	; (80077f8 <SIMCOM_DMA_IrqHandler+0x554>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01a      	beq.n	80076dc <SIMCOM_DMA_IrqHandler+0x438>
 80076a6:	4b4b      	ldr	r3, [pc, #300]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a54      	ldr	r2, [pc, #336]	; (80077fc <SIMCOM_DMA_IrqHandler+0x558>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d012      	beq.n	80076d6 <SIMCOM_DMA_IrqHandler+0x432>
 80076b0:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a52      	ldr	r2, [pc, #328]	; (8007800 <SIMCOM_DMA_IrqHandler+0x55c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00a      	beq.n	80076d0 <SIMCOM_DMA_IrqHandler+0x42c>
 80076ba:	4b46      	ldr	r3, [pc, #280]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a51      	ldr	r2, [pc, #324]	; (8007804 <SIMCOM_DMA_IrqHandler+0x560>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d102      	bne.n	80076ca <SIMCOM_DMA_IrqHandler+0x426>
 80076c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076c8:	e01e      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076ce:	e01b      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076d4:	e018      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076da:	e015      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076e0:	e012      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076e6:	e00f      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076ec:	e00c      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076f2:	e009      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076f8:	e006      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076fa:	2320      	movs	r3, #32
 80076fc:	e004      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 80076fe:	2320      	movs	r3, #32
 8007700:	e002      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 8007702:	2320      	movs	r3, #32
 8007704:	e000      	b.n	8007708 <SIMCOM_DMA_IrqHandler+0x464>
 8007706:	2320      	movs	r3, #32
 8007708:	4a40      	ldr	r2, [pc, #256]	; (800780c <SIMCOM_DMA_IrqHandler+0x568>)
 800770a:	60d3      	str	r3, [r2, #12]
 800770c:	e151      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x70e>
 800770e:	4b31      	ldr	r3, [pc, #196]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <SIMCOM_DMA_IrqHandler+0x56c>)
 8007716:	429a      	cmp	r2, r3
 8007718:	f240 8084 	bls.w	8007824 <SIMCOM_DMA_IrqHandler+0x580>
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <SIMCOM_DMA_IrqHandler+0x534>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d07a      	beq.n	800781c <SIMCOM_DMA_IrqHandler+0x578>
 8007726:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <SIMCOM_DMA_IrqHandler+0x538>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d073      	beq.n	8007818 <SIMCOM_DMA_IrqHandler+0x574>
 8007730:	4b28      	ldr	r3, [pc, #160]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <SIMCOM_DMA_IrqHandler+0x53c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d06c      	beq.n	8007814 <SIMCOM_DMA_IrqHandler+0x570>
 800773a:	4b26      	ldr	r3, [pc, #152]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <SIMCOM_DMA_IrqHandler+0x540>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d042      	beq.n	80077ca <SIMCOM_DMA_IrqHandler+0x526>
 8007744:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a27      	ldr	r2, [pc, #156]	; (80077e8 <SIMCOM_DMA_IrqHandler+0x544>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d03a      	beq.n	80077c4 <SIMCOM_DMA_IrqHandler+0x520>
 800774e:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <SIMCOM_DMA_IrqHandler+0x548>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d032      	beq.n	80077be <SIMCOM_DMA_IrqHandler+0x51a>
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a24      	ldr	r2, [pc, #144]	; (80077f0 <SIMCOM_DMA_IrqHandler+0x54c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02a      	beq.n	80077b8 <SIMCOM_DMA_IrqHandler+0x514>
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a23      	ldr	r2, [pc, #140]	; (80077f4 <SIMCOM_DMA_IrqHandler+0x550>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d022      	beq.n	80077b2 <SIMCOM_DMA_IrqHandler+0x50e>
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a21      	ldr	r2, [pc, #132]	; (80077f8 <SIMCOM_DMA_IrqHandler+0x554>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01a      	beq.n	80077ac <SIMCOM_DMA_IrqHandler+0x508>
 8007776:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <SIMCOM_DMA_IrqHandler+0x558>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d012      	beq.n	80077a6 <SIMCOM_DMA_IrqHandler+0x502>
 8007780:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <SIMCOM_DMA_IrqHandler+0x55c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00a      	beq.n	80077a0 <SIMCOM_DMA_IrqHandler+0x4fc>
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <SIMCOM_DMA_IrqHandler+0x530>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <SIMCOM_DMA_IrqHandler+0x560>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d102      	bne.n	800779a <SIMCOM_DMA_IrqHandler+0x4f6>
 8007794:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007798:	e041      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 800779a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800779e:	e03e      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077a4:	e03b      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077aa:	e038      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077b0:	e035      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077b6:	e032      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077bc:	e02f      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077c2:	e02c      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077c8:	e029      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077ca:	2320      	movs	r3, #32
 80077cc:	e027      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 80077ce:	bf00      	nop
 80077d0:	40026000 	.word	0x40026000
 80077d4:	20000314 	.word	0x20000314
 80077d8:	40026010 	.word	0x40026010
 80077dc:	40026410 	.word	0x40026410
 80077e0:	40026070 	.word	0x40026070
 80077e4:	40026470 	.word	0x40026470
 80077e8:	40026028 	.word	0x40026028
 80077ec:	40026428 	.word	0x40026428
 80077f0:	40026088 	.word	0x40026088
 80077f4:	40026488 	.word	0x40026488
 80077f8:	40026040 	.word	0x40026040
 80077fc:	40026440 	.word	0x40026440
 8007800:	400260a0 	.word	0x400260a0
 8007804:	400264a0 	.word	0x400264a0
 8007808:	40026458 	.word	0x40026458
 800780c:	40026400 	.word	0x40026400
 8007810:	400260b8 	.word	0x400260b8
 8007814:	2320      	movs	r3, #32
 8007816:	e002      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 8007818:	2320      	movs	r3, #32
 800781a:	e000      	b.n	800781e <SIMCOM_DMA_IrqHandler+0x57a>
 800781c:	2320      	movs	r3, #32
 800781e:	4a9b      	ldr	r2, [pc, #620]	; (8007a8c <SIMCOM_DMA_IrqHandler+0x7e8>)
 8007820:	6093      	str	r3, [r2, #8]
 8007822:	e0c6      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x70e>
 8007824:	4b9a      	ldr	r3, [pc, #616]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	4b9a      	ldr	r3, [pc, #616]	; (8007a94 <SIMCOM_DMA_IrqHandler+0x7f0>)
 800782c:	429a      	cmp	r2, r3
 800782e:	d960      	bls.n	80078f2 <SIMCOM_DMA_IrqHandler+0x64e>
 8007830:	4b97      	ldr	r3, [pc, #604]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a98      	ldr	r2, [pc, #608]	; (8007a98 <SIMCOM_DMA_IrqHandler+0x7f4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d057      	beq.n	80078ea <SIMCOM_DMA_IrqHandler+0x646>
 800783a:	4b95      	ldr	r3, [pc, #596]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a97      	ldr	r2, [pc, #604]	; (8007a9c <SIMCOM_DMA_IrqHandler+0x7f8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d050      	beq.n	80078e6 <SIMCOM_DMA_IrqHandler+0x642>
 8007844:	4b92      	ldr	r3, [pc, #584]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a95      	ldr	r2, [pc, #596]	; (8007aa0 <SIMCOM_DMA_IrqHandler+0x7fc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d049      	beq.n	80078e2 <SIMCOM_DMA_IrqHandler+0x63e>
 800784e:	4b90      	ldr	r3, [pc, #576]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a94      	ldr	r2, [pc, #592]	; (8007aa4 <SIMCOM_DMA_IrqHandler+0x800>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d042      	beq.n	80078de <SIMCOM_DMA_IrqHandler+0x63a>
 8007858:	4b8d      	ldr	r3, [pc, #564]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a92      	ldr	r2, [pc, #584]	; (8007aa8 <SIMCOM_DMA_IrqHandler+0x804>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d03a      	beq.n	80078d8 <SIMCOM_DMA_IrqHandler+0x634>
 8007862:	4b8b      	ldr	r3, [pc, #556]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a91      	ldr	r2, [pc, #580]	; (8007aac <SIMCOM_DMA_IrqHandler+0x808>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d032      	beq.n	80078d2 <SIMCOM_DMA_IrqHandler+0x62e>
 800786c:	4b88      	ldr	r3, [pc, #544]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a8f      	ldr	r2, [pc, #572]	; (8007ab0 <SIMCOM_DMA_IrqHandler+0x80c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d02a      	beq.n	80078cc <SIMCOM_DMA_IrqHandler+0x628>
 8007876:	4b86      	ldr	r3, [pc, #536]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a8e      	ldr	r2, [pc, #568]	; (8007ab4 <SIMCOM_DMA_IrqHandler+0x810>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d022      	beq.n	80078c6 <SIMCOM_DMA_IrqHandler+0x622>
 8007880:	4b83      	ldr	r3, [pc, #524]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a8c      	ldr	r2, [pc, #560]	; (8007ab8 <SIMCOM_DMA_IrqHandler+0x814>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01a      	beq.n	80078c0 <SIMCOM_DMA_IrqHandler+0x61c>
 800788a:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a8b      	ldr	r2, [pc, #556]	; (8007abc <SIMCOM_DMA_IrqHandler+0x818>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d012      	beq.n	80078ba <SIMCOM_DMA_IrqHandler+0x616>
 8007894:	4b7e      	ldr	r3, [pc, #504]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a89      	ldr	r2, [pc, #548]	; (8007ac0 <SIMCOM_DMA_IrqHandler+0x81c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00a      	beq.n	80078b4 <SIMCOM_DMA_IrqHandler+0x610>
 800789e:	4b7c      	ldr	r3, [pc, #496]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a88      	ldr	r2, [pc, #544]	; (8007ac4 <SIMCOM_DMA_IrqHandler+0x820>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d102      	bne.n	80078ae <SIMCOM_DMA_IrqHandler+0x60a>
 80078a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078ac:	e01e      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078b2:	e01b      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078b8:	e018      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078be:	e015      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078c4:	e012      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ca:	e00f      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078d0:	e00c      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078d6:	e009      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078dc:	e006      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078de:	2320      	movs	r3, #32
 80078e0:	e004      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078e2:	2320      	movs	r3, #32
 80078e4:	e002      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078e6:	2320      	movs	r3, #32
 80078e8:	e000      	b.n	80078ec <SIMCOM_DMA_IrqHandler+0x648>
 80078ea:	2320      	movs	r3, #32
 80078ec:	4a76      	ldr	r2, [pc, #472]	; (8007ac8 <SIMCOM_DMA_IrqHandler+0x824>)
 80078ee:	60d3      	str	r3, [r2, #12]
 80078f0:	e05f      	b.n	80079b2 <SIMCOM_DMA_IrqHandler+0x70e>
 80078f2:	4b67      	ldr	r3, [pc, #412]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a68      	ldr	r2, [pc, #416]	; (8007a98 <SIMCOM_DMA_IrqHandler+0x7f4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d057      	beq.n	80079ac <SIMCOM_DMA_IrqHandler+0x708>
 80078fc:	4b64      	ldr	r3, [pc, #400]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a66      	ldr	r2, [pc, #408]	; (8007a9c <SIMCOM_DMA_IrqHandler+0x7f8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d050      	beq.n	80079a8 <SIMCOM_DMA_IrqHandler+0x704>
 8007906:	4b62      	ldr	r3, [pc, #392]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a65      	ldr	r2, [pc, #404]	; (8007aa0 <SIMCOM_DMA_IrqHandler+0x7fc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d049      	beq.n	80079a4 <SIMCOM_DMA_IrqHandler+0x700>
 8007910:	4b5f      	ldr	r3, [pc, #380]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a63      	ldr	r2, [pc, #396]	; (8007aa4 <SIMCOM_DMA_IrqHandler+0x800>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d042      	beq.n	80079a0 <SIMCOM_DMA_IrqHandler+0x6fc>
 800791a:	4b5d      	ldr	r3, [pc, #372]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a62      	ldr	r2, [pc, #392]	; (8007aa8 <SIMCOM_DMA_IrqHandler+0x804>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d03a      	beq.n	800799a <SIMCOM_DMA_IrqHandler+0x6f6>
 8007924:	4b5a      	ldr	r3, [pc, #360]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a60      	ldr	r2, [pc, #384]	; (8007aac <SIMCOM_DMA_IrqHandler+0x808>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d032      	beq.n	8007994 <SIMCOM_DMA_IrqHandler+0x6f0>
 800792e:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a5f      	ldr	r2, [pc, #380]	; (8007ab0 <SIMCOM_DMA_IrqHandler+0x80c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d02a      	beq.n	800798e <SIMCOM_DMA_IrqHandler+0x6ea>
 8007938:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5d      	ldr	r2, [pc, #372]	; (8007ab4 <SIMCOM_DMA_IrqHandler+0x810>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d022      	beq.n	8007988 <SIMCOM_DMA_IrqHandler+0x6e4>
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a5c      	ldr	r2, [pc, #368]	; (8007ab8 <SIMCOM_DMA_IrqHandler+0x814>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d01a      	beq.n	8007982 <SIMCOM_DMA_IrqHandler+0x6de>
 800794c:	4b50      	ldr	r3, [pc, #320]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a5a      	ldr	r2, [pc, #360]	; (8007abc <SIMCOM_DMA_IrqHandler+0x818>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d012      	beq.n	800797c <SIMCOM_DMA_IrqHandler+0x6d8>
 8007956:	4b4e      	ldr	r3, [pc, #312]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a59      	ldr	r2, [pc, #356]	; (8007ac0 <SIMCOM_DMA_IrqHandler+0x81c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00a      	beq.n	8007976 <SIMCOM_DMA_IrqHandler+0x6d2>
 8007960:	4b4b      	ldr	r3, [pc, #300]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a57      	ldr	r2, [pc, #348]	; (8007ac4 <SIMCOM_DMA_IrqHandler+0x820>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d102      	bne.n	8007970 <SIMCOM_DMA_IrqHandler+0x6cc>
 800796a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800796e:	e01e      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 8007970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007974:	e01b      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 8007976:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800797a:	e018      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 800797c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007980:	e015      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 8007982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007986:	e012      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 8007988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800798c:	e00f      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 800798e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007992:	e00c      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 8007994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007998:	e009      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 800799a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800799e:	e006      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 80079a0:	2320      	movs	r3, #32
 80079a2:	e004      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 80079a4:	2320      	movs	r3, #32
 80079a6:	e002      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 80079a8:	2320      	movs	r3, #32
 80079aa:	e000      	b.n	80079ae <SIMCOM_DMA_IrqHandler+0x70a>
 80079ac:	2320      	movs	r3, #32
 80079ae:	4a46      	ldr	r2, [pc, #280]	; (8007ac8 <SIMCOM_DMA_IrqHandler+0x824>)
 80079b0:	6093      	str	r3, [r2, #8]
        SIMCOM_Check_Buffer();
 80079b2:	f000 fd93 	bl	80084dc <SIMCOM_Check_Buffer>
}
 80079b6:	f000 bd45 	b.w	8008444 <SIMCOM_DMA_IrqHandler+0x11a0>
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_TE_FLAG_INDEX(&hdma_usart1_rx));
 80079ba:	4b35      	ldr	r3, [pc, #212]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	4b42      	ldr	r3, [pc, #264]	; (8007acc <SIMCOM_DMA_IrqHandler+0x828>)
 80079c2:	429a      	cmp	r2, r3
 80079c4:	f240 8084 	bls.w	8007ad0 <SIMCOM_DMA_IrqHandler+0x82c>
 80079c8:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a32      	ldr	r2, [pc, #200]	; (8007a98 <SIMCOM_DMA_IrqHandler+0x7f4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d057      	beq.n	8007a82 <SIMCOM_DMA_IrqHandler+0x7de>
 80079d2:	4b2f      	ldr	r3, [pc, #188]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a31      	ldr	r2, [pc, #196]	; (8007a9c <SIMCOM_DMA_IrqHandler+0x7f8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d050      	beq.n	8007a7e <SIMCOM_DMA_IrqHandler+0x7da>
 80079dc:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2f      	ldr	r2, [pc, #188]	; (8007aa0 <SIMCOM_DMA_IrqHandler+0x7fc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d049      	beq.n	8007a7a <SIMCOM_DMA_IrqHandler+0x7d6>
 80079e6:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2e      	ldr	r2, [pc, #184]	; (8007aa4 <SIMCOM_DMA_IrqHandler+0x800>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d042      	beq.n	8007a76 <SIMCOM_DMA_IrqHandler+0x7d2>
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2c      	ldr	r2, [pc, #176]	; (8007aa8 <SIMCOM_DMA_IrqHandler+0x804>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d03a      	beq.n	8007a70 <SIMCOM_DMA_IrqHandler+0x7cc>
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2b      	ldr	r2, [pc, #172]	; (8007aac <SIMCOM_DMA_IrqHandler+0x808>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d032      	beq.n	8007a6a <SIMCOM_DMA_IrqHandler+0x7c6>
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a29      	ldr	r2, [pc, #164]	; (8007ab0 <SIMCOM_DMA_IrqHandler+0x80c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02a      	beq.n	8007a64 <SIMCOM_DMA_IrqHandler+0x7c0>
 8007a0e:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a28      	ldr	r2, [pc, #160]	; (8007ab4 <SIMCOM_DMA_IrqHandler+0x810>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d022      	beq.n	8007a5e <SIMCOM_DMA_IrqHandler+0x7ba>
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a26      	ldr	r2, [pc, #152]	; (8007ab8 <SIMCOM_DMA_IrqHandler+0x814>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d01a      	beq.n	8007a58 <SIMCOM_DMA_IrqHandler+0x7b4>
 8007a22:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a25      	ldr	r2, [pc, #148]	; (8007abc <SIMCOM_DMA_IrqHandler+0x818>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d012      	beq.n	8007a52 <SIMCOM_DMA_IrqHandler+0x7ae>
 8007a2c:	4b18      	ldr	r3, [pc, #96]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a23      	ldr	r2, [pc, #140]	; (8007ac0 <SIMCOM_DMA_IrqHandler+0x81c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00a      	beq.n	8007a4c <SIMCOM_DMA_IrqHandler+0x7a8>
 8007a36:	4b16      	ldr	r3, [pc, #88]	; (8007a90 <SIMCOM_DMA_IrqHandler+0x7ec>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a22      	ldr	r2, [pc, #136]	; (8007ac4 <SIMCOM_DMA_IrqHandler+0x820>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d102      	bne.n	8007a46 <SIMCOM_DMA_IrqHandler+0x7a2>
 8007a40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a44:	e01e      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a4a:	e01b      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a50:	e018      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a56:	e015      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a5c:	e012      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a62:	e00f      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	e00c      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6e:	e009      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a74:	e006      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a76:	2308      	movs	r3, #8
 8007a78:	e004      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	e002      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a7e:	2308      	movs	r3, #8
 8007a80:	e000      	b.n	8007a84 <SIMCOM_DMA_IrqHandler+0x7e0>
 8007a82:	2308      	movs	r3, #8
 8007a84:	4a01      	ldr	r2, [pc, #4]	; (8007a8c <SIMCOM_DMA_IrqHandler+0x7e8>)
 8007a86:	60d3      	str	r3, [r2, #12]
 8007a88:	e173      	b.n	8007d72 <SIMCOM_DMA_IrqHandler+0xace>
 8007a8a:	bf00      	nop
 8007a8c:	40026400 	.word	0x40026400
 8007a90:	20000314 	.word	0x20000314
 8007a94:	40026058 	.word	0x40026058
 8007a98:	40026010 	.word	0x40026010
 8007a9c:	40026410 	.word	0x40026410
 8007aa0:	40026070 	.word	0x40026070
 8007aa4:	40026470 	.word	0x40026470
 8007aa8:	40026028 	.word	0x40026028
 8007aac:	40026428 	.word	0x40026428
 8007ab0:	40026088 	.word	0x40026088
 8007ab4:	40026488 	.word	0x40026488
 8007ab8:	40026040 	.word	0x40026040
 8007abc:	40026440 	.word	0x40026440
 8007ac0:	400260a0 	.word	0x400260a0
 8007ac4:	400264a0 	.word	0x400264a0
 8007ac8:	40026000 	.word	0x40026000
 8007acc:	40026458 	.word	0x40026458
 8007ad0:	4b95      	ldr	r3, [pc, #596]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4b95      	ldr	r3, [pc, #596]	; (8007d2c <SIMCOM_DMA_IrqHandler+0xa88>)
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d960      	bls.n	8007b9e <SIMCOM_DMA_IrqHandler+0x8fa>
 8007adc:	4b92      	ldr	r3, [pc, #584]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a93      	ldr	r2, [pc, #588]	; (8007d30 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d057      	beq.n	8007b96 <SIMCOM_DMA_IrqHandler+0x8f2>
 8007ae6:	4b90      	ldr	r3, [pc, #576]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a92      	ldr	r2, [pc, #584]	; (8007d34 <SIMCOM_DMA_IrqHandler+0xa90>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d050      	beq.n	8007b92 <SIMCOM_DMA_IrqHandler+0x8ee>
 8007af0:	4b8d      	ldr	r3, [pc, #564]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a90      	ldr	r2, [pc, #576]	; (8007d38 <SIMCOM_DMA_IrqHandler+0xa94>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d049      	beq.n	8007b8e <SIMCOM_DMA_IrqHandler+0x8ea>
 8007afa:	4b8b      	ldr	r3, [pc, #556]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a8f      	ldr	r2, [pc, #572]	; (8007d3c <SIMCOM_DMA_IrqHandler+0xa98>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d042      	beq.n	8007b8a <SIMCOM_DMA_IrqHandler+0x8e6>
 8007b04:	4b88      	ldr	r3, [pc, #544]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a8d      	ldr	r2, [pc, #564]	; (8007d40 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d03a      	beq.n	8007b84 <SIMCOM_DMA_IrqHandler+0x8e0>
 8007b0e:	4b86      	ldr	r3, [pc, #536]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a8c      	ldr	r2, [pc, #560]	; (8007d44 <SIMCOM_DMA_IrqHandler+0xaa0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d032      	beq.n	8007b7e <SIMCOM_DMA_IrqHandler+0x8da>
 8007b18:	4b83      	ldr	r3, [pc, #524]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a8a      	ldr	r2, [pc, #552]	; (8007d48 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d02a      	beq.n	8007b78 <SIMCOM_DMA_IrqHandler+0x8d4>
 8007b22:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a89      	ldr	r2, [pc, #548]	; (8007d4c <SIMCOM_DMA_IrqHandler+0xaa8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d022      	beq.n	8007b72 <SIMCOM_DMA_IrqHandler+0x8ce>
 8007b2c:	4b7e      	ldr	r3, [pc, #504]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a87      	ldr	r2, [pc, #540]	; (8007d50 <SIMCOM_DMA_IrqHandler+0xaac>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d01a      	beq.n	8007b6c <SIMCOM_DMA_IrqHandler+0x8c8>
 8007b36:	4b7c      	ldr	r3, [pc, #496]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a86      	ldr	r2, [pc, #536]	; (8007d54 <SIMCOM_DMA_IrqHandler+0xab0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d012      	beq.n	8007b66 <SIMCOM_DMA_IrqHandler+0x8c2>
 8007b40:	4b79      	ldr	r3, [pc, #484]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a84      	ldr	r2, [pc, #528]	; (8007d58 <SIMCOM_DMA_IrqHandler+0xab4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00a      	beq.n	8007b60 <SIMCOM_DMA_IrqHandler+0x8bc>
 8007b4a:	4b77      	ldr	r3, [pc, #476]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a83      	ldr	r2, [pc, #524]	; (8007d5c <SIMCOM_DMA_IrqHandler+0xab8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d102      	bne.n	8007b5a <SIMCOM_DMA_IrqHandler+0x8b6>
 8007b54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b58:	e01e      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b5e:	e01b      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b64:	e018      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b6a:	e015      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b70:	e012      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b76:	e00f      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7c:	e00c      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b82:	e009      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b88:	e006      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	e004      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b8e:	2308      	movs	r3, #8
 8007b90:	e002      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b92:	2308      	movs	r3, #8
 8007b94:	e000      	b.n	8007b98 <SIMCOM_DMA_IrqHandler+0x8f4>
 8007b96:	2308      	movs	r3, #8
 8007b98:	4a71      	ldr	r2, [pc, #452]	; (8007d60 <SIMCOM_DMA_IrqHandler+0xabc>)
 8007b9a:	6093      	str	r3, [r2, #8]
 8007b9c:	e0e9      	b.n	8007d72 <SIMCOM_DMA_IrqHandler+0xace>
 8007b9e:	4b62      	ldr	r3, [pc, #392]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	4b6f      	ldr	r3, [pc, #444]	; (8007d64 <SIMCOM_DMA_IrqHandler+0xac0>)
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d960      	bls.n	8007c6c <SIMCOM_DMA_IrqHandler+0x9c8>
 8007baa:	4b5f      	ldr	r3, [pc, #380]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a60      	ldr	r2, [pc, #384]	; (8007d30 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d057      	beq.n	8007c64 <SIMCOM_DMA_IrqHandler+0x9c0>
 8007bb4:	4b5c      	ldr	r3, [pc, #368]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a5e      	ldr	r2, [pc, #376]	; (8007d34 <SIMCOM_DMA_IrqHandler+0xa90>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d050      	beq.n	8007c60 <SIMCOM_DMA_IrqHandler+0x9bc>
 8007bbe:	4b5a      	ldr	r3, [pc, #360]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a5d      	ldr	r2, [pc, #372]	; (8007d38 <SIMCOM_DMA_IrqHandler+0xa94>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d049      	beq.n	8007c5c <SIMCOM_DMA_IrqHandler+0x9b8>
 8007bc8:	4b57      	ldr	r3, [pc, #348]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a5b      	ldr	r2, [pc, #364]	; (8007d3c <SIMCOM_DMA_IrqHandler+0xa98>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d042      	beq.n	8007c58 <SIMCOM_DMA_IrqHandler+0x9b4>
 8007bd2:	4b55      	ldr	r3, [pc, #340]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a5a      	ldr	r2, [pc, #360]	; (8007d40 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03a      	beq.n	8007c52 <SIMCOM_DMA_IrqHandler+0x9ae>
 8007bdc:	4b52      	ldr	r3, [pc, #328]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a58      	ldr	r2, [pc, #352]	; (8007d44 <SIMCOM_DMA_IrqHandler+0xaa0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d032      	beq.n	8007c4c <SIMCOM_DMA_IrqHandler+0x9a8>
 8007be6:	4b50      	ldr	r3, [pc, #320]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a57      	ldr	r2, [pc, #348]	; (8007d48 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d02a      	beq.n	8007c46 <SIMCOM_DMA_IrqHandler+0x9a2>
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a55      	ldr	r2, [pc, #340]	; (8007d4c <SIMCOM_DMA_IrqHandler+0xaa8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d022      	beq.n	8007c40 <SIMCOM_DMA_IrqHandler+0x99c>
 8007bfa:	4b4b      	ldr	r3, [pc, #300]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a54      	ldr	r2, [pc, #336]	; (8007d50 <SIMCOM_DMA_IrqHandler+0xaac>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d01a      	beq.n	8007c3a <SIMCOM_DMA_IrqHandler+0x996>
 8007c04:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a52      	ldr	r2, [pc, #328]	; (8007d54 <SIMCOM_DMA_IrqHandler+0xab0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d012      	beq.n	8007c34 <SIMCOM_DMA_IrqHandler+0x990>
 8007c0e:	4b46      	ldr	r3, [pc, #280]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a51      	ldr	r2, [pc, #324]	; (8007d58 <SIMCOM_DMA_IrqHandler+0xab4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00a      	beq.n	8007c2e <SIMCOM_DMA_IrqHandler+0x98a>
 8007c18:	4b43      	ldr	r3, [pc, #268]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a4f      	ldr	r2, [pc, #316]	; (8007d5c <SIMCOM_DMA_IrqHandler+0xab8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d102      	bne.n	8007c28 <SIMCOM_DMA_IrqHandler+0x984>
 8007c22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c26:	e01e      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c2c:	e01b      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c32:	e018      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c38:	e015      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c3e:	e012      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c44:	e00f      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4a:	e00c      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c50:	e009      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c56:	e006      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	e004      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	e002      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c60:	2308      	movs	r3, #8
 8007c62:	e000      	b.n	8007c66 <SIMCOM_DMA_IrqHandler+0x9c2>
 8007c64:	2308      	movs	r3, #8
 8007c66:	4a40      	ldr	r2, [pc, #256]	; (8007d68 <SIMCOM_DMA_IrqHandler+0xac4>)
 8007c68:	60d3      	str	r3, [r2, #12]
 8007c6a:	e082      	b.n	8007d72 <SIMCOM_DMA_IrqHandler+0xace>
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a2f      	ldr	r2, [pc, #188]	; (8007d30 <SIMCOM_DMA_IrqHandler+0xa8c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d07a      	beq.n	8007d6c <SIMCOM_DMA_IrqHandler+0xac8>
 8007c76:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a2e      	ldr	r2, [pc, #184]	; (8007d34 <SIMCOM_DMA_IrqHandler+0xa90>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d050      	beq.n	8007d22 <SIMCOM_DMA_IrqHandler+0xa7e>
 8007c80:	4b29      	ldr	r3, [pc, #164]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2c      	ldr	r2, [pc, #176]	; (8007d38 <SIMCOM_DMA_IrqHandler+0xa94>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d049      	beq.n	8007d1e <SIMCOM_DMA_IrqHandler+0xa7a>
 8007c8a:	4b27      	ldr	r3, [pc, #156]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2b      	ldr	r2, [pc, #172]	; (8007d3c <SIMCOM_DMA_IrqHandler+0xa98>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d042      	beq.n	8007d1a <SIMCOM_DMA_IrqHandler+0xa76>
 8007c94:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a29      	ldr	r2, [pc, #164]	; (8007d40 <SIMCOM_DMA_IrqHandler+0xa9c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d03a      	beq.n	8007d14 <SIMCOM_DMA_IrqHandler+0xa70>
 8007c9e:	4b22      	ldr	r3, [pc, #136]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a28      	ldr	r2, [pc, #160]	; (8007d44 <SIMCOM_DMA_IrqHandler+0xaa0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d032      	beq.n	8007d0e <SIMCOM_DMA_IrqHandler+0xa6a>
 8007ca8:	4b1f      	ldr	r3, [pc, #124]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a26      	ldr	r2, [pc, #152]	; (8007d48 <SIMCOM_DMA_IrqHandler+0xaa4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d02a      	beq.n	8007d08 <SIMCOM_DMA_IrqHandler+0xa64>
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <SIMCOM_DMA_IrqHandler+0xaa8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <SIMCOM_DMA_IrqHandler+0xa5e>
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a23      	ldr	r2, [pc, #140]	; (8007d50 <SIMCOM_DMA_IrqHandler+0xaac>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01a      	beq.n	8007cfc <SIMCOM_DMA_IrqHandler+0xa58>
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <SIMCOM_DMA_IrqHandler+0xab0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d012      	beq.n	8007cf6 <SIMCOM_DMA_IrqHandler+0xa52>
 8007cd0:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a20      	ldr	r2, [pc, #128]	; (8007d58 <SIMCOM_DMA_IrqHandler+0xab4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00a      	beq.n	8007cf0 <SIMCOM_DMA_IrqHandler+0xa4c>
 8007cda:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <SIMCOM_DMA_IrqHandler+0xa84>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <SIMCOM_DMA_IrqHandler+0xab8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d102      	bne.n	8007cea <SIMCOM_DMA_IrqHandler+0xa46>
 8007ce4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ce8:	e041      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cee:	e03e      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007cf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cf4:	e03b      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007cf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cfa:	e038      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007cfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d00:	e035      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d06:	e032      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d0c:	e02f      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d12:	e02c      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d18:	e029      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	e027      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d1e:	2308      	movs	r3, #8
 8007d20:	e025      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d22:	2308      	movs	r3, #8
 8007d24:	e023      	b.n	8007d6e <SIMCOM_DMA_IrqHandler+0xaca>
 8007d26:	bf00      	nop
 8007d28:	20000314 	.word	0x20000314
 8007d2c:	400260b8 	.word	0x400260b8
 8007d30:	40026010 	.word	0x40026010
 8007d34:	40026410 	.word	0x40026410
 8007d38:	40026070 	.word	0x40026070
 8007d3c:	40026470 	.word	0x40026470
 8007d40:	40026028 	.word	0x40026028
 8007d44:	40026428 	.word	0x40026428
 8007d48:	40026088 	.word	0x40026088
 8007d4c:	40026488 	.word	0x40026488
 8007d50:	40026040 	.word	0x40026040
 8007d54:	40026440 	.word	0x40026440
 8007d58:	400260a0 	.word	0x400260a0
 8007d5c:	400264a0 	.word	0x400264a0
 8007d60:	40026400 	.word	0x40026400
 8007d64:	40026058 	.word	0x40026058
 8007d68:	40026000 	.word	0x40026000
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	4a96      	ldr	r2, [pc, #600]	; (8007fc8 <SIMCOM_DMA_IrqHandler+0xd24>)
 8007d70:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_FE_FLAG_INDEX(&hdma_usart1_rx));
 8007d72:	4b96      	ldr	r3, [pc, #600]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b95      	ldr	r3, [pc, #596]	; (8007fd0 <SIMCOM_DMA_IrqHandler+0xd2c>)
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d95c      	bls.n	8007e38 <SIMCOM_DMA_IrqHandler+0xb94>
 8007d7e:	4b93      	ldr	r3, [pc, #588]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a94      	ldr	r2, [pc, #592]	; (8007fd4 <SIMCOM_DMA_IrqHandler+0xd30>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d053      	beq.n	8007e30 <SIMCOM_DMA_IrqHandler+0xb8c>
 8007d88:	4b90      	ldr	r3, [pc, #576]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a92      	ldr	r2, [pc, #584]	; (8007fd8 <SIMCOM_DMA_IrqHandler+0xd34>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d04c      	beq.n	8007e2c <SIMCOM_DMA_IrqHandler+0xb88>
 8007d92:	4b8e      	ldr	r3, [pc, #568]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a91      	ldr	r2, [pc, #580]	; (8007fdc <SIMCOM_DMA_IrqHandler+0xd38>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d045      	beq.n	8007e28 <SIMCOM_DMA_IrqHandler+0xb84>
 8007d9c:	4b8b      	ldr	r3, [pc, #556]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a8f      	ldr	r2, [pc, #572]	; (8007fe0 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d03e      	beq.n	8007e24 <SIMCOM_DMA_IrqHandler+0xb80>
 8007da6:	4b89      	ldr	r3, [pc, #548]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a8e      	ldr	r2, [pc, #568]	; (8007fe4 <SIMCOM_DMA_IrqHandler+0xd40>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d037      	beq.n	8007e20 <SIMCOM_DMA_IrqHandler+0xb7c>
 8007db0:	4b86      	ldr	r3, [pc, #536]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a8c      	ldr	r2, [pc, #560]	; (8007fe8 <SIMCOM_DMA_IrqHandler+0xd44>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d030      	beq.n	8007e1c <SIMCOM_DMA_IrqHandler+0xb78>
 8007dba:	4b84      	ldr	r3, [pc, #528]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a8b      	ldr	r2, [pc, #556]	; (8007fec <SIMCOM_DMA_IrqHandler+0xd48>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d029      	beq.n	8007e18 <SIMCOM_DMA_IrqHandler+0xb74>
 8007dc4:	4b81      	ldr	r3, [pc, #516]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a89      	ldr	r2, [pc, #548]	; (8007ff0 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d022      	beq.n	8007e14 <SIMCOM_DMA_IrqHandler+0xb70>
 8007dce:	4b7f      	ldr	r3, [pc, #508]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a88      	ldr	r2, [pc, #544]	; (8007ff4 <SIMCOM_DMA_IrqHandler+0xd50>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d01a      	beq.n	8007e0e <SIMCOM_DMA_IrqHandler+0xb6a>
 8007dd8:	4b7c      	ldr	r3, [pc, #496]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a86      	ldr	r2, [pc, #536]	; (8007ff8 <SIMCOM_DMA_IrqHandler+0xd54>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d012      	beq.n	8007e08 <SIMCOM_DMA_IrqHandler+0xb64>
 8007de2:	4b7a      	ldr	r3, [pc, #488]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a85      	ldr	r2, [pc, #532]	; (8007ffc <SIMCOM_DMA_IrqHandler+0xd58>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00a      	beq.n	8007e02 <SIMCOM_DMA_IrqHandler+0xb5e>
 8007dec:	4b77      	ldr	r3, [pc, #476]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a83      	ldr	r2, [pc, #524]	; (8008000 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d102      	bne.n	8007dfc <SIMCOM_DMA_IrqHandler+0xb58>
 8007df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dfa:	e01a      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007dfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e00:	e017      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e06:	e014      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e0c:	e011      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e12:	e00e      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	e00c      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	e00a      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	e008      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	e006      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e004      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e002      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <SIMCOM_DMA_IrqHandler+0xb8e>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4a74      	ldr	r2, [pc, #464]	; (8008004 <SIMCOM_DMA_IrqHandler+0xd60>)
 8007e34:	60d3      	str	r3, [r2, #12]
 8007e36:	e147      	b.n	80080c8 <SIMCOM_DMA_IrqHandler+0xe24>
 8007e38:	4b64      	ldr	r3, [pc, #400]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4b72      	ldr	r3, [pc, #456]	; (8008008 <SIMCOM_DMA_IrqHandler+0xd64>)
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d95c      	bls.n	8007efe <SIMCOM_DMA_IrqHandler+0xc5a>
 8007e44:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a62      	ldr	r2, [pc, #392]	; (8007fd4 <SIMCOM_DMA_IrqHandler+0xd30>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d053      	beq.n	8007ef6 <SIMCOM_DMA_IrqHandler+0xc52>
 8007e4e:	4b5f      	ldr	r3, [pc, #380]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a61      	ldr	r2, [pc, #388]	; (8007fd8 <SIMCOM_DMA_IrqHandler+0xd34>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d04c      	beq.n	8007ef2 <SIMCOM_DMA_IrqHandler+0xc4e>
 8007e58:	4b5c      	ldr	r3, [pc, #368]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a5f      	ldr	r2, [pc, #380]	; (8007fdc <SIMCOM_DMA_IrqHandler+0xd38>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d045      	beq.n	8007eee <SIMCOM_DMA_IrqHandler+0xc4a>
 8007e62:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a5e      	ldr	r2, [pc, #376]	; (8007fe0 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d03e      	beq.n	8007eea <SIMCOM_DMA_IrqHandler+0xc46>
 8007e6c:	4b57      	ldr	r3, [pc, #348]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5c      	ldr	r2, [pc, #368]	; (8007fe4 <SIMCOM_DMA_IrqHandler+0xd40>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d037      	beq.n	8007ee6 <SIMCOM_DMA_IrqHandler+0xc42>
 8007e76:	4b55      	ldr	r3, [pc, #340]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a5b      	ldr	r2, [pc, #364]	; (8007fe8 <SIMCOM_DMA_IrqHandler+0xd44>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d030      	beq.n	8007ee2 <SIMCOM_DMA_IrqHandler+0xc3e>
 8007e80:	4b52      	ldr	r3, [pc, #328]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a59      	ldr	r2, [pc, #356]	; (8007fec <SIMCOM_DMA_IrqHandler+0xd48>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d029      	beq.n	8007ede <SIMCOM_DMA_IrqHandler+0xc3a>
 8007e8a:	4b50      	ldr	r3, [pc, #320]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a58      	ldr	r2, [pc, #352]	; (8007ff0 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d022      	beq.n	8007eda <SIMCOM_DMA_IrqHandler+0xc36>
 8007e94:	4b4d      	ldr	r3, [pc, #308]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a56      	ldr	r2, [pc, #344]	; (8007ff4 <SIMCOM_DMA_IrqHandler+0xd50>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01a      	beq.n	8007ed4 <SIMCOM_DMA_IrqHandler+0xc30>
 8007e9e:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a55      	ldr	r2, [pc, #340]	; (8007ff8 <SIMCOM_DMA_IrqHandler+0xd54>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d012      	beq.n	8007ece <SIMCOM_DMA_IrqHandler+0xc2a>
 8007ea8:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a53      	ldr	r2, [pc, #332]	; (8007ffc <SIMCOM_DMA_IrqHandler+0xd58>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00a      	beq.n	8007ec8 <SIMCOM_DMA_IrqHandler+0xc24>
 8007eb2:	4b46      	ldr	r3, [pc, #280]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a52      	ldr	r2, [pc, #328]	; (8008000 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d102      	bne.n	8007ec2 <SIMCOM_DMA_IrqHandler+0xc1e>
 8007ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ec0:	e01a      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ec6:	e017      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ecc:	e014      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ed2:	e011      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ed8:	e00e      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007eda:	2340      	movs	r3, #64	; 0x40
 8007edc:	e00c      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ede:	2340      	movs	r3, #64	; 0x40
 8007ee0:	e00a      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ee2:	2340      	movs	r3, #64	; 0x40
 8007ee4:	e008      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	e006      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e004      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e002      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <SIMCOM_DMA_IrqHandler+0xc54>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4a42      	ldr	r2, [pc, #264]	; (8008004 <SIMCOM_DMA_IrqHandler+0xd60>)
 8007efa:	6093      	str	r3, [r2, #8]
 8007efc:	e0e4      	b.n	80080c8 <SIMCOM_DMA_IrqHandler+0xe24>
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <SIMCOM_DMA_IrqHandler+0xd68>)
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f240 8082 	bls.w	8008010 <SIMCOM_DMA_IrqHandler+0xd6c>
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a30      	ldr	r2, [pc, #192]	; (8007fd4 <SIMCOM_DMA_IrqHandler+0xd30>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d053      	beq.n	8007fbe <SIMCOM_DMA_IrqHandler+0xd1a>
 8007f16:	4b2d      	ldr	r3, [pc, #180]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <SIMCOM_DMA_IrqHandler+0xd34>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d04c      	beq.n	8007fba <SIMCOM_DMA_IrqHandler+0xd16>
 8007f20:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <SIMCOM_DMA_IrqHandler+0xd38>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d045      	beq.n	8007fb6 <SIMCOM_DMA_IrqHandler+0xd12>
 8007f2a:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <SIMCOM_DMA_IrqHandler+0xd3c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d03e      	beq.n	8007fb2 <SIMCOM_DMA_IrqHandler+0xd0e>
 8007f34:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <SIMCOM_DMA_IrqHandler+0xd40>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d037      	beq.n	8007fae <SIMCOM_DMA_IrqHandler+0xd0a>
 8007f3e:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <SIMCOM_DMA_IrqHandler+0xd44>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d030      	beq.n	8007faa <SIMCOM_DMA_IrqHandler+0xd06>
 8007f48:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a27      	ldr	r2, [pc, #156]	; (8007fec <SIMCOM_DMA_IrqHandler+0xd48>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d029      	beq.n	8007fa6 <SIMCOM_DMA_IrqHandler+0xd02>
 8007f52:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <SIMCOM_DMA_IrqHandler+0xd4c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <SIMCOM_DMA_IrqHandler+0xcfe>
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <SIMCOM_DMA_IrqHandler+0xd50>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01a      	beq.n	8007f9c <SIMCOM_DMA_IrqHandler+0xcf8>
 8007f66:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <SIMCOM_DMA_IrqHandler+0xd54>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d012      	beq.n	8007f96 <SIMCOM_DMA_IrqHandler+0xcf2>
 8007f70:	4b16      	ldr	r3, [pc, #88]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a21      	ldr	r2, [pc, #132]	; (8007ffc <SIMCOM_DMA_IrqHandler+0xd58>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00a      	beq.n	8007f90 <SIMCOM_DMA_IrqHandler+0xcec>
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <SIMCOM_DMA_IrqHandler+0xd28>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a20      	ldr	r2, [pc, #128]	; (8008000 <SIMCOM_DMA_IrqHandler+0xd5c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d102      	bne.n	8007f8a <SIMCOM_DMA_IrqHandler+0xce6>
 8007f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f88:	e01a      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f8e:	e017      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f94:	e014      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f9a:	e011      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa0:	e00e      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	e00c      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	e00a      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	e008      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fae:	2340      	movs	r3, #64	; 0x40
 8007fb0:	e006      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e004      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e002      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <SIMCOM_DMA_IrqHandler+0xd1c>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4a01      	ldr	r2, [pc, #4]	; (8007fc8 <SIMCOM_DMA_IrqHandler+0xd24>)
 8007fc2:	60d3      	str	r3, [r2, #12]
 8007fc4:	e080      	b.n	80080c8 <SIMCOM_DMA_IrqHandler+0xe24>
 8007fc6:	bf00      	nop
 8007fc8:	40026000 	.word	0x40026000
 8007fcc:	20000314 	.word	0x20000314
 8007fd0:	40026458 	.word	0x40026458
 8007fd4:	40026010 	.word	0x40026010
 8007fd8:	40026410 	.word	0x40026410
 8007fdc:	40026070 	.word	0x40026070
 8007fe0:	40026470 	.word	0x40026470
 8007fe4:	40026028 	.word	0x40026028
 8007fe8:	40026428 	.word	0x40026428
 8007fec:	40026088 	.word	0x40026088
 8007ff0:	40026488 	.word	0x40026488
 8007ff4:	40026040 	.word	0x40026040
 8007ff8:	40026440 	.word	0x40026440
 8007ffc:	400260a0 	.word	0x400260a0
 8008000:	400264a0 	.word	0x400264a0
 8008004:	40026400 	.word	0x40026400
 8008008:	400260b8 	.word	0x400260b8
 800800c:	40026058 	.word	0x40026058
 8008010:	4b95      	ldr	r3, [pc, #596]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a95      	ldr	r2, [pc, #596]	; (800826c <SIMCOM_DMA_IrqHandler+0xfc8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d053      	beq.n	80080c2 <SIMCOM_DMA_IrqHandler+0xe1e>
 800801a:	4b93      	ldr	r3, [pc, #588]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a94      	ldr	r2, [pc, #592]	; (8008270 <SIMCOM_DMA_IrqHandler+0xfcc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d04c      	beq.n	80080be <SIMCOM_DMA_IrqHandler+0xe1a>
 8008024:	4b90      	ldr	r3, [pc, #576]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a92      	ldr	r2, [pc, #584]	; (8008274 <SIMCOM_DMA_IrqHandler+0xfd0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d045      	beq.n	80080ba <SIMCOM_DMA_IrqHandler+0xe16>
 800802e:	4b8e      	ldr	r3, [pc, #568]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a91      	ldr	r2, [pc, #580]	; (8008278 <SIMCOM_DMA_IrqHandler+0xfd4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d03e      	beq.n	80080b6 <SIMCOM_DMA_IrqHandler+0xe12>
 8008038:	4b8b      	ldr	r3, [pc, #556]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a8f      	ldr	r2, [pc, #572]	; (800827c <SIMCOM_DMA_IrqHandler+0xfd8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d037      	beq.n	80080b2 <SIMCOM_DMA_IrqHandler+0xe0e>
 8008042:	4b89      	ldr	r3, [pc, #548]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a8e      	ldr	r2, [pc, #568]	; (8008280 <SIMCOM_DMA_IrqHandler+0xfdc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d030      	beq.n	80080ae <SIMCOM_DMA_IrqHandler+0xe0a>
 800804c:	4b86      	ldr	r3, [pc, #536]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a8c      	ldr	r2, [pc, #560]	; (8008284 <SIMCOM_DMA_IrqHandler+0xfe0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d029      	beq.n	80080aa <SIMCOM_DMA_IrqHandler+0xe06>
 8008056:	4b84      	ldr	r3, [pc, #528]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a8b      	ldr	r2, [pc, #556]	; (8008288 <SIMCOM_DMA_IrqHandler+0xfe4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <SIMCOM_DMA_IrqHandler+0xe02>
 8008060:	4b81      	ldr	r3, [pc, #516]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a89      	ldr	r2, [pc, #548]	; (800828c <SIMCOM_DMA_IrqHandler+0xfe8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01a      	beq.n	80080a0 <SIMCOM_DMA_IrqHandler+0xdfc>
 800806a:	4b7f      	ldr	r3, [pc, #508]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a88      	ldr	r2, [pc, #544]	; (8008290 <SIMCOM_DMA_IrqHandler+0xfec>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d012      	beq.n	800809a <SIMCOM_DMA_IrqHandler+0xdf6>
 8008074:	4b7c      	ldr	r3, [pc, #496]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a86      	ldr	r2, [pc, #536]	; (8008294 <SIMCOM_DMA_IrqHandler+0xff0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00a      	beq.n	8008094 <SIMCOM_DMA_IrqHandler+0xdf0>
 800807e:	4b7a      	ldr	r3, [pc, #488]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a85      	ldr	r2, [pc, #532]	; (8008298 <SIMCOM_DMA_IrqHandler+0xff4>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d102      	bne.n	800808e <SIMCOM_DMA_IrqHandler+0xdea>
 8008088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800808c:	e01a      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 800808e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008092:	e017      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 8008094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008098:	e014      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 800809a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800809e:	e011      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080a4:	e00e      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080a6:	2340      	movs	r3, #64	; 0x40
 80080a8:	e00c      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	e00a      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080ae:	2340      	movs	r3, #64	; 0x40
 80080b0:	e008      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	e006      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e004      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e002      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <SIMCOM_DMA_IrqHandler+0xe20>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4a75      	ldr	r2, [pc, #468]	; (800829c <SIMCOM_DMA_IrqHandler+0xff8>)
 80080c6:	6093      	str	r3, [r2, #8]
        __HAL_DMA_CLEAR_FLAG(&hdma_usart1_rx, __HAL_DMA_GET_DME_FLAG_INDEX(&hdma_usart1_rx));
 80080c8:	4b67      	ldr	r3, [pc, #412]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	4b74      	ldr	r3, [pc, #464]	; (80082a0 <SIMCOM_DMA_IrqHandler+0xffc>)
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d960      	bls.n	8008196 <SIMCOM_DMA_IrqHandler+0xef2>
 80080d4:	4b64      	ldr	r3, [pc, #400]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a64      	ldr	r2, [pc, #400]	; (800826c <SIMCOM_DMA_IrqHandler+0xfc8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d057      	beq.n	800818e <SIMCOM_DMA_IrqHandler+0xeea>
 80080de:	4b62      	ldr	r3, [pc, #392]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a63      	ldr	r2, [pc, #396]	; (8008270 <SIMCOM_DMA_IrqHandler+0xfcc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d050      	beq.n	800818a <SIMCOM_DMA_IrqHandler+0xee6>
 80080e8:	4b5f      	ldr	r3, [pc, #380]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a61      	ldr	r2, [pc, #388]	; (8008274 <SIMCOM_DMA_IrqHandler+0xfd0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d049      	beq.n	8008186 <SIMCOM_DMA_IrqHandler+0xee2>
 80080f2:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a60      	ldr	r2, [pc, #384]	; (8008278 <SIMCOM_DMA_IrqHandler+0xfd4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d042      	beq.n	8008182 <SIMCOM_DMA_IrqHandler+0xede>
 80080fc:	4b5a      	ldr	r3, [pc, #360]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5e      	ldr	r2, [pc, #376]	; (800827c <SIMCOM_DMA_IrqHandler+0xfd8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d03a      	beq.n	800817c <SIMCOM_DMA_IrqHandler+0xed8>
 8008106:	4b58      	ldr	r3, [pc, #352]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5d      	ldr	r2, [pc, #372]	; (8008280 <SIMCOM_DMA_IrqHandler+0xfdc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d032      	beq.n	8008176 <SIMCOM_DMA_IrqHandler+0xed2>
 8008110:	4b55      	ldr	r3, [pc, #340]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a5b      	ldr	r2, [pc, #364]	; (8008284 <SIMCOM_DMA_IrqHandler+0xfe0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d02a      	beq.n	8008170 <SIMCOM_DMA_IrqHandler+0xecc>
 800811a:	4b53      	ldr	r3, [pc, #332]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a5a      	ldr	r2, [pc, #360]	; (8008288 <SIMCOM_DMA_IrqHandler+0xfe4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d022      	beq.n	800816a <SIMCOM_DMA_IrqHandler+0xec6>
 8008124:	4b50      	ldr	r3, [pc, #320]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a58      	ldr	r2, [pc, #352]	; (800828c <SIMCOM_DMA_IrqHandler+0xfe8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01a      	beq.n	8008164 <SIMCOM_DMA_IrqHandler+0xec0>
 800812e:	4b4e      	ldr	r3, [pc, #312]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a57      	ldr	r2, [pc, #348]	; (8008290 <SIMCOM_DMA_IrqHandler+0xfec>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d012      	beq.n	800815e <SIMCOM_DMA_IrqHandler+0xeba>
 8008138:	4b4b      	ldr	r3, [pc, #300]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a55      	ldr	r2, [pc, #340]	; (8008294 <SIMCOM_DMA_IrqHandler+0xff0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00a      	beq.n	8008158 <SIMCOM_DMA_IrqHandler+0xeb4>
 8008142:	4b49      	ldr	r3, [pc, #292]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a54      	ldr	r2, [pc, #336]	; (8008298 <SIMCOM_DMA_IrqHandler+0xff4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d102      	bne.n	8008152 <SIMCOM_DMA_IrqHandler+0xeae>
 800814c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008150:	e01e      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008156:	e01b      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800815c:	e018      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 800815e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008162:	e015      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008168:	e012      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 800816a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800816e:	e00f      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008174:	e00c      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800817a:	e009      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 800817c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008180:	e006      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008182:	2304      	movs	r3, #4
 8008184:	e004      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 8008186:	2304      	movs	r3, #4
 8008188:	e002      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 800818a:	2304      	movs	r3, #4
 800818c:	e000      	b.n	8008190 <SIMCOM_DMA_IrqHandler+0xeec>
 800818e:	2304      	movs	r3, #4
 8008190:	4a44      	ldr	r2, [pc, #272]	; (80082a4 <SIMCOM_DMA_IrqHandler+0x1000>)
 8008192:	60d3      	str	r3, [r2, #12]
 8008194:	e151      	b.n	800843a <SIMCOM_DMA_IrqHandler+0x1196>
 8008196:	4b34      	ldr	r3, [pc, #208]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	4b42      	ldr	r3, [pc, #264]	; (80082a8 <SIMCOM_DMA_IrqHandler+0x1004>)
 800819e:	429a      	cmp	r2, r3
 80081a0:	f240 8084 	bls.w	80082ac <SIMCOM_DMA_IrqHandler+0x1008>
 80081a4:	4b30      	ldr	r3, [pc, #192]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a30      	ldr	r2, [pc, #192]	; (800826c <SIMCOM_DMA_IrqHandler+0xfc8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d057      	beq.n	800825e <SIMCOM_DMA_IrqHandler+0xfba>
 80081ae:	4b2e      	ldr	r3, [pc, #184]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a2f      	ldr	r2, [pc, #188]	; (8008270 <SIMCOM_DMA_IrqHandler+0xfcc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d050      	beq.n	800825a <SIMCOM_DMA_IrqHandler+0xfb6>
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <SIMCOM_DMA_IrqHandler+0xfd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d049      	beq.n	8008256 <SIMCOM_DMA_IrqHandler+0xfb2>
 80081c2:	4b29      	ldr	r3, [pc, #164]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a2c      	ldr	r2, [pc, #176]	; (8008278 <SIMCOM_DMA_IrqHandler+0xfd4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d042      	beq.n	8008252 <SIMCOM_DMA_IrqHandler+0xfae>
 80081cc:	4b26      	ldr	r3, [pc, #152]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <SIMCOM_DMA_IrqHandler+0xfd8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d03a      	beq.n	800824c <SIMCOM_DMA_IrqHandler+0xfa8>
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a29      	ldr	r2, [pc, #164]	; (8008280 <SIMCOM_DMA_IrqHandler+0xfdc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d032      	beq.n	8008246 <SIMCOM_DMA_IrqHandler+0xfa2>
 80081e0:	4b21      	ldr	r3, [pc, #132]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a27      	ldr	r2, [pc, #156]	; (8008284 <SIMCOM_DMA_IrqHandler+0xfe0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d02a      	beq.n	8008240 <SIMCOM_DMA_IrqHandler+0xf9c>
 80081ea:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a26      	ldr	r2, [pc, #152]	; (8008288 <SIMCOM_DMA_IrqHandler+0xfe4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <SIMCOM_DMA_IrqHandler+0xf96>
 80081f4:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a24      	ldr	r2, [pc, #144]	; (800828c <SIMCOM_DMA_IrqHandler+0xfe8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d01a      	beq.n	8008234 <SIMCOM_DMA_IrqHandler+0xf90>
 80081fe:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a23      	ldr	r2, [pc, #140]	; (8008290 <SIMCOM_DMA_IrqHandler+0xfec>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d012      	beq.n	800822e <SIMCOM_DMA_IrqHandler+0xf8a>
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a21      	ldr	r2, [pc, #132]	; (8008294 <SIMCOM_DMA_IrqHandler+0xff0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00a      	beq.n	8008228 <SIMCOM_DMA_IrqHandler+0xf84>
 8008212:	4b15      	ldr	r3, [pc, #84]	; (8008268 <SIMCOM_DMA_IrqHandler+0xfc4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a20      	ldr	r2, [pc, #128]	; (8008298 <SIMCOM_DMA_IrqHandler+0xff4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d102      	bne.n	8008222 <SIMCOM_DMA_IrqHandler+0xf7e>
 800821c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008220:	e01e      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008226:	e01b      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800822c:	e018      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 800822e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008232:	e015      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008238:	e012      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 800823a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823e:	e00f      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008244:	e00c      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824a:	e009      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 800824c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008250:	e006      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008252:	2304      	movs	r3, #4
 8008254:	e004      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 8008256:	2304      	movs	r3, #4
 8008258:	e002      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 800825a:	2304      	movs	r3, #4
 800825c:	e000      	b.n	8008260 <SIMCOM_DMA_IrqHandler+0xfbc>
 800825e:	2304      	movs	r3, #4
 8008260:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <SIMCOM_DMA_IrqHandler+0x1000>)
 8008262:	6093      	str	r3, [r2, #8]
 8008264:	e0e9      	b.n	800843a <SIMCOM_DMA_IrqHandler+0x1196>
 8008266:	bf00      	nop
 8008268:	20000314 	.word	0x20000314
 800826c:	40026010 	.word	0x40026010
 8008270:	40026410 	.word	0x40026410
 8008274:	40026070 	.word	0x40026070
 8008278:	40026470 	.word	0x40026470
 800827c:	40026028 	.word	0x40026028
 8008280:	40026428 	.word	0x40026428
 8008284:	40026088 	.word	0x40026088
 8008288:	40026488 	.word	0x40026488
 800828c:	40026040 	.word	0x40026040
 8008290:	40026440 	.word	0x40026440
 8008294:	400260a0 	.word	0x400260a0
 8008298:	400264a0 	.word	0x400264a0
 800829c:	40026000 	.word	0x40026000
 80082a0:	40026458 	.word	0x40026458
 80082a4:	40026400 	.word	0x40026400
 80082a8:	400260b8 	.word	0x400260b8
 80082ac:	4b66      	ldr	r3, [pc, #408]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4b66      	ldr	r3, [pc, #408]	; (800844c <SIMCOM_DMA_IrqHandler+0x11a8>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d960      	bls.n	800837a <SIMCOM_DMA_IrqHandler+0x10d6>
 80082b8:	4b63      	ldr	r3, [pc, #396]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a64      	ldr	r2, [pc, #400]	; (8008450 <SIMCOM_DMA_IrqHandler+0x11ac>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d057      	beq.n	8008372 <SIMCOM_DMA_IrqHandler+0x10ce>
 80082c2:	4b61      	ldr	r3, [pc, #388]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a63      	ldr	r2, [pc, #396]	; (8008454 <SIMCOM_DMA_IrqHandler+0x11b0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d050      	beq.n	800836e <SIMCOM_DMA_IrqHandler+0x10ca>
 80082cc:	4b5e      	ldr	r3, [pc, #376]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a61      	ldr	r2, [pc, #388]	; (8008458 <SIMCOM_DMA_IrqHandler+0x11b4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d049      	beq.n	800836a <SIMCOM_DMA_IrqHandler+0x10c6>
 80082d6:	4b5c      	ldr	r3, [pc, #368]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a60      	ldr	r2, [pc, #384]	; (800845c <SIMCOM_DMA_IrqHandler+0x11b8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d042      	beq.n	8008366 <SIMCOM_DMA_IrqHandler+0x10c2>
 80082e0:	4b59      	ldr	r3, [pc, #356]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a5e      	ldr	r2, [pc, #376]	; (8008460 <SIMCOM_DMA_IrqHandler+0x11bc>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d03a      	beq.n	8008360 <SIMCOM_DMA_IrqHandler+0x10bc>
 80082ea:	4b57      	ldr	r3, [pc, #348]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a5d      	ldr	r2, [pc, #372]	; (8008464 <SIMCOM_DMA_IrqHandler+0x11c0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d032      	beq.n	800835a <SIMCOM_DMA_IrqHandler+0x10b6>
 80082f4:	4b54      	ldr	r3, [pc, #336]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a5b      	ldr	r2, [pc, #364]	; (8008468 <SIMCOM_DMA_IrqHandler+0x11c4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d02a      	beq.n	8008354 <SIMCOM_DMA_IrqHandler+0x10b0>
 80082fe:	4b52      	ldr	r3, [pc, #328]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a5a      	ldr	r2, [pc, #360]	; (800846c <SIMCOM_DMA_IrqHandler+0x11c8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d022      	beq.n	800834e <SIMCOM_DMA_IrqHandler+0x10aa>
 8008308:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a58      	ldr	r2, [pc, #352]	; (8008470 <SIMCOM_DMA_IrqHandler+0x11cc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01a      	beq.n	8008348 <SIMCOM_DMA_IrqHandler+0x10a4>
 8008312:	4b4d      	ldr	r3, [pc, #308]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a57      	ldr	r2, [pc, #348]	; (8008474 <SIMCOM_DMA_IrqHandler+0x11d0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d012      	beq.n	8008342 <SIMCOM_DMA_IrqHandler+0x109e>
 800831c:	4b4a      	ldr	r3, [pc, #296]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a55      	ldr	r2, [pc, #340]	; (8008478 <SIMCOM_DMA_IrqHandler+0x11d4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00a      	beq.n	800833c <SIMCOM_DMA_IrqHandler+0x1098>
 8008326:	4b48      	ldr	r3, [pc, #288]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a54      	ldr	r2, [pc, #336]	; (800847c <SIMCOM_DMA_IrqHandler+0x11d8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d102      	bne.n	8008336 <SIMCOM_DMA_IrqHandler+0x1092>
 8008330:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008334:	e01e      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800833a:	e01b      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 800833c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008340:	e018      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008346:	e015      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800834c:	e012      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 800834e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008352:	e00f      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008358:	e00c      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 800835a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800835e:	e009      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008364:	e006      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008366:	2304      	movs	r3, #4
 8008368:	e004      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 800836a:	2304      	movs	r3, #4
 800836c:	e002      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 800836e:	2304      	movs	r3, #4
 8008370:	e000      	b.n	8008374 <SIMCOM_DMA_IrqHandler+0x10d0>
 8008372:	2304      	movs	r3, #4
 8008374:	4a42      	ldr	r2, [pc, #264]	; (8008480 <SIMCOM_DMA_IrqHandler+0x11dc>)
 8008376:	60d3      	str	r3, [r2, #12]
 8008378:	e05f      	b.n	800843a <SIMCOM_DMA_IrqHandler+0x1196>
 800837a:	4b33      	ldr	r3, [pc, #204]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a34      	ldr	r2, [pc, #208]	; (8008450 <SIMCOM_DMA_IrqHandler+0x11ac>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d057      	beq.n	8008434 <SIMCOM_DMA_IrqHandler+0x1190>
 8008384:	4b30      	ldr	r3, [pc, #192]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a32      	ldr	r2, [pc, #200]	; (8008454 <SIMCOM_DMA_IrqHandler+0x11b0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d050      	beq.n	8008430 <SIMCOM_DMA_IrqHandler+0x118c>
 800838e:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a31      	ldr	r2, [pc, #196]	; (8008458 <SIMCOM_DMA_IrqHandler+0x11b4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d049      	beq.n	800842c <SIMCOM_DMA_IrqHandler+0x1188>
 8008398:	4b2b      	ldr	r3, [pc, #172]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2f      	ldr	r2, [pc, #188]	; (800845c <SIMCOM_DMA_IrqHandler+0x11b8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d042      	beq.n	8008428 <SIMCOM_DMA_IrqHandler+0x1184>
 80083a2:	4b29      	ldr	r3, [pc, #164]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2e      	ldr	r2, [pc, #184]	; (8008460 <SIMCOM_DMA_IrqHandler+0x11bc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d03a      	beq.n	8008422 <SIMCOM_DMA_IrqHandler+0x117e>
 80083ac:	4b26      	ldr	r3, [pc, #152]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2c      	ldr	r2, [pc, #176]	; (8008464 <SIMCOM_DMA_IrqHandler+0x11c0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d032      	beq.n	800841c <SIMCOM_DMA_IrqHandler+0x1178>
 80083b6:	4b24      	ldr	r3, [pc, #144]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a2b      	ldr	r2, [pc, #172]	; (8008468 <SIMCOM_DMA_IrqHandler+0x11c4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02a      	beq.n	8008416 <SIMCOM_DMA_IrqHandler+0x1172>
 80083c0:	4b21      	ldr	r3, [pc, #132]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <SIMCOM_DMA_IrqHandler+0x11c8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <SIMCOM_DMA_IrqHandler+0x116c>
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a28      	ldr	r2, [pc, #160]	; (8008470 <SIMCOM_DMA_IrqHandler+0x11cc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d01a      	beq.n	800840a <SIMCOM_DMA_IrqHandler+0x1166>
 80083d4:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a26      	ldr	r2, [pc, #152]	; (8008474 <SIMCOM_DMA_IrqHandler+0x11d0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d012      	beq.n	8008404 <SIMCOM_DMA_IrqHandler+0x1160>
 80083de:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a25      	ldr	r2, [pc, #148]	; (8008478 <SIMCOM_DMA_IrqHandler+0x11d4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00a      	beq.n	80083fe <SIMCOM_DMA_IrqHandler+0x115a>
 80083e8:	4b17      	ldr	r3, [pc, #92]	; (8008448 <SIMCOM_DMA_IrqHandler+0x11a4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a23      	ldr	r2, [pc, #140]	; (800847c <SIMCOM_DMA_IrqHandler+0x11d8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d102      	bne.n	80083f8 <SIMCOM_DMA_IrqHandler+0x1154>
 80083f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80083f6:	e01e      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 80083f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083fc:	e01b      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 80083fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008402:	e018      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008408:	e015      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 800840a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800840e:	e012      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008414:	e00f      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800841a:	e00c      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 800841c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008420:	e009      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008426:	e006      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008428:	2304      	movs	r3, #4
 800842a:	e004      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 800842c:	2304      	movs	r3, #4
 800842e:	e002      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008430:	2304      	movs	r3, #4
 8008432:	e000      	b.n	8008436 <SIMCOM_DMA_IrqHandler+0x1192>
 8008434:	2304      	movs	r3, #4
 8008436:	4a12      	ldr	r2, [pc, #72]	; (8008480 <SIMCOM_DMA_IrqHandler+0x11dc>)
 8008438:	6093      	str	r3, [r2, #8]
        HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 800843a:	2280      	movs	r2, #128	; 0x80
 800843c:	4911      	ldr	r1, [pc, #68]	; (8008484 <SIMCOM_DMA_IrqHandler+0x11e0>)
 800843e:	4812      	ldr	r0, [pc, #72]	; (8008488 <SIMCOM_DMA_IrqHandler+0x11e4>)
 8008440:	f7fd ffc4 	bl	80063cc <HAL_UART_Receive_DMA>
}
 8008444:	bf00      	nop
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000314 	.word	0x20000314
 800844c:	40026058 	.word	0x40026058
 8008450:	40026010 	.word	0x40026010
 8008454:	40026410 	.word	0x40026410
 8008458:	40026070 	.word	0x40026070
 800845c:	40026470 	.word	0x40026470
 8008460:	40026028 	.word	0x40026028
 8008464:	40026428 	.word	0x40026428
 8008468:	40026088 	.word	0x40026088
 800846c:	40026488 	.word	0x40026488
 8008470:	40026040 	.word	0x40026040
 8008474:	40026440 	.word	0x40026440
 8008478:	400260a0 	.word	0x400260a0
 800847c:	400264a0 	.word	0x400264a0
 8008480:	40026000 	.word	0x40026000
 8008484:	20000224 	.word	0x20000224
 8008488:	20000374 	.word	0x20000374

0800848c <SIMCOM_DMA_Init>:

void SIMCOM_DMA_Init(void) {
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // enable idle line interrupt
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <SIMCOM_DMA_Init+0x44>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <SIMCOM_DMA_Init+0x44>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0210 	orr.w	r2, r2, #16
 800849e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);    // enable DMA Tx cplt interrupt
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <SIMCOM_DMA_Init+0x48>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <SIMCOM_DMA_Init+0x48>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0210 	orr.w	r2, r2, #16
 80084ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_HT);    // enable half complete interrupt
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <SIMCOM_DMA_Init+0x48>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <SIMCOM_DMA_Init+0x48>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	601a      	str	r2, [r3, #0]

    /* Start DMA transfer */
    HAL_UART_Receive_DMA(&huart1, (uint8_t*) SIMCOM_DMA_RX, SIMCOM_DMA_RX_SZ);
 80084c0:	2280      	movs	r2, #128	; 0x80
 80084c2:	4905      	ldr	r1, [pc, #20]	; (80084d8 <SIMCOM_DMA_Init+0x4c>)
 80084c4:	4802      	ldr	r0, [pc, #8]	; (80084d0 <SIMCOM_DMA_Init+0x44>)
 80084c6:	f7fd ff81 	bl	80063cc <HAL_UART_Receive_DMA>
}
 80084ca:	bf00      	nop
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000374 	.word	0x20000374
 80084d4:	20000314 	.word	0x20000314
 80084d8:	20000224 	.word	0x20000224

080084dc <SIMCOM_Check_Buffer>:

static void SIMCOM_Check_Buffer(void) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer */
    pos = SIMCOM_DMA_RX_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <SIMCOM_Check_Buffer+0x80>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80084ec:	607b      	str	r3, [r7, #4]
    if (pos != old_pos) { /* Check change in received data */
 80084ee:	4b1c      	ldr	r3, [pc, #112]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d023      	beq.n	8008540 <SIMCOM_Check_Buffer+0x64>
        if (pos > old_pos) { /* Current position is over previous one */
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d90b      	bls.n	800851a <SIMCOM_Check_Buffer+0x3e>
            /* We are in "linear" mode */
            /* Process data directly by subtracting "pointers" */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], pos - old_pos);
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a17      	ldr	r2, [pc, #92]	; (8008564 <SIMCOM_Check_Buffer+0x88>)
 8008508:	1898      	adds	r0, r3, r2
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	4619      	mov	r1, r3
 8008514:	f000 f828 	bl	8008568 <SIMCOM_Fill_Buffer>
 8008518:	e012      	b.n	8008540 <SIMCOM_Check_Buffer+0x64>
        } else {
            /* We are in "overflow" mode */
            /* First process data to the end of buffer */
            SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[old_pos], SIMCOM_DMA_RX_SZ - old_pos);
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a11      	ldr	r2, [pc, #68]	; (8008564 <SIMCOM_Check_Buffer+0x88>)
 8008520:	441a      	add	r2, r3
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f000 f81b 	bl	8008568 <SIMCOM_Fill_Buffer>
            /* Check and continue with beginning of buffer */
            if (pos > 0) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <SIMCOM_Check_Buffer+0x64>
                SIMCOM_Fill_Buffer(&SIMCOM_DMA_RX[0], pos);
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	480a      	ldr	r0, [pc, #40]	; (8008564 <SIMCOM_Check_Buffer+0x88>)
 800853c:	f000 f814 	bl	8008568 <SIMCOM_Fill_Buffer>
            }
        }
    }
    old_pos = pos; /* Save current position as old */
 8008540:	4a07      	ldr	r2, [pc, #28]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6013      	str	r3, [r2, #0]

    /* Check and manually update if we reached end of buffer */
    if (old_pos == SIMCOM_DMA_RX_SZ) {
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b80      	cmp	r3, #128	; 0x80
 800854c:	d102      	bne.n	8008554 <SIMCOM_Check_Buffer+0x78>
        old_pos = 0;
 800854e:	4b04      	ldr	r3, [pc, #16]	; (8008560 <SIMCOM_Check_Buffer+0x84>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
    }
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000314 	.word	0x20000314
 8008560:	200002a8 	.word	0x200002a8
 8008564:	20000224 	.word	0x20000224

08008568 <SIMCOM_Fill_Buffer>:

static void SIMCOM_Fill_Buffer(const void *data, size_t len) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
    /* Write data to buffer */
    memcpy(&SIMCOM_UART_RX[simcom_write], data, len);
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <SIMCOM_Fill_Buffer+0x30>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <SIMCOM_Fill_Buffer+0x34>)
 8008578:	4413      	add	r3, r2
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	f002 f935 	bl	800a7ee <memcpy>
    simcom_write += len;
 8008584:	4b04      	ldr	r3, [pc, #16]	; (8008598 <SIMCOM_Fill_Buffer+0x30>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	4413      	add	r3, r2
 800858c:	4a02      	ldr	r2, [pc, #8]	; (8008598 <SIMCOM_Fill_Buffer+0x30>)
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	200002a4 	.word	0x200002a4
 800859c:	20000400 	.word	0x20000400

080085a0 <SIMCOM_Reset_Buffer>:

void SIMCOM_Reset_Buffer(void) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
    // clear rx buffer
    memset(SIMCOM_UART_RX, 0x00, simcom_write);
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <SIMCOM_Reset_Buffer+0x1c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	2100      	movs	r1, #0
 80085ac:	4804      	ldr	r0, [pc, #16]	; (80085c0 <SIMCOM_Reset_Buffer+0x20>)
 80085ae:	f002 f929 	bl	800a804 <memset>
    simcom_write = 0;
 80085b2:	4b02      	ldr	r3, [pc, #8]	; (80085bc <SIMCOM_Reset_Buffer+0x1c>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
}
 80085b8:	bf00      	nop
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200002a4 	.word	0x200002a4
 80085c0:	20000400 	.word	0x20000400

080085c4 <SIMCOM_Transmit>:

uint8_t SIMCOM_Transmit(char *pData, uint16_t Size) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	807b      	strh	r3, [r7, #2]
    SIMCOM_Reset_Buffer();
 80085d0:	f7ff ffe6 	bl	80085a0 <SIMCOM_Reset_Buffer>

    return (HAL_UART_Transmit(&huart1, (uint8_t*) pData, Size, HAL_MAX_DELAY) == HAL_OK);
 80085d4:	887a      	ldrh	r2, [r7, #2]
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4806      	ldr	r0, [pc, #24]	; (80085f8 <SIMCOM_Transmit+0x34>)
 80085de:	f7fd fe5c 	bl	800629a <HAL_UART_Transmit>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bf0c      	ite	eq
 80085e8:	2301      	moveq	r3, #1
 80085ea:	2300      	movne	r3, #0
 80085ec:	b2db      	uxtb	r3, r3
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000374 	.word	0x20000374

080085fc <AT_CommandEchoMode>:
static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size);
static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt);
//static float AT_ParseFloat(const char *ptr, uint8_t *cnt);

/* Public functions implementation --------------------------------------------*/
SIMCOM_RESULT AT_CommandEchoMode(uint8_t state) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
    char cmd[6];

    Simcom_Lock();
 800860a:	f001 fba8 	bl	8009d5e <Simcom_Lock>
    // Write
    sprintf(cmd, "ATE%d\r", state);
 800860e:	79fa      	ldrb	r2, [r7, #7]
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	490a      	ldr	r1, [pc, #40]	; (8008640 <AT_CommandEchoMode+0x44>)
 8008616:	4618      	mov	r0, r3
 8008618:	f002 f8fc 	bl	800a814 <siprintf>
    p = AT_CmdWrite(cmd, 500, NULL);
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	2200      	movs	r2, #0
 8008622:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ff1c 	bl	8009464 <AT_CmdWrite>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
    Simcom_Unlock();
 8008630:	f001 fb9c 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	0800b3bc 	.word	0x0800b3bc
 8008644:	00000000 	.word	0x00000000

08008648 <AT_SignalQualityReport>:

SIMCOM_RESULT AT_SignalQualityReport(at_csq_t *signal) {
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008650:	2300      	movs	r3, #0
 8008652:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt, len = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	75bb      	strb	r3, [r7, #22]
    char *str = NULL;
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
    float dBm;

    Simcom_Lock();
 800865c:	f001 fb7f 	bl	8009d5e <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSQ\r", 500, "+CSQ: ", &str);
 8008660:	f107 0308 	add.w	r3, r7, #8
 8008664:	4a48      	ldr	r2, [pc, #288]	; (8008788 <AT_SignalQualityReport+0x140>)
 8008666:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800866a:	4848      	ldr	r0, [pc, #288]	; (800878c <AT_SignalQualityReport+0x144>)
 800866c:	f000 ff18 	bl	80094a0 <AT_CmdRead>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]
    if (p > 0) {
 8008674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd77      	ble.n	800876c <AT_SignalQualityReport+0x124>
        signal->rssi = AT_ParseNumber(&str[len], &cnt);
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	7dbb      	ldrb	r3, [r7, #22]
 8008680:	4413      	add	r3, r2
 8008682:	f107 020f 	add.w	r2, r7, #15
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f000 ff8b 	bl	80095a4 <AT_ParseNumber>
 800868e:	4603      	mov	r3, r0
 8008690:	b2da      	uxtb	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	701a      	strb	r2, [r3, #0]
        len += cnt + 1;
 8008696:	7bfa      	ldrb	r2, [r7, #15]
 8008698:	7dbb      	ldrb	r3, [r7, #22]
 800869a:	4413      	add	r3, r2
 800869c:	b2db      	uxtb	r3, r3
 800869e:	3301      	adds	r3, #1
 80086a0:	75bb      	strb	r3, [r7, #22]
        signal->ber = AT_ParseNumber(&str[len], NULL);
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	7dbb      	ldrb	r3, [r7, #22]
 80086a6:	4413      	add	r3, r2
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 ff7a 	bl	80095a4 <AT_ParseNumber>
 80086b0:	4603      	mov	r3, r0
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	705a      	strb	r2, [r3, #1]

        // Formatting
        {
            // Handle not detectable value
            if (signal->rssi > 31) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b1f      	cmp	r3, #31
 80086be:	d902      	bls.n	80086c6 <AT_SignalQualityReport+0x7e>
                signal->rssi = 0;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
            }

            // Scale RSSI to dBm
            dBm = (signal->rssi * 63.0 / 31.0) - 115.0;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 ff62 	bl	8000594 <__aeabi_i2d>
 80086d0:	f04f 0200 	mov.w	r2, #0
 80086d4:	4b2e      	ldr	r3, [pc, #184]	; (8008790 <AT_SignalQualityReport+0x148>)
 80086d6:	f7f7 ffc7 	bl	8000668 <__aeabi_dmul>
 80086da:	4603      	mov	r3, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	4618      	mov	r0, r3
 80086e0:	4621      	mov	r1, r4
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	4b2b      	ldr	r3, [pc, #172]	; (8008794 <AT_SignalQualityReport+0x14c>)
 80086e8:	f7f8 f8e8 	bl	80008bc <__aeabi_ddiv>
 80086ec:	4603      	mov	r3, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4618      	mov	r0, r3
 80086f2:	4621      	mov	r1, r4
 80086f4:	a322      	add	r3, pc, #136	; (adr r3, 8008780 <AT_SignalQualityReport+0x138>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdfd 	bl	80002f8 <__aeabi_dsub>
 80086fe:	4603      	mov	r3, r0
 8008700:	460c      	mov	r4, r1
 8008702:	4618      	mov	r0, r3
 8008704:	4621      	mov	r1, r4
 8008706:	f7f8 f9e1 	bl	8000acc <__aeabi_d2f>
 800870a:	4603      	mov	r3, r0
 800870c:	613b      	str	r3, [r7, #16]
            // Scale dBm to percentage
            signal->percent = (dBm + 115.0) * 100.0 / 63.0;
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f7f7 ff52 	bl	80005b8 <__aeabi_f2d>
 8008714:	a31a      	add	r3, pc, #104	; (adr r3, 8008780 <AT_SignalQualityReport+0x138>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 fdef 	bl	80002fc <__adddf3>
 800871e:	4603      	mov	r3, r0
 8008720:	460c      	mov	r4, r1
 8008722:	4618      	mov	r0, r3
 8008724:	4621      	mov	r1, r4
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <AT_SignalQualityReport+0x150>)
 800872c:	f7f7 ff9c 	bl	8000668 <__aeabi_dmul>
 8008730:	4603      	mov	r3, r0
 8008732:	460c      	mov	r4, r1
 8008734:	4618      	mov	r0, r3
 8008736:	4621      	mov	r1, r4
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	4b14      	ldr	r3, [pc, #80]	; (8008790 <AT_SignalQualityReport+0x148>)
 800873e:	f7f8 f8bd 	bl	80008bc <__aeabi_ddiv>
 8008742:	4603      	mov	r3, r0
 8008744:	460c      	mov	r4, r1
 8008746:	4618      	mov	r0, r3
 8008748:	4621      	mov	r1, r4
 800874a:	f7f8 f99f 	bl	8000a8c <__aeabi_d2uiz>
 800874e:	4603      	mov	r3, r0
 8008750:	b2da      	uxtb	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	709a      	strb	r2, [r3, #2]

            // debugging
            LOG_Str("\nSimcom:RSSI = ");
 8008756:	4811      	ldr	r0, [pc, #68]	; (800879c <AT_SignalQualityReport+0x154>)
 8008758:	f001 f9c0 	bl	8009adc <LOG_Str>
            LOG_Int(signal->percent);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	789b      	ldrb	r3, [r3, #2]
 8008760:	4618      	mov	r0, r3
 8008762:	f001 f943 	bl	80099ec <LOG_Int>
            LOG_StrLn("%");
 8008766:	480e      	ldr	r0, [pc, #56]	; (80087a0 <AT_SignalQualityReport+0x158>)
 8008768:	f001 f9d0 	bl	8009b0c <LOG_StrLn>
        }
    }
    Simcom_Unlock();
 800876c:	f001 fafe 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	bd90      	pop	{r4, r7, pc}
 800877c:	f3af 8000 	nop.w
 8008780:	00000000 	.word	0x00000000
 8008784:	405cc000 	.word	0x405cc000
 8008788:	0800b3c4 	.word	0x0800b3c4
 800878c:	0800b3cc 	.word	0x0800b3cc
 8008790:	404f8000 	.word	0x404f8000
 8008794:	403f0000 	.word	0x403f0000
 8008798:	40590000 	.word	0x40590000
 800879c:	0800b3d4 	.word	0x0800b3d4
 80087a0:	0800b3e4 	.word	0x0800b3e4

080087a4 <AT_RadioAccessTechnology>:
    Simcom_Unlock();

    return p;
}

SIMCOM_RESULT AT_RadioAccessTechnology(AT_MODE mode, at_cnmp_t *param) {
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t cnt, len = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *str = NULL, cmd[14];
 80087bc:	2300      	movs	r3, #0
 80087be:	623b      	str	r3, [r7, #32]

    // Copy by value
    at_cnmp_t tmp = *param;
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087ca:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 80087ce:	f001 fac6 	bl	8009d5e <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CNMP?\r", 500, "+CNMP: ", &str);
 80087d2:	f107 0320 	add.w	r3, r7, #32
 80087d6:	4a3a      	ldr	r2, [pc, #232]	; (80088c0 <AT_RadioAccessTechnology+0x11c>)
 80087d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80087dc:	4839      	ldr	r0, [pc, #228]	; (80088c4 <AT_RadioAccessTechnology+0x120>)
 80087de:	f000 fe5f 	bl	80094a0 <AT_CmdRead>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (p > 0) {
 80087e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd5e      	ble.n	80088ae <AT_RadioAccessTechnology+0x10a>
        param->mode = AT_ParseNumber(&str[len], &cnt);
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087f6:	4413      	add	r3, r2
 80087f8:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fed0 	bl	80095a4 <AT_ParseNumber>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	601a      	str	r2, [r3, #0]
        if (param->mode == CNMP_ACT_AUTO) {
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d116      	bne.n	8008842 <AT_RadioAccessTechnology+0x9e>
            len += cnt + 1;
 8008814:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800881c:	4413      	add	r3, r2
 800881e:	b2db      	uxtb	r3, r3
 8008820:	3301      	adds	r3, #1
 8008822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            param->preferred = AT_ParseNumber(&str[len], &cnt);
 8008826:	6a3a      	ldr	r2, [r7, #32]
 8008828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800882c:	4413      	add	r3, r2
 800882e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f000 feb5 	bl	80095a4 <AT_ParseNumber>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	605a      	str	r2, [r3, #4]
        }

        // Write
        if (mode == ATW) {
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d12a      	bne.n	800889e <AT_RadioAccessTechnology+0xfa>
            if (memcmp(&tmp, param, sizeof(at_cnmp_t)) != 0) {
 8008848:	f107 0308 	add.w	r3, r7, #8
 800884c:	2208      	movs	r2, #8
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f001 ffbd 	bl	800a7d0 <memcmp>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d028      	beq.n	80088ae <AT_RadioAccessTechnology+0x10a>
                if (tmp.mode == CNMP_ACT_AUTO) {
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d109      	bne.n	8008876 <AT_RadioAccessTechnology+0xd2>
                    sprintf(cmd, "AT+CNMP=%d%d\r", param->mode, param->preferred);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f107 0010 	add.w	r0, r7, #16
 800886e:	4916      	ldr	r1, [pc, #88]	; (80088c8 <AT_RadioAccessTechnology+0x124>)
 8008870:	f001 ffd0 	bl	800a814 <siprintf>
 8008874:	e007      	b.n	8008886 <AT_RadioAccessTechnology+0xe2>
                } else {
                    sprintf(cmd, "AT+CNMP=%d\r", param->mode);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f107 0310 	add.w	r3, r7, #16
 800887e:	4913      	ldr	r1, [pc, #76]	; (80088cc <AT_RadioAccessTechnology+0x128>)
 8008880:	4618      	mov	r0, r3
 8008882:	f001 ffc7 	bl	800a814 <siprintf>
                }

                p = AT_CmdWrite(cmd, 10000, NULL);
 8008886:	f107 0310 	add.w	r3, r7, #16
 800888a:	2200      	movs	r2, #0
 800888c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fde7 	bl	8009464 <AT_CmdWrite>
 8008896:	4603      	mov	r3, r0
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800889c:	e007      	b.n	80088ae <AT_RadioAccessTechnology+0x10a>
            }
        } else {
            *param = tmp;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088aa:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 80088ae:	f001 fa5d 	bl	8009d6c <Simcom_Unlock>

    return p;
 80088b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	0800b4b8 	.word	0x0800b4b8
 80088c4:	0800b4c0 	.word	0x0800b4c0
 80088c8:	0800b4cc 	.word	0x0800b4cc
 80088cc:	0800b4dc 	.word	0x0800b4dc

080088d0 <AT_NetworkAttachedStatus>:

SIMCOM_RESULT AT_NetworkAttachedStatus(AT_MODE mode, at_csact_t *param) {
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b08d      	sub	sp, #52	; 0x34
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t cnt, len = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char *str = NULL, cmd[14];
 80088e8:	2300      	movs	r3, #0
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28

    // Copy by value
    at_csact_t tmp = *param;
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	f107 030c 	add.w	r3, r7, #12
 80088f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80088f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    Simcom_Lock();
 80088f8:	f001 fa31 	bl	8009d5e <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+CSACT?\r", 500, "+CSACT: ", &str);
 80088fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008900:	4a46      	ldr	r2, [pc, #280]	; (8008a1c <AT_NetworkAttachedStatus+0x14c>)
 8008902:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008906:	4846      	ldr	r0, [pc, #280]	; (8008a20 <AT_NetworkAttachedStatus+0x150>)
 8008908:	f000 fdca 	bl	80094a0 <AT_CmdRead>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (p > 0) {
 8008912:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd77      	ble.n	8008a0a <AT_NetworkAttachedStatus+0x13a>
        tmp.act = AT_ParseNumber(&str[len], &cnt);
 800891a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800891c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008920:	4413      	add	r3, r2
 8008922:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fe3b 	bl	80095a4 <AT_ParseNumber>
 800892e:	4603      	mov	r3, r0
 8008930:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8008932:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008936:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800893a:	4413      	add	r3, r2
 800893c:	b2db      	uxtb	r3, r3
 800893e:	3301      	adds	r3, #1
 8008940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        AT_ParseText(&str[len], &cnt, tmp.rac, sizeof(tmp.rac));
 8008944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008946:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800894a:	18d0      	adds	r0, r2, r3
 800894c:	f107 030c 	add.w	r3, r7, #12
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8008956:	2303      	movs	r3, #3
 8008958:	f000 fdda 	bl	8009510 <AT_ParseText>
        len += cnt + 1;
 800895c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008960:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008964:	4413      	add	r3, r2
 8008966:	b2db      	uxtb	r3, r3
 8008968:	3301      	adds	r3, #1
 800896a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.creg = AT_ParseNumber(&str[len], &cnt);
 800896e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008970:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008974:	4413      	add	r3, r2
 8008976:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fe11 	bl	80095a4 <AT_ParseNumber>
 8008982:	4603      	mov	r3, r0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	74fb      	strb	r3, [r7, #19]
        len += cnt + 1;
 8008988:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800898c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008990:	4413      	add	r3, r2
 8008992:	b2db      	uxtb	r3, r3
 8008994:	3301      	adds	r3, #1
 8008996:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        tmp.cgreg = AT_ParseNumber(&str[len], &cnt);
 800899a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800899c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80089a0:	4413      	add	r3, r2
 80089a2:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fdfb 	bl	80095a4 <AT_ParseNumber>
 80089ae:	4603      	mov	r3, r0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	753b      	strb	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d11f      	bne.n	80089fa <AT_NetworkAttachedStatus+0x12a>
            if (tmp.cgreg != param->creg || tmp.cgreg != param->cgreg) {
 80089ba:	7d3a      	ldrb	r2, [r7, #20]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	79db      	ldrb	r3, [r3, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d104      	bne.n	80089ce <AT_NetworkAttachedStatus+0xfe>
 80089c4:	7d3a      	ldrb	r2, [r7, #20]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	7a1b      	ldrb	r3, [r3, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d01d      	beq.n	8008a0a <AT_NetworkAttachedStatus+0x13a>
                sprintf(cmd, "AT+CSACT=%d,%d\r", param->creg, param->cgreg);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	79db      	ldrb	r3, [r3, #7]
 80089d2:	461a      	mov	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	7a1b      	ldrb	r3, [r3, #8]
 80089d8:	f107 0018 	add.w	r0, r7, #24
 80089dc:	4911      	ldr	r1, [pc, #68]	; (8008a24 <AT_NetworkAttachedStatus+0x154>)
 80089de:	f001 ff19 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	2200      	movs	r2, #0
 80089e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fd39 	bl	8009464 <AT_CmdWrite>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089f8:	e007      	b.n	8008a0a <AT_NetworkAttachedStatus+0x13a>
            }
        } else {
            *param = tmp;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	461c      	mov	r4, r3
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
    }
    Simcom_Unlock();
 8008a0a:	f001 f9af 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008a0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3734      	adds	r7, #52	; 0x34
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd90      	pop	{r4, r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	0800b4e8 	.word	0x0800b4e8
 8008a20:	0800b4f4 	.word	0x0800b4f4
 8008a24:	0800b500 	.word	0x0800b500

08008a28 <AT_NetworkRegistration>:

SIMCOM_RESULT AT_NetworkRegistration(char command[20], AT_MODE mode, at_c_greg_t *param) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b090      	sub	sp, #64	; 0x40
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	460b      	mov	r3, r1
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	72fb      	strb	r3, [r7, #11]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t cnt, len = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    char *str = NULL, cmd[14], res[15];
 8008a42:	2300      	movs	r3, #0
 8008a44:	63bb      	str	r3, [r7, #56]	; 0x38

    // Copy by value
    at_c_greg_t tmp = *param;
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a50:	e883 0003 	stmia.w	r3, {r0, r1}

    Simcom_Lock();
 8008a54:	f001 f983 	bl	8009d5e <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s?\r", command);
 8008a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4937      	ldr	r1, [pc, #220]	; (8008b3c <AT_NetworkRegistration+0x114>)
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fed7 	bl	800a814 <siprintf>
    sprintf(res, "+%s: ", command);
 8008a66:	f107 0318 	add.w	r3, r7, #24
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4934      	ldr	r1, [pc, #208]	; (8008b40 <AT_NetworkRegistration+0x118>)
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fed0 	bl	800a814 <siprintf>
    p = AT_CmdRead(cmd, 500, res, &str);
 8008a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a78:	f107 0218 	add.w	r2, r7, #24
 8008a7c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008a84:	f000 fd0c 	bl	80094a0 <AT_CmdRead>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (p > 0) {
 8008a8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	dd49      	ble.n	8008b2a <AT_NetworkRegistration+0x102>
        tmp.mode = AT_ParseNumber(&str[len], &cnt);
 8008a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fd7d 	bl	80095a4 <AT_ParseNumber>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	613b      	str	r3, [r7, #16]
        len += cnt + 1;
 8008aae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8008ab2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ab6:	4413      	add	r3, r2
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	3301      	adds	r3, #1
 8008abc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        tmp.stat = AT_ParseNumber(&str[len], &cnt);
 8008ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fd68 	bl	80095a4 <AT_ParseNumber>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	617b      	str	r3, [r7, #20]

        // Write
        if (mode == ATW) {
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d11d      	bne.n	8008b1a <AT_NetworkRegistration+0xf2>
            if (memcmp(&tmp, param, sizeof(tmp)) != 0) {
 8008ade:	f107 0310 	add.w	r3, r7, #16
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fe72 	bl	800a7d0 <memcmp>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d01b      	beq.n	8008b2a <AT_NetworkRegistration+0x102>
                sprintf(cmd, "AT+%s=%d\r", command, param->mode);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4911      	ldr	r1, [pc, #68]	; (8008b44 <AT_NetworkRegistration+0x11c>)
 8008afe:	f001 fe89 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8008b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b06:	2200      	movs	r2, #0
 8008b08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fca9 	bl	8009464 <AT_CmdWrite>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b18:	e007      	b.n	8008b2a <AT_NetworkRegistration+0x102>
            }
        } else {
            *param = tmp;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f107 0310 	add.w	r3, r7, #16
 8008b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b26:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
    Simcom_Unlock();
 8008b2a:	f001 f91f 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008b2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3740      	adds	r7, #64	; 0x40
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800b510 	.word	0x0800b510
 8008b40:	0800b518 	.word	0x0800b518
 8008b44:	0800b520 	.word	0x0800b520

08008b48 <AT_ConfigureSlowClock>:

SIMCOM_RESULT AT_ConfigureSlowClock(AT_MODE mode, AT_CSCLK *state) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CSCLK", mode, (int32_t*) state, 0);
 8008b54:	79f9      	ldrb	r1, [r7, #7]
 8008b56:	2300      	movs	r3, #0
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	4804      	ldr	r0, [pc, #16]	; (8008b6c <AT_ConfigureSlowClock+0x24>)
 8008b5c:	f000 fc12 	bl	8009384 <AT_SingleInteger>
 8008b60:	4603      	mov	r3, r0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0800b52c 	.word	0x0800b52c

08008b70 <AT_ReportMobileEquipmentError>:

SIMCOM_RESULT AT_ReportMobileEquipmentError(AT_MODE mode, AT_CMEE *state) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	6039      	str	r1, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("CMEE", mode, (int32_t*) state, 0);
 8008b7c:	79f9      	ldrb	r1, [r7, #7]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	4804      	ldr	r0, [pc, #16]	; (8008b94 <AT_ReportMobileEquipmentError+0x24>)
 8008b84:	f000 fbfe 	bl	8009384 <AT_SingleInteger>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0800b534 	.word	0x0800b534

08008b98 <AT_FixedLocalRate>:

SIMCOM_RESULT AT_FixedLocalRate(AT_MODE mode, uint32_t *rate) {
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
    return AT_SingleInteger("IPR", mode, (int32_t*) rate, 0);
 8008ba4:	79f9      	ldrb	r1, [r7, #7]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	4804      	ldr	r0, [pc, #16]	; (8008bbc <AT_FixedLocalRate+0x24>)
 8008bac:	f000 fbea 	bl	8009384 <AT_SingleInteger>
 8008bb0:	4603      	mov	r3, r0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	0800b53c 	.word	0x0800b53c

08008bc0 <AT_BearerInitialize>:

SIMCOM_RESULT AT_EnableLocalTimestamp(AT_MODE mode, AT_BOOL *state) {
    return AT_SingleInteger("CLTS", mode, (int32_t*) state, 0);
}
#else
SIMCOM_RESULT AT_BearerInitialize(void) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b0a4      	sub	sp, #144	; 0x90
 8008bc4:	af00      	add	r7, sp, #0
    SIMCOM_RESULT p;
    at_sapbr_t getBEARER, setBEARER = {
 8008bc6:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <AT_BearerInitialize+0x60>)
 8008bc8:	1d3b      	adds	r3, r7, #4
 8008bca:	4611      	mov	r1, r2
 8008bcc:	2244      	movs	r2, #68	; 0x44
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fe0d 	bl	800a7ee <memcpy>
                    .password = NET_CON_PASSWORD,
            },
    };

    // BEARER attach
    p = AT_BearerSettings(ATW, &setBEARER);
 8008bd4:	1d3b      	adds	r3, r7, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f000 f9bf 	bl	8008f5c <AT_BearerSettings>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    // BEARER init
    if (p > 0) {
 8008be4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd08      	ble.n	8008bfe <AT_BearerInitialize+0x3e>
        p = AT_BearerSettings(ATR, &getBEARER);
 8008bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	f000 f9b2 	bl	8008f5c <AT_BearerSettings>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    if (p > 0 && getBEARER.status != SAPBR_CONNECTED) {
 8008bfe:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd05      	ble.n	8008c12 <AT_BearerInitialize+0x52>
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d002      	beq.n	8008c12 <AT_BearerInitialize+0x52>
        p = SIM_RESULT_ERROR;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return p;
 8008c12:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3790      	adds	r7, #144	; 0x90
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	0800b540 	.word	0x0800b540

08008c24 <AT_FtpInitialize>:

SIMCOM_RESULT AT_FtpInitialize(at_ftp_t *param) {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p;

    Simcom_Lock();
 8008c2c:	f001 f897 	bl	8009d5e <Simcom_Lock>
    p = AT_SingleInteger("FTPCID", ATW, &param->id, 0);
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	2300      	movs	r3, #0
 8008c34:	2100      	movs	r1, #0
 8008c36:	482a      	ldr	r0, [pc, #168]	; (8008ce0 <AT_FtpInitialize+0xbc>)
 8008c38:	f000 fba4 	bl	8009384 <AT_SingleInteger>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

    // set server & credential
    if (p > 0) {
 8008c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd0a      	ble.n	8008c5e <AT_FtpInitialize+0x3a>
        p = AT_SingleString("FTPSERV", ATW, param->server, sizeof(param->server), 0);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	231e      	movs	r3, #30
 8008c52:	2100      	movs	r1, #0
 8008c54:	4823      	ldr	r0, [pc, #140]	; (8008ce4 <AT_FtpInitialize+0xc0>)
 8008c56:	f000 fad3 	bl	8009200 <AT_SingleString>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8008c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dd0b      	ble.n	8008c7e <AT_FtpInitialize+0x5a>
        p = AT_SingleString("FTPUN", ATW, param->username, sizeof(param->username), 0);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	231e      	movs	r3, #30
 8008c72:	2100      	movs	r1, #0
 8008c74:	481c      	ldr	r0, [pc, #112]	; (8008ce8 <AT_FtpInitialize+0xc4>)
 8008c76:	f000 fac3 	bl	8009200 <AT_SingleString>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8008c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dd0b      	ble.n	8008c9e <AT_FtpInitialize+0x7a>
        p = AT_SingleString("FTPPW", ATW, param->password, sizeof(param->password), 0);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2314      	movs	r3, #20
 8008c92:	2100      	movs	r1, #0
 8008c94:	4815      	ldr	r0, [pc, #84]	; (8008cec <AT_FtpInitialize+0xc8>)
 8008c96:	f000 fab3 	bl	8009200 <AT_SingleString>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]
    }
    // set path & file
    if (p > 0) {
 8008c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd0b      	ble.n	8008cbe <AT_FtpInitialize+0x9a>
        p = AT_SingleString("FTPGETPATH", ATW, param->path, sizeof(param->path), 0);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8008cac:	2300      	movs	r3, #0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2314      	movs	r3, #20
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	480e      	ldr	r0, [pc, #56]	; (8008cf0 <AT_FtpInitialize+0xcc>)
 8008cb6:	f000 faa3 	bl	8009200 <AT_SingleString>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
    }
    if (p > 0) {
 8008cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd04      	ble.n	8008cd0 <AT_FtpInitialize+0xac>
        p = AT_FtpSetFile(param);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f814 	bl	8008cf4 <AT_FtpSetFile>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
    }

    Simcom_Unlock();
 8008cd0:	f001 f84c 	bl	8009d6c <Simcom_Unlock>
    return p;
 8008cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	0800b584 	.word	0x0800b584
 8008ce4:	0800b58c 	.word	0x0800b58c
 8008ce8:	0800b594 	.word	0x0800b594
 8008cec:	0800b59c 	.word	0x0800b59c
 8008cf0:	0800b5a4 	.word	0x0800b5a4

08008cf4 <AT_FtpSetFile>:

SIMCOM_RESULT AT_FtpSetFile(at_ftp_t *param) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
    return AT_SingleString("FTPGETNAME", ATW, param->file, sizeof(param->file), 0);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d02:	2300      	movs	r3, #0
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2314      	movs	r3, #20
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4804      	ldr	r0, [pc, #16]	; (8008d1c <AT_FtpSetFile+0x28>)
 8008d0c:	f000 fa78 	bl	8009200 <AT_SingleString>
 8008d10:	4603      	mov	r3, r0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	0800b5b0 	.word	0x0800b5b0

08008d20 <AT_FtpFileSize>:

SIMCOM_RESULT AT_FtpFileSize(at_ftp_t *param) {
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
    uint8_t cnt, len = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]
    char *str = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60bb      	str	r3, [r7, #8]

    Simcom_Lock();
 8008d34:	f001 f813 	bl	8009d5e <Simcom_Lock>
    // Read
    p = AT_CmdRead("AT+FTPSIZE\r", 90000, "+FTPSIZE: ", &str);
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	4a24      	ldr	r2, [pc, #144]	; (8008dd0 <AT_FtpFileSize+0xb0>)
 8008d3e:	4925      	ldr	r1, [pc, #148]	; (8008dd4 <AT_FtpFileSize+0xb4>)
 8008d40:	4825      	ldr	r0, [pc, #148]	; (8008dd8 <AT_FtpFileSize+0xb8>)
 8008d42:	f000 fbad 	bl	80094a0 <AT_CmdRead>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 8008d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd35      	ble.n	8008dbe <AT_FtpFileSize+0x9e>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	4413      	add	r3, r2
 8008d58:	f107 020d 	add.w	r2, r7, #13
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fc20 	bl	80095a4 <AT_ParseNumber>
        len += cnt + 1;
 8008d64:	7b7a      	ldrb	r2, [r7, #13]
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	4413      	add	r3, r2
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	73bb      	strb	r3, [r7, #14]
        param->response = AT_ParseNumber(&str[len], &cnt);
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	7bbb      	ldrb	r3, [r7, #14]
 8008d74:	4413      	add	r3, r2
 8008d76:	f107 020d 	add.w	r2, r7, #13
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fc11 	bl	80095a4 <AT_ParseNumber>
 8008d82:	4603      	mov	r3, r0
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        if (param->response == FTP_FINISH) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d113      	bne.n	8008dbe <AT_FtpFileSize+0x9e>
            len += cnt + 1;
 8008d96:	7b7a      	ldrb	r2, [r7, #13]
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	3301      	adds	r3, #1
 8008da0:	73bb      	strb	r3, [r7, #14]
            param->size = AT_ParseNumber(&str[len], &cnt);
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	4413      	add	r3, r2
 8008da8:	f107 020d 	add.w	r2, r7, #13
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fbf8 	bl	80095a4 <AT_ParseNumber>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
    }
    Simcom_Unlock();
 8008dbe:	f000 ffd5 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	0800b5bc 	.word	0x0800b5bc
 8008dd4:	00015f90 	.word	0x00015f90
 8008dd8:	0800b5c8 	.word	0x0800b5c8

08008ddc <AT_FtpDownload>:

SIMCOM_RESULT AT_FtpDownload(at_ftpget_t *param) {
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b09c      	sub	sp, #112	; 0x70
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint32_t tick;
    uint8_t cnt, len = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    char *ptr, *str = NULL, cmd[80];
 8008df0:	2300      	movs	r3, #0
 8008df2:	65fb      	str	r3, [r7, #92]	; 0x5c

    Simcom_Lock();
 8008df4:	f000 ffb3 	bl	8009d5e <Simcom_Lock>
    // Open or Read
    if (param->mode == FTPGET_OPEN) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d108      	bne.n	8008e12 <AT_FtpDownload+0x36>
        sprintf(cmd, "AT+FTPGET=%d\r", param->mode);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	4946      	ldr	r1, [pc, #280]	; (8008f24 <AT_FtpDownload+0x148>)
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 fd02 	bl	800a814 <siprintf>
 8008e10:	e008      	b.n	8008e24 <AT_FtpDownload+0x48>
    } else {
        sprintf(cmd, "AT+FTPGET=%d,%d\r", param->mode, param->reqlength);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	891b      	ldrh	r3, [r3, #8]
 8008e1a:	f107 000c 	add.w	r0, r7, #12
 8008e1e:	4942      	ldr	r1, [pc, #264]	; (8008f28 <AT_FtpDownload+0x14c>)
 8008e20:	f001 fcf8 	bl	800a814 <siprintf>
    }

    p = AT_CmdRead(cmd, 90000, "+FTPGET: ", &str);
 8008e24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008e28:	f107 000c 	add.w	r0, r7, #12
 8008e2c:	4a3f      	ldr	r2, [pc, #252]	; (8008f2c <AT_FtpDownload+0x150>)
 8008e2e:	4940      	ldr	r1, [pc, #256]	; (8008f30 <AT_FtpDownload+0x154>)
 8008e30:	f000 fb36 	bl	80094a0 <AT_CmdRead>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if (p > 0) {
 8008e3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd67      	ble.n	8008f12 <AT_FtpDownload+0x136>
        // parsing
        AT_ParseNumber(&str[len], &cnt);
 8008e42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008e48:	4413      	add	r3, r2
 8008e4a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fba7 	bl	80095a4 <AT_ParseNumber>
        len += cnt + 1;
 8008e56:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8008e5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008e5e:	4413      	add	r3, r2
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	3301      	adds	r3, #1
 8008e64:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (param->mode == FTPGET_OPEN) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10e      	bne.n	8008e8e <AT_FtpDownload+0xb2>
            param->response = AT_ParseNumber(&str[len], &cnt);
 8008e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008e76:	4413      	add	r3, r2
 8008e78:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fb90 	bl	80095a4 <AT_ParseNumber>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	e041      	b.n	8008f12 <AT_FtpDownload+0x136>
        } else {
            param->cnflength = AT_ParseNumber(&str[len], &cnt);
 8008e8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e90:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008e94:	4413      	add	r3, r2
 8008e96:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fb81 	bl	80095a4 <AT_ParseNumber>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	815a      	strh	r2, [r3, #10]
            len += cnt + 2;
 8008eaa:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8008eae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008eb2:	4413      	add	r3, r2
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            // start of file content
            param->ptr = &str[len];
 8008ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ebe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008ec2:	441a      	add	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60da      	str	r2, [r3, #12]
            // wait until data transferred
            ptr = &str[len + param->cnflength + 2];
 8008ec8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	8949      	ldrh	r1, [r1, #10]
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	66bb      	str	r3, [r7, #104]	; 0x68

            tick = _GetTickMS();
 8008eda:	f001 fbf9 	bl	800a6d0 <_GetTickMS>
 8008ede:	6678      	str	r0, [r7, #100]	; 0x64
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 8008ee0:	e00f      	b.n	8008f02 <AT_FtpDownload+0x126>
                if (_GetTickMS() - tick > (5 * 1000)) {
 8008ee2:	f001 fbf5 	bl	800a6d0 <_GetTickMS>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d903      	bls.n	8008efc <AT_FtpDownload+0x120>
                    p = SIM_RESULT_ERROR;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    break;
 8008efa:	e00a      	b.n	8008f12 <AT_FtpDownload+0x136>
                };
                _DelayMS(1);
 8008efc:	2001      	movs	r0, #1
 8008efe:	f001 fbdc 	bl	800a6ba <_DelayMS>
            while (strncmp(ptr, SIMCOM_RSP_OK, strlen(SIMCOM_RSP_OK)) != 0) {
 8008f02:	2203      	movs	r2, #3
 8008f04:	490b      	ldr	r1, [pc, #44]	; (8008f34 <AT_FtpDownload+0x158>)
 8008f06:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008f08:	f001 fca4 	bl	800a854 <strncmp>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e7      	bne.n	8008ee2 <AT_FtpDownload+0x106>
            };
        }
    }
    Simcom_Unlock();
 8008f12:	f000 ff2b 	bl	8009d6c <Simcom_Unlock>

    return p;
 8008f16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3770      	adds	r7, #112	; 0x70
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	0800b5d4 	.word	0x0800b5d4
 8008f28:	0800b5e4 	.word	0x0800b5e4
 8008f2c:	0800b5f8 	.word	0x0800b5f8
 8008f30:	00015f90 	.word	0x00015f90
 8008f34:	0800b604 	.word	0x0800b604

08008f38 <AT_FtpCurrentState>:

SIMCOM_RESULT AT_FtpCurrentState(AT_FTP_STATE *state) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    return AT_SingleInteger("FTPSTATE", ATR, (int32_t*) state, 1);
 8008f40:	2301      	movs	r3, #1
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	2101      	movs	r1, #1
 8008f46:	4804      	ldr	r0, [pc, #16]	; (8008f58 <AT_FtpCurrentState+0x20>)
 8008f48:	f000 fa1c 	bl	8009384 <AT_SingleInteger>
 8008f4c:	4603      	mov	r3, r0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	0800b608 	.word	0x0800b608

08008f5c <AT_BearerSettings>:

SIMCOM_RESULT AT_BearerSettings(AT_MODE mode, at_sapbr_t *param) {
 8008f5c:	b590      	push	{r4, r7, lr}
 8008f5e:	b0ab      	sub	sp, #172	; 0xac
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint8_t cnt, len = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    char *str = NULL, cmd[80];
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Copy by value
    at_sapbr_t tmp = *param;
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4611      	mov	r1, r2
 8008f82:	2244      	movs	r2, #68	; 0x44
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fc32 	bl	800a7ee <memcpy>

    Simcom_Lock();
 8008f8a:	f000 fee8 	bl	8009d5e <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+SAPBR=%d,1\r", SAPBR_BEARER_QUERY);
 8008f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f92:	2202      	movs	r2, #2
 8008f94:	4990      	ldr	r1, [pc, #576]	; (80091d8 <AT_BearerSettings+0x27c>)
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 fc3c 	bl	800a814 <siprintf>
    p = AT_CmdRead(cmd, 500, "+SAPBR: ", &str);
 8008f9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008fa0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008fa4:	4a8d      	ldr	r2, [pc, #564]	; (80091dc <AT_BearerSettings+0x280>)
 8008fa6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008faa:	f000 fa79 	bl	80094a0 <AT_CmdRead>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if (p > 0) {
 8008fb4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f340 8105 	ble.w	80091c8 <AT_BearerSettings+0x26c>
        tmp.cmd_type = AT_ParseNumber(&str[len], &cnt);
 8008fbe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008fc2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fae8 	bl	80095a4 <AT_ParseNumber>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	60fb      	str	r3, [r7, #12]
        len += cnt + 1;
 8008fd8:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8008fdc:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8008fe0:	4413      	add	r3, r2
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
        tmp.status = AT_ParseNumber(&str[len], &cnt);
 8008fea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008fee:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f107 02a5 	add.w	r2, r7, #165	; 0xa5
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fad2 	bl	80095a4 <AT_ParseNumber>
 8009000:	4603      	mov	r3, r0
 8009002:	613b      	str	r3, [r7, #16]

        // Read parameters
        p = AT_CmdRead("AT+SAPBR=4,1\r", 500, "+SAPBR:", &str);
 8009004:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009008:	4a75      	ldr	r2, [pc, #468]	; (80091e0 <AT_BearerSettings+0x284>)
 800900a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800900e:	4875      	ldr	r0, [pc, #468]	; (80091e4 <AT_BearerSettings+0x288>)
 8009010:	f000 fa46 	bl	80094a0 <AT_CmdRead>
 8009014:	4603      	mov	r3, r0
 8009016:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        if (p > 0) {
 800901a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800901e:	2b00      	cmp	r3, #0
 8009020:	dd38      	ble.n	8009094 <AT_BearerSettings+0x138>
            if (AT_FindInBuffer("APN: ", &str)) {
 8009022:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009026:	4619      	mov	r1, r3
 8009028:	486f      	ldr	r0, [pc, #444]	; (80091e8 <AT_BearerSettings+0x28c>)
 800902a:	f000 f987 	bl	800933c <AT_FindInBuffer>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <AT_BearerSettings+0xec>
                AT_ParseText(&str[0], NULL, tmp.con.apn, sizeof(tmp.con.apn));
 8009034:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	f103 0208 	add.w	r2, r3, #8
 8009040:	2314      	movs	r3, #20
 8009042:	2100      	movs	r1, #0
 8009044:	f000 fa64 	bl	8009510 <AT_ParseText>
            }
            if (AT_FindInBuffer("USER: ", &str)) {
 8009048:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800904c:	4619      	mov	r1, r3
 800904e:	4867      	ldr	r0, [pc, #412]	; (80091ec <AT_BearerSettings+0x290>)
 8009050:	f000 f974 	bl	800933c <AT_FindInBuffer>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <AT_BearerSettings+0x112>
                AT_ParseText(&str[0], NULL, tmp.con.username, sizeof(tmp.con.username));
 800905a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800905e:	f107 030c 	add.w	r3, r7, #12
 8009062:	f103 021c 	add.w	r2, r3, #28
 8009066:	2314      	movs	r3, #20
 8009068:	2100      	movs	r1, #0
 800906a:	f000 fa51 	bl	8009510 <AT_ParseText>
            }
            if (AT_FindInBuffer("PWD: ", &str)) {
 800906e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009072:	4619      	mov	r1, r3
 8009074:	485e      	ldr	r0, [pc, #376]	; (80091f0 <AT_BearerSettings+0x294>)
 8009076:	f000 f961 	bl	800933c <AT_FindInBuffer>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <AT_BearerSettings+0x138>
                AT_ParseText(&str[0], NULL, tmp.con.password, sizeof(tmp.con.password));
 8009080:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009084:	f107 030c 	add.w	r3, r7, #12
 8009088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800908c:	2314      	movs	r3, #20
 800908e:	2100      	movs	r1, #0
 8009090:	f000 fa3e 	bl	8009510 <AT_ParseText>
            }
        }

        // Write
        if (mode == ATW) {
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 808e 	bne.w	80091b8 <AT_BearerSettings+0x25c>
            if (memcmp(tmp.con.apn, param->con.apn, strlen(param->con.apn)) != 0) {
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f103 0408 	add.w	r4, r3, #8
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 f8c4 	bl	8000234 <strlen>
 80090ac:	4602      	mov	r2, r0
 80090ae:	f107 030c 	add.w	r3, r7, #12
 80090b2:	3308      	adds	r3, #8
 80090b4:	4621      	mov	r1, r4
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 fb8a 	bl	800a7d0 <memcmp>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <AT_BearerSettings+0x18e>
                sprintf(cmd, "AT+SAPBR=3,1,\"APN\",\"%s\"\r", param->con.apn);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f103 0208 	add.w	r2, r3, #8
 80090c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090cc:	4949      	ldr	r1, [pc, #292]	; (80091f4 <AT_BearerSettings+0x298>)
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fba0 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80090d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090d8:	2200      	movs	r2, #0
 80090da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f9c0 	bl	8009464 <AT_CmdWrite>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.username, strlen(param->con.username)) != 0) {
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f103 041c 	add.w	r4, r3, #28
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	331c      	adds	r3, #28
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 f89d 	bl	8000234 <strlen>
 80090fa:	4602      	mov	r2, r0
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	3308      	adds	r3, #8
 8009102:	4621      	mov	r1, r4
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fb63 	bl	800a7d0 <memcmp>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d013      	beq.n	8009138 <AT_BearerSettings+0x1dc>
                sprintf(cmd, "AT+SAPBR=3,1,\"USER\",\"%s\"\r", param->con.username);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	f103 021c 	add.w	r2, r3, #28
 8009116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800911a:	4937      	ldr	r1, [pc, #220]	; (80091f8 <AT_BearerSettings+0x29c>)
 800911c:	4618      	mov	r0, r3
 800911e:	f001 fb79 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8009122:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009126:	2200      	movs	r2, #0
 8009128:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f999 	bl	8009464 <AT_CmdWrite>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }
            if (memcmp(tmp.con.apn, param->con.password, strlen(param->con.password)) != 0) {
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	3330      	adds	r3, #48	; 0x30
 8009142:	4618      	mov	r0, r3
 8009144:	f7f7 f876 	bl	8000234 <strlen>
 8009148:	4602      	mov	r2, r0
 800914a:	f107 030c 	add.w	r3, r7, #12
 800914e:	3308      	adds	r3, #8
 8009150:	4621      	mov	r1, r4
 8009152:	4618      	mov	r0, r3
 8009154:	f001 fb3c 	bl	800a7d0 <memcmp>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d013      	beq.n	8009186 <AT_BearerSettings+0x22a>
                sprintf(cmd, "AT+SAPBR=3,1,\"PWD\",\"%s\"\r", param->con.password);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009164:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009168:	4924      	ldr	r1, [pc, #144]	; (80091fc <AT_BearerSettings+0x2a0>)
 800916a:	4618      	mov	r0, r3
 800916c:	f001 fb52 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8009170:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009174:	2200      	movs	r2, #0
 8009176:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f972 	bl	8009464 <AT_CmdWrite>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            }

            // open or close
            if (tmp.status != param->status) {
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d01b      	beq.n	80091c8 <AT_BearerSettings+0x26c>
                sprintf(cmd, "AT+SAPBR=%d,1\r", param->cmd_type);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009198:	490f      	ldr	r1, [pc, #60]	; (80091d8 <AT_BearerSettings+0x27c>)
 800919a:	4618      	mov	r0, r3
 800919c:	f001 fb3a 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 60000, NULL);
 80091a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091a4:	2200      	movs	r2, #0
 80091a6:	f64e 2160 	movw	r1, #60000	; 0xea60
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f95a 	bl	8009464 <AT_CmdWrite>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80091b6:	e007      	b.n	80091c8 <AT_BearerSettings+0x26c>
            }
        } else {
            *param = tmp;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	2244      	movs	r2, #68	; 0x44
 80091c2:	4619      	mov	r1, r3
 80091c4:	f001 fb13 	bl	800a7ee <memcpy>
        }
    }
    Simcom_Unlock();
 80091c8:	f000 fdd0 	bl	8009d6c <Simcom_Unlock>

    return p;
 80091cc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	37ac      	adds	r7, #172	; 0xac
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd90      	pop	{r4, r7, pc}
 80091d8:	0800b614 	.word	0x0800b614
 80091dc:	0800b624 	.word	0x0800b624
 80091e0:	0800b630 	.word	0x0800b630
 80091e4:	0800b638 	.word	0x0800b638
 80091e8:	0800b648 	.word	0x0800b648
 80091ec:	0800b650 	.word	0x0800b650
 80091f0:	0800b658 	.word	0x0800b658
 80091f4:	0800b660 	.word	0x0800b660
 80091f8:	0800b67c 	.word	0x0800b67c
 80091fc:	0800b698 	.word	0x0800b698

08009200 <AT_SingleString>:
#endif

/* Private functions implementation --------------------------------------------*/
#if (BOOTLOADER)
static SIMCOM_RESULT AT_SingleString(char command[20], AT_MODE mode, char *string, uint8_t size, uint8_t executor) {
 8009200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009202:	b093      	sub	sp, #76	; 0x4c
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	461a      	mov	r2, r3
 800920c:	460b      	mov	r3, r1
 800920e:	72fb      	strb	r3, [r7, #11]
 8009210:	4613      	mov	r3, r2
 8009212:	72bb      	strb	r3, [r7, #10]
 8009214:	466b      	mov	r3, sp
 8009216:	461e      	mov	r6, r3
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20], tmp[size];
 800921e:	2300      	movs	r3, #0
 8009220:	63bb      	str	r3, [r7, #56]	; 0x38
 8009222:	7abd      	ldrb	r5, [r7, #10]
 8009224:	462b      	mov	r3, r5
 8009226:	3b01      	subs	r3, #1
 8009228:	643b      	str	r3, [r7, #64]	; 0x40
 800922a:	b2e9      	uxtb	r1, r5
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	f04f 0400 	mov.w	r4, #0
 8009238:	00d4      	lsls	r4, r2, #3
 800923a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800923e:	00cb      	lsls	r3, r1, #3
 8009240:	b2e9      	uxtb	r1, r5
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	f04f 0400 	mov.w	r4, #0
 800924e:	00d4      	lsls	r4, r2, #3
 8009250:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009254:	00cb      	lsls	r3, r1, #3
 8009256:	462b      	mov	r3, r5
 8009258:	3307      	adds	r3, #7
 800925a:	08db      	lsrs	r3, r3, #3
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	ebad 0d03 	sub.w	sp, sp, r3
 8009262:	466b      	mov	r3, sp
 8009264:	3300      	adds	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    memcpy(tmp, string, size);
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	7aba      	ldrb	r2, [r7, #10]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	f001 fabd 	bl	800a7ee <memcpy>

    Simcom_Lock();
 8009274:	f000 fd73 	bl	8009d5e <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 8009278:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <AT_SingleString+0x84>
 8009280:	4b29      	ldr	r3, [pc, #164]	; (8009328 <AT_SingleString+0x128>)
 8009282:	e000      	b.n	8009286 <AT_SingleString+0x86>
 8009284:	4b29      	ldr	r3, [pc, #164]	; (800932c <AT_SingleString+0x12c>)
 8009286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4928      	ldr	r1, [pc, #160]	; (8009330 <AT_SingleString+0x130>)
 800928e:	f001 fac1 	bl	800a814 <siprintf>
    sprintf(res, "+%s: ", command);
 8009292:	f107 0310 	add.w	r3, r7, #16
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4926      	ldr	r1, [pc, #152]	; (8009334 <AT_SingleString+0x134>)
 800929a:	4618      	mov	r0, r3
 800929c:	f001 faba 	bl	800a814 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 80092a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80092a4:	f107 0210 	add.w	r2, r7, #16
 80092a8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092b0:	f000 f8f6 	bl	80094a0 <AT_CmdRead>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 80092ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dd29      	ble.n	8009316 <AT_SingleString+0x116>
        AT_ParseText(&str[0], NULL, tmp, sizeof(tmp));
 80092c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092c6:	462b      	mov	r3, r5
 80092c8:	2100      	movs	r1, #0
 80092ca:	f000 f921 	bl	8009510 <AT_ParseText>

        // Write
        if (mode == ATW) {
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11a      	bne.n	800930a <AT_SingleString+0x10a>
            if (strcmp(tmp, string) != 0) {
 80092d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7f6 ffa1 	bl	8000220 <strcmp>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d018      	beq.n	8009316 <AT_SingleString+0x116>
                sprintf(cmd, "AT+%s=\"%s\"\r", command, string);
 80092e4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4912      	ldr	r1, [pc, #72]	; (8009338 <AT_SingleString+0x138>)
 80092ee:	f001 fa91 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 80092f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092f6:	2200      	movs	r2, #0
 80092f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f8b1 	bl	8009464 <AT_CmdWrite>
 8009302:	4603      	mov	r3, r0
 8009304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009308:	e005      	b.n	8009316 <AT_SingleString+0x116>
            }
        } else {
            memcpy(string, tmp, size);
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	7aba      	ldrb	r2, [r7, #10]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 fa6c 	bl	800a7ee <memcpy>
        }
    }
    Simcom_Unlock();
 8009316:	f000 fd29 	bl	8009d6c <Simcom_Unlock>

    return p;
 800931a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800931e:	46b5      	mov	sp, r6
}
 8009320:	4618      	mov	r0, r3
 8009322:	374c      	adds	r7, #76	; 0x4c
 8009324:	46bd      	mov	sp, r7
 8009326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009328:	0800b6b4 	.word	0x0800b6b4
 800932c:	0800b6b8 	.word	0x0800b6b8
 8009330:	0800b6bc 	.word	0x0800b6bc
 8009334:	0800b518 	.word	0x0800b518
 8009338:	0800b6c4 	.word	0x0800b6c4

0800933c <AT_FindInBuffer>:

static uint8_t AT_FindInBuffer(char *prefix, char **str) {
 800933c:	b590      	push	{r4, r7, lr}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
    *str = Simcom_Response(prefix);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fd18 	bl	8009d7c <Simcom_Response>
 800934c:	4602      	mov	r2, r0
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	601a      	str	r2, [r3, #0]

    if (*str != NULL) {
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d008      	beq.n	800936c <AT_FindInBuffer+0x30>
        *str += strlen(prefix);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681c      	ldr	r4, [r3, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7f6 ff68 	bl	8000234 <strlen>
 8009364:	4603      	mov	r3, r0
 8009366:	18e2      	adds	r2, r4, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	601a      	str	r2, [r3, #0]
    }

    return *str != NULL;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	bf14      	ite	ne
 8009374:	2301      	movne	r3, #1
 8009376:	2300      	moveq	r3, #0
 8009378:	b2db      	uxtb	r3, r3
}
 800937a:	4618      	mov	r0, r3
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}
	...

08009384 <AT_SingleInteger>:
#endif

static SIMCOM_RESULT AT_SingleInteger(char command[20], AT_MODE mode, int32_t *value, uint8_t executor) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b092      	sub	sp, #72	; 0x48
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	461a      	mov	r2, r3
 8009390:	460b      	mov	r3, r1
 8009392:	72fb      	strb	r3, [r7, #11]
 8009394:	4613      	mov	r3, r2
 8009396:	72bb      	strb	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8009398:	2300      	movs	r3, #0
 800939a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char *str = NULL, cmd[20], res[20];
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Copy by vale
    int32_t tmp = *value;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	643b      	str	r3, [r7, #64]	; 0x40

    Simcom_Lock();
 80093a8:	f000 fcd9 	bl	8009d5e <Simcom_Lock>
    // Read
    sprintf(cmd, "AT+%s%s", command, executor ? "\r" : "?\r");
 80093ac:	7abb      	ldrb	r3, [r7, #10]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <AT_SingleInteger+0x32>
 80093b2:	4b27      	ldr	r3, [pc, #156]	; (8009450 <AT_SingleInteger+0xcc>)
 80093b4:	e000      	b.n	80093b8 <AT_SingleInteger+0x34>
 80093b6:	4b27      	ldr	r3, [pc, #156]	; (8009454 <AT_SingleInteger+0xd0>)
 80093b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4926      	ldr	r1, [pc, #152]	; (8009458 <AT_SingleInteger+0xd4>)
 80093c0:	f001 fa28 	bl	800a814 <siprintf>
    sprintf(res, "+%s: ", command);
 80093c4:	f107 0314 	add.w	r3, r7, #20
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4924      	ldr	r1, [pc, #144]	; (800945c <AT_SingleInteger+0xd8>)
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 fa21 	bl	800a814 <siprintf>
    p = AT_CmdRead(cmd, 1000, res, &str);
 80093d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093d6:	f107 0214 	add.w	r2, r7, #20
 80093da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80093de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093e2:	f000 f85d 	bl	80094a0 <AT_CmdRead>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (p > 0) {
 80093ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	dd24      	ble.n	800943e <AT_SingleInteger+0xba>
        tmp = AT_ParseNumber(&str[0], NULL);
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	2100      	movs	r1, #0
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f8d3 	bl	80095a4 <AT_ParseNumber>
 80093fe:	6438      	str	r0, [r7, #64]	; 0x40

        // Write
        if (mode == ATW) {
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d118      	bne.n	8009438 <AT_SingleInteger+0xb4>
            if (tmp != *value) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800940c:	429a      	cmp	r2, r3
 800940e:	d016      	beq.n	800943e <AT_SingleInteger+0xba>
                sprintf(cmd, "AT+%s=%d\r", command, (int) *value);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4911      	ldr	r1, [pc, #68]	; (8009460 <AT_SingleInteger+0xdc>)
 800941c:	f001 f9fa 	bl	800a814 <siprintf>
                p = AT_CmdWrite(cmd, 500, NULL);
 8009420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009424:	2200      	movs	r2, #0
 8009426:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f81a 	bl	8009464 <AT_CmdWrite>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009436:	e002      	b.n	800943e <AT_SingleInteger+0xba>
            }
        } else {
            *value = tmp;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943c:	601a      	str	r2, [r3, #0]
        }
    }
    Simcom_Unlock();
 800943e:	f000 fc95 	bl	8009d6c <Simcom_Unlock>

    return p;
 8009442:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009446:	4618      	mov	r0, r3
 8009448:	3748      	adds	r7, #72	; 0x48
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	0800b6b4 	.word	0x0800b6b4
 8009454:	0800b6b8 	.word	0x0800b6b8
 8009458:	0800b6bc 	.word	0x0800b6bc
 800945c:	0800b518 	.word	0x0800b518
 8009460:	0800b520 	.word	0x0800b520

08009464 <AT_CmdWrite>:

static SIMCOM_RESULT AT_CmdWrite(char *cmd, uint32_t ms, char *res) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 8009474:	4b09      	ldr	r3, [pc, #36]	; (800949c <AT_CmdWrite+0x38>)
 8009476:	f993 3000 	ldrsb.w	r3, [r3]
 800947a:	2b00      	cmp	r3, #0
 800947c:	db07      	blt.n	800948e <AT_CmdWrite+0x2a>
        p = Simcom_Command(cmd, res, ms, 0);
 800947e:	2300      	movs	r3, #0
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 ff63 	bl	800a350 <Simcom_Command>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
    }

    return p;
 800948e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000010 	.word	0x20000010

080094a0 <AT_CmdRead>:

static SIMCOM_RESULT AT_CmdRead(char *cmd, uint32_t ms, char *prefix, char **str) {
 80094a0:	b590      	push	{r4, r7, lr}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]

    if (SIM.state >= SIM_STATE_READY) {
 80094b2:	4b16      	ldr	r3, [pc, #88]	; (800950c <AT_CmdRead+0x6c>)
 80094b4:	f993 3000 	ldrsb.w	r3, [r3]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db20      	blt.n	80094fe <AT_CmdRead+0x5e>
        p = Simcom_Command(cmd, prefix, ms, 0);
 80094bc:	2300      	movs	r3, #0
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 ff44 	bl	800a350 <Simcom_Command>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

        if (p > 0) {
 80094cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dd14      	ble.n	80094fe <AT_CmdRead+0x5e>
            *str = Simcom_Response(prefix);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc51 	bl	8009d7c <Simcom_Response>
 80094da:	4602      	mov	r2, r0
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	601a      	str	r2, [r3, #0]

            if (*str != NULL) {
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <AT_CmdRead+0x5e>
                *str += strlen(prefix);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681c      	ldr	r4, [r3, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f6 fea1 	bl	8000234 <strlen>
 80094f2:	4603      	mov	r3, r0
 80094f4:	18e2      	adds	r2, r4, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	601a      	str	r2, [r3, #0]

                p = SIM_RESULT_OK;
 80094fa:	2301      	movs	r3, #1
 80094fc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return p;
 80094fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	bf00      	nop
 800950c:	20000010 	.word	0x20000010

08009510 <AT_ParseText>:

static void AT_ParseText(const char *ptr, uint8_t *cnt, char *text, uint8_t size) {
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	75fb      	strb	r3, [r7, #23]

    // check for double quote start
    if (*ptr == '"') {
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b22      	cmp	r3, #34	; 0x22
 8009528:	d119      	bne.n	800955e <AT_ParseText+0x4e>
        ptr++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]
        i++;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	3301      	adds	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
    }
    // Parse text
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 8009536:	e012      	b.n	800955e <AT_ParseText+0x4e>
        *text = *ptr;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	701a      	strb	r2, [r3, #0]

        // increment
        text++;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3301      	adds	r3, #1
 8009544:	607b      	str	r3, [r7, #4]
        ptr++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
        i++;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	3301      	adds	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
        size--;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	3b01      	subs	r3, #1
 8009556:	70fb      	strb	r3, [r7, #3]

        // handle overflow
        if (size <= 1) {
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d90c      	bls.n	8009578 <AT_ParseText+0x68>
    while (*ptr != '"' && *ptr != '\r' && *ptr != '\n') {
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b22      	cmp	r3, #34	; 0x22
 8009564:	d009      	beq.n	800957a <AT_ParseText+0x6a>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b0d      	cmp	r3, #13
 800956c:	d005      	beq.n	800957a <AT_ParseText+0x6a>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b0a      	cmp	r3, #10
 8009574:	d1e0      	bne.n	8009538 <AT_ParseText+0x28>
 8009576:	e000      	b.n	800957a <AT_ParseText+0x6a>
            break;
 8009578:	bf00      	nop
        }
    }
    // end of parsing for : double-quote, tab, new-line
    *text = '\0';
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	701a      	strb	r2, [r3, #0]
    ptr++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
    i++;
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	3301      	adds	r3, #1
 800958a:	75fb      	strb	r3, [r7, #23]
    // Save number of characters used for number
    if (cnt != NULL) {
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <AT_ParseText+0x88>
        *cnt = i;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	7dfa      	ldrb	r2, [r7, #23]
 8009596:	701a      	strb	r2, [r3, #0]
    }
}
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <AT_ParseNumber>:

static int32_t AT_ParseNumber(const char *ptr, uint8_t *cnt) {
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
 80095b2:	2300      	movs	r3, #0
 80095b4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') { /* Check for minus character */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b2d      	cmp	r3, #45	; 0x2d
 80095c0:	d119      	bne.n	80095f6 <AT_ParseNumber+0x52>
        minus = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3301      	adds	r3, #1
 80095ca:	607b      	str	r3, [r7, #4]
        i++;
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	3301      	adds	r3, #1
 80095d0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) { /* Parse number */
 80095d2:	e010      	b.n	80095f6 <AT_ParseNumber+0x52>
        sum = 10 * sum + CHARTONUM(*ptr);
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	461a      	mov	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	3b30      	subs	r3, #48	; 0x30
 80095e6:	4413      	add	r3, r2
 80095e8:	60bb      	str	r3, [r7, #8]
        ptr++;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3301      	adds	r3, #1
 80095ee:	607b      	str	r3, [r7, #4]
        i++;
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	3301      	adds	r3, #1
 80095f4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) { /* Parse number */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b2f      	cmp	r3, #47	; 0x2f
 80095fc:	d903      	bls.n	8009606 <AT_ParseNumber+0x62>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b39      	cmp	r3, #57	; 0x39
 8009604:	d9e6      	bls.n	80095d4 <AT_ParseNumber+0x30>
    }
    if (cnt != NULL) { /* Save number of characters used for number */
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <AT_ParseNumber+0x6e>
        *cnt = i;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	7bba      	ldrb	r2, [r7, #14]
 8009610:	701a      	strb	r2, [r3, #0]
    }
    if (minus) { /* Minus detected */
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <AT_ParseNumber+0x7a>
        return 0 - sum;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	425b      	negs	r3, r3
 800961c:	e000      	b.n	8009620 <AT_ParseNumber+0x7c>
    }
    return sum; /* Return number */
 800961e:	68bb      	ldr	r3, [r7, #8]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <CANBUS_Init>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void CANBUS_Init(void) {
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
    /* Configure the CAN Filter */
    if (!CANBUS_Filter()) {
 8009630:	f000 f82e 	bl	8009690 <CANBUS_Filter>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <CANBUS_Init+0x12>
        /* Start Error */
        Error_Handler();
 800963a:	f7f8 fcbf 	bl	8001fbc <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800963e:	4805      	ldr	r0, [pc, #20]	; (8009654 <CANBUS_Init+0x28>)
 8009640:	f7f9 fa12 	bl	8002a68 <HAL_CAN_Start>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <CANBUS_Init+0x22>
        /* Start Error */
        Error_Handler();
 800964a:	f7f8 fcb7 	bl	8001fbc <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        /* Notification Error */
        Error_Handler();
    }
#endif
}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	200003b4 	.word	0x200003b4

08009658 <CANBUS_Header>:

void CANBUS_Header(CAN_TxHeaderTypeDef *TxHeader, uint32_t StdId, uint32_t DLC) {
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
    /* Configure Global Transmission process */
    TxHeader->RTR = CAN_RTR_DATA;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	60da      	str	r2, [r3, #12]
    TxHeader->IDE = CAN_ID_STD;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	609a      	str	r2, [r3, #8]
    TxHeader->TransmitGlobalTime = DISABLE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	751a      	strb	r2, [r3, #20]
    TxHeader->StdId = StdId;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	601a      	str	r2, [r3, #0]
    TxHeader->DLC = DLC;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	611a      	str	r2, [r3, #16]
}
 8009682:	bf00      	nop
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <CANBUS_Filter>:

uint8_t CANBUS_Filter(void) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b08a      	sub	sp, #40	; 0x28
 8009694:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]
    // set filter to mask mode (not id_list mode)
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]
    // set 32-bit scale configuration
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800969e:	2301      	movs	r3, #1
 80096a0:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80096a2:	2300      	movs	r3, #0
 80096a4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
    // assign filter to FIFO 0
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
    // activate filter
    sFilterConfig.FilterActivation = ENABLE;
 80096b6:	2301      	movs	r3, #1
 80096b8:	623b      	str	r3, [r7, #32]

    return (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) == HAL_OK);
 80096ba:	463b      	mov	r3, r7
 80096bc:	4619      	mov	r1, r3
 80096be:	4806      	ldr	r0, [pc, #24]	; (80096d8 <CANBUS_Filter+0x48>)
 80096c0:	f7f9 f8e6 	bl	8002890 <HAL_CAN_ConfigFilter>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf0c      	ite	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	2300      	movne	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3728      	adds	r7, #40	; 0x28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200003b4 	.word	0x200003b4

080096dc <CANBUS_Write>:

/*----------------------------------------------------------------------------
 wite a message to CAN peripheral and transmit it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Write(canbus_tx_t *tx) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;

    lock();
 80096e4:	f000 f856 	bl	8009794 <lock>
    // check tx mailbox is ready
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 80096e8:	e002      	b.n	80096f0 <CANBUS_Write+0x14>
        _DelayMS(1);
 80096ea:	2001      	movs	r0, #1
 80096ec:	f000 ffe5 	bl	800a6ba <_DelayMS>
    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)) {
 80096f0:	480e      	ldr	r0, [pc, #56]	; (800972c <CANBUS_Write+0x50>)
 80096f2:	f7f9 fad8 	bl	8002ca6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f6      	beq.n	80096ea <CANBUS_Write+0xe>
    };

    /* Start the Transmission process */
    status = HAL_CAN_AddTxMessage(&hcan1, &(tx->header), tx->data.u8, &TxMailbox);
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f103 0218 	add.w	r2, r3, #24
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	4808      	ldr	r0, [pc, #32]	; (800972c <CANBUS_Write+0x50>)
 800970a:	f7f9 f9f1 	bl	8002af0 <HAL_CAN_AddTxMessage>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

//    if (status == HAL_OK) {
//        CANBUS_TxDebugger();
//    }
    unlock();
 8009712:	f000 f846 	bl	80097a2 <unlock>

    return (status == HAL_OK);
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	2b00      	cmp	r3, #0
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200003b4 	.word	0x200003b4

08009730 <CANBUS_Read>:

/*----------------------------------------------------------------------------
 read a message from CAN peripheral and release it
 *----------------------------------------------------------------------------*/
uint8_t CANBUS_Read(canbus_rx_t *rx) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    lock();
 8009738:	f000 f82c 	bl	8009794 <lock>
    /* Get RX message */
    status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(rx->header), rx->data.u8);
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3320      	adds	r3, #32
 8009742:	2100      	movs	r1, #0
 8009744:	4808      	ldr	r0, [pc, #32]	; (8009768 <CANBUS_Read+0x38>)
 8009746:	f7f9 fae3 	bl	8002d10 <HAL_CAN_GetRxMessage>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]

    //    if (status == HAL_OK) {
    //        CANBUS_RxDebugger();
    //    }
    unlock();
 800974e:	f000 f828 	bl	80097a2 <unlock>

    return (status == HAL_OK);
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	2b00      	cmp	r3, #0
 8009756:	bf0c      	ite	eq
 8009758:	2301      	moveq	r3, #1
 800975a:	2300      	movne	r3, #0
 800975c:	b2db      	uxtb	r3, r3
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200003b4 	.word	0x200003b4

0800976c <CANBUS_ReadID>:

uint32_t CANBUS_ReadID(void) {
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
    if (CB.rx.header.IDE == CAN_ID_STD) {
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <CANBUS_ReadID+0x24>)
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <CANBUS_ReadID+0x12>
        return CB.rx.header.StdId;
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <CANBUS_ReadID+0x24>)
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	e002      	b.n	8009784 <CANBUS_ReadID+0x18>
    }
    return _R(CB.rx.header.ExtId, 20);
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <CANBUS_ReadID+0x24>)
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	0d1b      	lsrs	r3, r3, #20
}
 8009784:	4618      	mov	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000a00 	.word	0x20000a00

08009794 <lock>:
    }
}
#endif

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CanTxMutexHandle, osWaitForever);
#endif
}
 8009798:	bf00      	nop
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <unlock>:

static void unlock(void) {
 80097a2:	b480      	push	{r7}
 80097a4:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CanTxMutexHandle);
#endif
}
 80097a6:	bf00      	nop
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <CRC_Calculate8>:
/* Private functions declaration ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint32_t CRC_Calculate8(uint8_t *arr, uint32_t count, uint8_t swapped) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	; 0x28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	71fb      	strb	r3, [r7, #7]
    uint32_t cnt, result, value = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0, remaining[4] = { 0 };
 80097c2:	2300      	movs	r3, #0
 80097c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]

    lock();
 80097cc:	f000 f85c 	bl	8009888 <lock>

    /* Reset generator */
    __HAL_CRC_DR_RESET(&hcrc);
 80097d0:	4b2c      	ldr	r3, [pc, #176]	; (8009884 <CRC_Calculate8+0xd4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689a      	ldr	r2, [r3, #8]
 80097d6:	4b2b      	ldr	r3, [pc, #172]	; (8009884 <CRC_Calculate8+0xd4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	609a      	str	r2, [r3, #8]

    /* Calculate number of 32-bit blocks */
    cnt = count >> 2;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	089b      	lsrs	r3, r3, #2
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate */
    while (cnt--) {
 80097e6:	e011      	b.n	800980c <CRC_Calculate8+0x5c>
        value = *(uint32_t*) arr;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	61fb      	str	r3, [r7, #28]
        /* Set new value */
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d004      	beq.n	80097fe <CRC_Calculate8+0x4e>
 80097f4:	69f8      	ldr	r0, [r7, #28]
 80097f6:	f000 ff9e 	bl	800a736 <_ByteSwap32>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e000      	b.n	8009800 <CRC_Calculate8+0x50>
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4a20      	ldr	r2, [pc, #128]	; (8009884 <CRC_Calculate8+0xd4>)
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	6013      	str	r3, [r2, #0]

        /* Increase by 4 */
        arr += 4;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3304      	adds	r3, #4
 800980a:	60fb      	str	r3, [r7, #12]
    while (cnt--) {
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	1e5a      	subs	r2, r3, #1
 8009810:	627a      	str	r2, [r7, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e8      	bne.n	80097e8 <CRC_Calculate8+0x38>
    }

    /* Calculate remaining data as 8-bit */
    cnt = count % 4;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f003 0303 	and.w	r3, r3, #3
 800981c:	627b      	str	r3, [r7, #36]	; 0x24

    if (cnt) {
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d024      	beq.n	800986e <CRC_Calculate8+0xbe>
        /* Calculate */
        while (cnt--) {
 8009824:	e00e      	b.n	8009844 <CRC_Calculate8+0x94>
            remaining[index++] = *arr++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	60fa      	str	r2, [r7, #12]
 800982c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009830:	1c51      	adds	r1, r2, #1
 8009832:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
 8009836:	4611      	mov	r1, r2
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800983e:	440b      	add	r3, r1
 8009840:	f803 2c14 	strb.w	r2, [r3, #-20]
        while (cnt--) {
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	1e5a      	subs	r2, r3, #1
 8009848:	627a      	str	r2, [r7, #36]	; 0x24
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1eb      	bne.n	8009826 <CRC_Calculate8+0x76>
        }
        /* Set new value */
        value = *(uint32_t*) remaining;
 800984e:	f107 0314 	add.w	r3, r7, #20
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	61fb      	str	r3, [r7, #28]
        hcrc.Instance->DR = swapped ? _ByteSwap32(value) : value;
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <CRC_Calculate8+0xb6>
 800985c:	69f8      	ldr	r0, [r7, #28]
 800985e:	f000 ff6a 	bl	800a736 <_ByteSwap32>
 8009862:	4603      	mov	r3, r0
 8009864:	e000      	b.n	8009868 <CRC_Calculate8+0xb8>
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4a06      	ldr	r2, [pc, #24]	; (8009884 <CRC_Calculate8+0xd4>)
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	6013      	str	r3, [r2, #0]
    }
    result = hcrc.Instance->DR;
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <CRC_Calculate8+0xd4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	61bb      	str	r3, [r7, #24]

    unlock();
 8009876:	f000 f80e 	bl	8009896 <unlock>
    /* Return data */
    return result;
 800987a:	69bb      	ldr	r3, [r7, #24]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	; 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	200002b8 	.word	0x200002b8

08009888 <lock>:

    return result;
}

/* Private functions implementation --------------------------------------------*/
static void lock(void) {
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(CrcMutexHandle, osWaitForever);
#endif
}
 800988c:	bf00      	nop
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <unlock>:

static void unlock(void) {
 8009896:	b480      	push	{r7}
 8009898:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(CrcMutexHandle);
#endif
}
 800989a:	bf00      	nop
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <EEPROM24XX_SetDevice>:

/* Private variables ----------------------------------------------------------*/
static uint16_t DevAddress = EEPROM24_MAIN;

/* Public functions implementation ---------------------------------------------*/
void EEPROM24XX_SetDevice(EEPROM24_DEVICE Device) {
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
    DevAddress = Device;
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <EEPROM24XX_SetDevice+0x20>)
 80098b4:	801a      	strh	r2, [r3, #0]
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	2000000a 	.word	0x2000000a

080098c8 <EEPROM24XX_IsConnected>:

uint8_t EEPROM24XX_IsConnected(void) {
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&hi2c2, DevAddress, 2, 1000) == HAL_OK);
 80098cc:	4b07      	ldr	r3, [pc, #28]	; (80098ec <EEPROM24XX_IsConnected+0x24>)
 80098ce:	8819      	ldrh	r1, [r3, #0]
 80098d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098d4:	2202      	movs	r2, #2
 80098d6:	4806      	ldr	r0, [pc, #24]	; (80098f0 <EEPROM24XX_IsConnected+0x28>)
 80098d8:	f7fb fa92 	bl	8004e00 <HAL_I2C_IsDeviceReady>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bf0c      	ite	eq
 80098e2:	2301      	moveq	r3, #1
 80098e4:	2300      	movne	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	2000000a 	.word	0x2000000a
 80098f0:	200002c0 	.word	0x200002c0

080098f4 <EEPROM24XX_Save>:

uint8_t EEPROM24XX_Save(uint16_t Address, void *data, size_t size_of_data) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af04      	add	r7, sp, #16
 80098fa:	4603      	mov	r3, r0
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	81fb      	strh	r3, [r7, #14]
    if (size_of_data > 32) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b20      	cmp	r3, #32
 8009906:	d901      	bls.n	800990c <EEPROM24XX_Save+0x18>
        return 0;
 8009908:	2300      	movs	r3, #0
 800990a:	e017      	b.n	800993c <EEPROM24XX_Save+0x48>
    }

    if (HAL_I2C_Mem_Write(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK) {
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <EEPROM24XX_Save+0x50>)
 800990e:	8819      	ldrh	r1, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	b29b      	uxth	r3, r3
 8009914:	89f8      	ldrh	r0, [r7, #14]
 8009916:	2264      	movs	r2, #100	; 0x64
 8009918:	9202      	str	r2, [sp, #8]
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	2310      	movs	r3, #16
 8009922:	4602      	mov	r2, r0
 8009924:	4808      	ldr	r0, [pc, #32]	; (8009948 <EEPROM24XX_Save+0x54>)
 8009926:	f7fa ff4b 	bl	80047c0 <HAL_I2C_Mem_Write>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <EEPROM24XX_Save+0x46>
        _DelayMS(15);
 8009930:	200f      	movs	r0, #15
 8009932:	f000 fec2 	bl	800a6ba <_DelayMS>
        return 1;
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <EEPROM24XX_Save+0x48>
    }
    return 0;
 800993a:	2300      	movs	r3, #0

}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	2000000a 	.word	0x2000000a
 8009948:	200002c0 	.word	0x200002c0

0800994c <EEPROM24XX_Load>:

uint8_t EEPROM24XX_Load(uint16_t Address, void *data, size_t size_of_data) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af04      	add	r7, sp, #16
 8009952:	4603      	mov	r3, r0
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	81fb      	strh	r3, [r7, #14]
    return (HAL_I2C_Mem_Read(&hi2c2, DevAddress, Address, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, size_of_data, 100) == HAL_OK);
 800995a:	4b0c      	ldr	r3, [pc, #48]	; (800998c <EEPROM24XX_Load+0x40>)
 800995c:	8819      	ldrh	r1, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	b29b      	uxth	r3, r3
 8009962:	89f8      	ldrh	r0, [r7, #14]
 8009964:	2264      	movs	r2, #100	; 0x64
 8009966:	9202      	str	r2, [sp, #8]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	2310      	movs	r3, #16
 8009970:	4602      	mov	r2, r0
 8009972:	4807      	ldr	r0, [pc, #28]	; (8009990 <EEPROM24XX_Load+0x44>)
 8009974:	f7fb f81e 	bl	80049b4 <HAL_I2C_Mem_Read>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	bf0c      	ite	eq
 800997e:	2301      	moveq	r3, #1
 8009980:	2300      	movne	r3, #0
 8009982:	b2db      	uxtb	r3, r3
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	2000000a 	.word	0x2000000a
 8009990:	200002c0 	.word	0x200002c0

08009994 <LOG_Char>:
/* Private functions declarations ----------------------------------------------*/
static void lock(void);
static void unlock(void);

/* Public functions implementation ---------------------------------------------*/
void LOG_Char(char ch) {
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
    uint32_t tick;

    tick = _GetTickMS();
 800999e:	f000 fe97 	bl	800a6d0 <_GetTickMS>
 80099a2:	60f8      	str	r0, [r7, #12]
    // wait if busy
    while (1) {
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 80099a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <LOG_Char+0x30>
 80099ae:	f000 fe8f 	bl	800a6d0 <_GetTickMS>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b09      	cmp	r3, #9
 80099ba:	d803      	bhi.n	80099c4 <LOG_Char+0x30>
            break;
        }
        _DelayMS(1);
 80099bc:	2001      	movs	r0, #1
 80099be:	f000 fe7c 	bl	800a6ba <_DelayMS>
        if (ITM->PORT[0].u32 != 0 || _GetTickMS() - tick >= 10) {
 80099c2:	e7ef      	b.n	80099a4 <LOG_Char+0x10>
    }
    // send to ITM0
    ITM->PORT[0].u8 = (uint8_t) ch;
 80099c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	7013      	strb	r3, [r2, #0]
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <LOG_Enter>:

void LOG_Enter(void) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
    lock();
 80099d8:	f000 f902 	bl	8009be0 <lock>
    LOG_Char('\n');
 80099dc:	200a      	movs	r0, #10
 80099de:	f7ff ffd9 	bl	8009994 <LOG_Char>
    unlock();
 80099e2:	f000 f904 	bl	8009bee <unlock>
}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <LOG_Int>:

void LOG_Int(int32_t num) {
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
    lock();
 80099f4:	f000 f8f4 	bl	8009be0 <lock>

    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da05      	bge.n	8009a0e <LOG_Int+0x22>
        LOG_Char('-');
 8009a02:	202d      	movs	r0, #45	; 0x2d
 8009a04:	f7ff ffc6 	bl	8009994 <LOG_Char>
        num *= -1;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	425b      	negs	r3, r3
 8009a0c:	607b      	str	r3, [r7, #4]
    }
    do
        str[i++] = num % 10 + '0';
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <LOG_Int+0x98>)
 8009a12:	fb83 1302 	smull	r1, r3, r3, r2
 8009a16:	1099      	asrs	r1, r3, #2
 8009a18:	17d3      	asrs	r3, r2, #31
 8009a1a:	1ac9      	subs	r1, r1, r3
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	1ad1      	subs	r1, r2, r3
 8009a26:	b2ca      	uxtb	r2, r1
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	1c59      	adds	r1, r3, #1
 8009a2c:	6179      	str	r1, [r7, #20]
 8009a2e:	3230      	adds	r2, #48	; 0x30
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	f107 0118 	add.w	r1, r7, #24
 8009a36:	440b      	add	r3, r1
 8009a38:	f803 2c10 	strb.w	r2, [r3, #-16]
    while ((num /= 10) > 0);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <LOG_Int+0x98>)
 8009a40:	fb82 1203 	smull	r1, r2, r2, r3
 8009a44:	1092      	asrs	r2, r2, #2
 8009a46:	17db      	asrs	r3, r3, #31
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	607b      	str	r3, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dcdd      	bgt.n	8009a0e <LOG_Int+0x22>
    for (i--; i >= 0; i--)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e00a      	b.n	8009a70 <LOG_Int+0x84>
        LOG_Char(str[i]);
 8009a5a:	f107 0208 	add.w	r2, r7, #8
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	4413      	add	r3, r2
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff ff95 	bl	8009994 <LOG_Char>
    for (i--; i >= 0; i--)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	daf1      	bge.n	8009a5a <LOG_Int+0x6e>

    unlock();
 8009a76:	f000 f8ba 	bl	8009bee <unlock>
}
 8009a7a:	bf00      	nop
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	66666667 	.word	0x66666667

08009a88 <LOG_Hex32>:
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);

    unlock();
}

void LOG_Hex32(uint32_t num) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    lock();
 8009a90:	f000 f8a6 	bl	8009be0 <lock>

    uint8_t i;
    for (i = 28; i > 0; i -= 4)
 8009a94:	231c      	movs	r3, #28
 8009a96:	73fb      	strb	r3, [r7, #15]
 8009a98:	e00d      	b.n	8009ab6 <LOG_Hex32+0x2e>
        LOG_Char(HEX_CHARS[(num >> i) % 0x10]);
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	f003 030f 	and.w	r3, r3, #15
 8009aa6:	4a0c      	ldr	r2, [pc, #48]	; (8009ad8 <LOG_Hex32+0x50>)
 8009aa8:	5cd3      	ldrb	r3, [r2, r3]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff ff72 	bl	8009994 <LOG_Char>
    for (i = 28; i > 0; i -= 4)
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	73fb      	strb	r3, [r7, #15]
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1ee      	bne.n	8009a9a <LOG_Hex32+0x12>
    LOG_Char(HEX_CHARS[(num & 0x0f) % 0x10]);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	4a05      	ldr	r2, [pc, #20]	; (8009ad8 <LOG_Hex32+0x50>)
 8009ac4:	5cd3      	ldrb	r3, [r2, r3]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff ff64 	bl	8009994 <LOG_Char>

    unlock();
 8009acc:	f000 f88f 	bl	8009bee <unlock>
}
 8009ad0:	bf00      	nop
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	0800b6d0 	.word	0x0800b6d0

08009adc <LOG_Str>:

void LOG_Str(char *str) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
    lock();
 8009ae4:	f000 f87c 	bl	8009be0 <lock>

    while (*str != '\0')
 8009ae8:	e006      	b.n	8009af8 <LOG_Str+0x1c>
        LOG_Char(*str++);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff4e 	bl	8009994 <LOG_Char>
    while (*str != '\0')
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f4      	bne.n	8009aea <LOG_Str+0xe>

    unlock();
 8009b00:	f000 f875 	bl	8009bee <unlock>
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <LOG_StrLn>:

void LOG_StrLn(char *str) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
    lock();
 8009b14:	f000 f864 	bl	8009be0 <lock>

    while (*str != '\0') {
 8009b18:	e006      	b.n	8009b28 <LOG_StrLn+0x1c>
        LOG_Char(*str++);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff ff36 	bl	8009994 <LOG_Char>
    while (*str != '\0') {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1f4      	bne.n	8009b1a <LOG_StrLn+0xe>
    }
    LOG_Char('\n');
 8009b30:	200a      	movs	r0, #10
 8009b32:	f7ff ff2f 	bl	8009994 <LOG_Char>

    unlock();
 8009b36:	f000 f85a 	bl	8009bee <unlock>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <LOG_Buf>:

void LOG_Buf(char *buf, uint16_t bufsize) {
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	807b      	strh	r3, [r7, #2]
    lock();
 8009b4e:	f000 f847 	bl	8009be0 <lock>

    uint16_t i;
    for (i = 0; i < bufsize; i++)
 8009b52:	2300      	movs	r3, #0
 8009b54:	81fb      	strh	r3, [r7, #14]
 8009b56:	e009      	b.n	8009b6c <LOG_Buf+0x2a>
        LOG_Char(*buf++);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff ff17 	bl	8009994 <LOG_Char>
    for (i = 0; i < bufsize; i++)
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	81fb      	strh	r3, [r7, #14]
 8009b6c:	89fa      	ldrh	r2, [r7, #14]
 8009b6e:	887b      	ldrh	r3, [r7, #2]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d3f1      	bcc.n	8009b58 <LOG_Buf+0x16>

    unlock();
 8009b74:	f000 f83b 	bl	8009bee <unlock>
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <LOG_BufHex>:
    }

    unlock();
}

void LOG_BufHex(char *buf, uint16_t bufsize) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	807b      	strh	r3, [r7, #2]
    lock();
 8009b8c:	f000 f828 	bl	8009be0 <lock>

    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8009b90:	2300      	movs	r3, #0
 8009b92:	81fb      	strh	r3, [r7, #14]
 8009b94:	e018      	b.n	8009bc8 <LOG_BufHex+0x48>
        ch = *buf++;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	737b      	strb	r3, [r7, #13]
        LOG_Char(HEX_CHARS[(ch >> 4) % 0x10]);
 8009ba0:	7b7b      	ldrb	r3, [r7, #13]
 8009ba2:	091b      	lsrs	r3, r3, #4
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4b0c      	ldr	r3, [pc, #48]	; (8009bdc <LOG_BufHex+0x5c>)
 8009baa:	5c9b      	ldrb	r3, [r3, r2]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fef1 	bl	8009994 <LOG_Char>
        LOG_Char(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8009bb2:	7b7b      	ldrb	r3, [r7, #13]
 8009bb4:	f003 030f 	and.w	r3, r3, #15
 8009bb8:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <LOG_BufHex+0x5c>)
 8009bba:	5cd3      	ldrb	r3, [r2, r3]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fee9 	bl	8009994 <LOG_Char>
    for (i = 0; i < bufsize; i++) {
 8009bc2:	89fb      	ldrh	r3, [r7, #14]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	81fb      	strh	r3, [r7, #14]
 8009bc8:	89fa      	ldrh	r2, [r7, #14]
 8009bca:	887b      	ldrh	r3, [r7, #2]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d3e2      	bcc.n	8009b96 <LOG_BufHex+0x16>
    }

    unlock();
 8009bd0:	f000 f80d 	bl	8009bee <unlock>
}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	0800b6d0 	.word	0x0800b6d0

08009be0 <lock>:

    unlock();
}

/* Private functions implementations ----------------------------------------------*/
static void lock(void) {
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(LogMutexHandle, osWaitForever);
#endif
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <unlock>:

static void unlock(void) {
 8009bee:	b480      	push	{r7}
 8009bf0:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(LogMutexHandle);
#endif
}
 8009bf2:	bf00      	nop
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <EEPROM_Init>:
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size);
static void lock(void);
static void unlock(void);

/* Public functions implementation --------------------------------------------*/
uint8_t EEPROM_Init(void) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
    uint8_t retry, ret = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	71bb      	strb	r3, [r7, #6]
    const uint8_t MAX_RETRY = 5;
 8009c06:	2305      	movs	r3, #5
 8009c08:	713b      	strb	r3, [r7, #4]
    const EEPROM24_DEVICE EEPROMS[2] = {
 8009c0a:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <EEPROM_Init+0x9c>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	803b      	strh	r3, [r7, #0]
            EEPROM24_MAIN,
            EEPROM24_BACKUP
    };

    lock();
 8009c10:	f000 f897 	bl	8009d42 <lock>
    LOG_StrLn("EEPROM:Init");
 8009c14:	4821      	ldr	r0, [pc, #132]	; (8009c9c <EEPROM_Init+0xa0>)
 8009c16:	f7ff ff79 	bl	8009b0c <LOG_StrLn>
    // check each eeprom
    for (uint8_t i = 0; i < 1; i++) {
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	717b      	strb	r3, [r7, #5]
 8009c1e:	e02a      	b.n	8009c76 <EEPROM_Init+0x7a>
        if (!ret) {
 8009c20:	79bb      	ldrb	r3, [r7, #6]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d124      	bne.n	8009c70 <EEPROM_Init+0x74>
            retry = MAX_RETRY;
 8009c26:	793b      	ldrb	r3, [r7, #4]
 8009c28:	71fb      	strb	r3, [r7, #7]
            EEPROM24XX_SetDevice(EEPROMS[i]);
 8009c2a:	797b      	ldrb	r3, [r7, #5]
 8009c2c:	f107 0208 	add.w	r2, r7, #8
 8009c30:	4413      	add	r3, r2
 8009c32:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fe34 	bl	80098a4 <EEPROM24XX_SetDevice>
            do {
                if (EEPROM24XX_IsConnected()) {
 8009c3c:	f7ff fe44 	bl	80098c8 <EEPROM24XX_IsConnected>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00c      	beq.n	8009c60 <EEPROM_Init+0x64>
                    LOG_Str("EEPROM:Device = ");
 8009c46:	4816      	ldr	r0, [pc, #88]	; (8009ca0 <EEPROM_Init+0xa4>)
 8009c48:	f7ff ff48 	bl	8009adc <LOG_Str>
                    LOG_Int(i + 1);
 8009c4c:	797b      	ldrb	r3, [r7, #5]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff fecb 	bl	80099ec <LOG_Int>
                    LOG_Enter();
 8009c56:	f7ff febd 	bl	80099d4 <LOG_Enter>

                    ret = 1;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	71bb      	strb	r3, [r7, #6]
                    break;
 8009c5e:	e007      	b.n	8009c70 <EEPROM_Init+0x74>
                }
                _DelayMS(50);
 8009c60:	2032      	movs	r0, #50	; 0x32
 8009c62:	f000 fd2a 	bl	800a6ba <_DelayMS>
            } while (retry--);
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	1e5a      	subs	r2, r3, #1
 8009c6a:	71fa      	strb	r2, [r7, #7]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e5      	bne.n	8009c3c <EEPROM_Init+0x40>
    for (uint8_t i = 0; i < 1; i++) {
 8009c70:	797b      	ldrb	r3, [r7, #5]
 8009c72:	3301      	adds	r3, #1
 8009c74:	717b      	strb	r3, [r7, #5]
 8009c76:	797b      	ldrb	r3, [r7, #5]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0d1      	beq.n	8009c20 <EEPROM_Init+0x24>
        }
    }

    // all failed
    if (!ret) {
 8009c7c:	79bb      	ldrb	r3, [r7, #6]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <EEPROM_Init+0x8c>
        LOG_StrLn("EEPROM:Error");
 8009c82:	4808      	ldr	r0, [pc, #32]	; (8009ca4 <EEPROM_Init+0xa8>)
 8009c84:	f7ff ff42 	bl	8009b0c <LOG_StrLn>
    }
    unlock();
 8009c88:	f000 f862 	bl	8009d50 <unlock>
#if (!BOOTLOADER)
    // Load or Reset
    EEPROM_ResetOrLoad();
    EEPROM_FirmwareVersion(EE_CMD_R, EE_NULL, IAP_TYPE_VCU);
#endif
    return ret;
 8009c8c:	79bb      	ldrb	r3, [r7, #6]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	0800b714 	.word	0x0800b714
 8009c9c:	0800b6e4 	.word	0x0800b6e4
 8009ca0:	0800b6f0 	.word	0x0800b6f0
 8009ca4:	0800b704 	.word	0x0800b704

08009ca8 <EEPROM_FlagDFU>:
    }

    return ret;
}
#else
uint8_t EEPROM_FlagDFU(EEPROM_COMMAND cmd, uint32_t value) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
    return EE_Command(VADDR_DFU_FLAG, cmd, &value, &DFU_FLAG, sizeof(value));
 8009cb4:	463a      	mov	r2, r7
 8009cb6:	79f9      	ldrb	r1, [r7, #7]
 8009cb8:	2304      	movs	r3, #4
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <EEPROM_FlagDFU+0x28>)
 8009cbe:	2020      	movs	r0, #32
 8009cc0:	f000 f808 	bl	8009cd4 <EE_Command>
 8009cc4:	4603      	mov	r3, r0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200002ac 	.word	0x200002ac

08009cd4 <EE_Command>:

    return EE_Command(vaddr, cmd, &value, ptr, sizeof(value));
}

/* Private functions implementation --------------------------------------------*/
static uint8_t EE_Command(uint16_t vaddr, EEPROM_COMMAND cmd, void *value, void *ptr, uint16_t size) {
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60ba      	str	r2, [r7, #8]
 8009cdc:	607b      	str	r3, [r7, #4]
 8009cde:	4603      	mov	r3, r0
 8009ce0:	81fb      	strh	r3, [r7, #14]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	737b      	strb	r3, [r7, #13]
    uint8_t ret = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]

    lock();
 8009cea:	f000 f82a 	bl	8009d42 <lock>

    // check if new value is same with old value
    if (cmd == EE_CMD_W) {
 8009cee:	7b7b      	ldrb	r3, [r7, #13]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d10e      	bne.n	8009d12 <EE_Command+0x3e>
        // apply the value
        memcpy(ptr, value, size);
 8009cf4:	8c3b      	ldrh	r3, [r7, #32]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fd77 	bl	800a7ee <memcpy>
        // save the value
        ret = EEPROM24XX_Save(vaddr, value, size);
 8009d00:	8c3a      	ldrh	r2, [r7, #32]
 8009d02:	89fb      	ldrh	r3, [r7, #14]
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fdf4 	bl	80098f4 <EEPROM24XX_Save>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	e010      	b.n	8009d34 <EE_Command+0x60>
    } else {
        // load the value
        ret = EEPROM24XX_Load(vaddr, value, size);
 8009d12:	8c3a      	ldrh	r2, [r7, #32]
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff fe17 	bl	800994c <EEPROM24XX_Load>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75fb      	strb	r3, [r7, #23]
        // apply the value
        if (ret) {
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <EE_Command+0x60>
            memcpy(ptr, value, size);
 8009d28:	8c3b      	ldrh	r3, [r7, #32]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fd5d 	bl	800a7ee <memcpy>
        }
    }

    unlock();
 8009d34:	f000 f80c 	bl	8009d50 <unlock>
    return ret;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <lock>:

static void lock(void) {
 8009d42:	b480      	push	{r7}
 8009d44:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(EepromMutexHandle, osWaitForever);
#endif
}
 8009d46:	bf00      	nop
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <unlock>:

static void unlock(void) {
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(EepromMutexHandle);
#endif
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <Simcom_Lock>:
static SIMCOM_RESULT Simcom_ProcessACK(header_t *header);
static uint8_t Simcom_CommandoIRQ(void);
#endif

/* Public functions implementation --------------------------------------------*/
void Simcom_Lock(void) {
 8009d5e:	b480      	push	{r7}
 8009d60:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexAcquire(SimcomRecMutexHandle, osWaitForever);
#endif
}
 8009d62:	bf00      	nop
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <Simcom_Unlock>:

void Simcom_Unlock(void) {
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
#if (!BOOTLOADER)
    osMutexRelease(SimcomRecMutexHandle);
#endif
}
 8009d70:	bf00      	nop
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <Simcom_Response>:

char* Simcom_Response(char *str) {
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    return strstr(SIMCOM_UART_RX, str);
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4804      	ldr	r0, [pc, #16]	; (8009d98 <Simcom_Response+0x1c>)
 8009d88:	f000 fd76 	bl	800a878 <strstr>
 8009d8c:	4603      	mov	r3, r0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000400 	.word	0x20000400

08009d9c <Simcom_SetState>:

uint8_t Simcom_SetState(SIMCOM_STATE state, uint32_t timeout) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b096      	sub	sp, #88	; 0x58
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
    SIMCOM_STATE lastState = SIM_STATE_DOWN;
 8009da8:	23ff      	movs	r3, #255	; 0xff
 8009daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    uint32_t tick = _GetTickMS();
 8009dae:	f000 fc8f 	bl	800a6d0 <_GetTickMS>
 8009db2:	6538      	str	r0, [r7, #80]	; 0x50
    static uint8_t init = 1;
    uint8_t depth = 3;
 8009db4:	2303      	movs	r3, #3
 8009db6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    SIMCOM_RESULT p;

    Simcom_Lock();
 8009dba:	f7ff ffd0 	bl	8009d5e <Simcom_Lock>
    // Handle SIMCOM state properly
    do {
        // Handle timeout
        if (timeout) {
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d012      	beq.n	8009dea <Simcom_SetState+0x4e>
            // Update tick
            if (p == SIM_RESULT_OK) {
 8009dc4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d102      	bne.n	8009dd2 <Simcom_SetState+0x36>
                tick = _GetTickMS();
 8009dcc:	f000 fc80 	bl	800a6d0 <_GetTickMS>
 8009dd0:	6538      	str	r0, [r7, #80]	; 0x50
            }
            // Timeout expired
            if ((_GetTickMS() - tick) > timeout) {
 8009dd2:	f000 fc7d 	bl	800a6d0 <_GetTickMS>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d203      	bcs.n	8009dea <Simcom_SetState+0x4e>
                LOG_StrLn("Simcom:StateTimeout");
 8009de2:	48bd      	ldr	r0, [pc, #756]	; (800a0d8 <Simcom_SetState+0x33c>)
 8009de4:	f7ff fe92 	bl	8009b0c <LOG_StrLn>
                break;
 8009de8:	e1c8      	b.n	800a17c <Simcom_SetState+0x3e0>
            }
        }
        // Handle locked-loop
        if (SIM.state < lastState) {
 8009dea:	4bbc      	ldr	r3, [pc, #752]	; (800a0dc <Simcom_SetState+0x340>)
 8009dec:	f993 3000 	ldrsb.w	r3, [r3]
 8009df0:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8009df4:	429a      	cmp	r2, r3
 8009df6:	dd16      	ble.n	8009e26 <Simcom_SetState+0x8a>
            if (!--depth) {
 8009df8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009e02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d103      	bne.n	8009e12 <Simcom_SetState+0x76>
                SIM.state = SIM_STATE_DOWN;
 8009e0a:	4bb4      	ldr	r3, [pc, #720]	; (800a0dc <Simcom_SetState+0x340>)
 8009e0c:	22ff      	movs	r2, #255	; 0xff
 8009e0e:	701a      	strb	r2, [r3, #0]
                break;
 8009e10:	e1b4      	b.n	800a17c <Simcom_SetState+0x3e0>
            }
            LOG_Str("Simcom:LockedLoop = ");
 8009e12:	48b3      	ldr	r0, [pc, #716]	; (800a0e0 <Simcom_SetState+0x344>)
 8009e14:	f7ff fe62 	bl	8009adc <LOG_Str>
            LOG_Int(depth);
 8009e18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fde5 	bl	80099ec <LOG_Int>
            LOG_Enter();
 8009e22:	f7ff fdd7 	bl	80099d4 <LOG_Enter>
        }
        // Handle signal strength
        if (SIM.state == SIM_STATE_DOWN) {
 8009e26:	4bad      	ldr	r3, [pc, #692]	; (800a0dc <Simcom_SetState+0x340>)
 8009e28:	f993 3000 	ldrsb.w	r3, [r3]
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e30:	d103      	bne.n	8009e3a <Simcom_SetState+0x9e>
            SIM.signal = 0;
 8009e32:	4baa      	ldr	r3, [pc, #680]	; (800a0dc <Simcom_SetState+0x340>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	741a      	strb	r2, [r3, #16]
 8009e38:	e00f      	b.n	8009e5a <Simcom_SetState+0xbe>
        } else {
            Simcom_IdleJob(NULL);
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	f000 faf4 	bl	800a428 <Simcom_IdleJob>
            if (SIM.state >= SIM_STATE_GPRS_ON) {
 8009e40:	4ba6      	ldr	r3, [pc, #664]	; (800a0dc <Simcom_SetState+0x340>)
 8009e42:	f993 3000 	ldrsb.w	r3, [r3]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	dd07      	ble.n	8009e5a <Simcom_SetState+0xbe>
                // Force to exit loop
                if (SIM.signal < 15) {
 8009e4a:	4ba4      	ldr	r3, [pc, #656]	; (800a0dc <Simcom_SetState+0x340>)
 8009e4c:	7c1b      	ldrb	r3, [r3, #16]
 8009e4e:	2b0e      	cmp	r3, #14
 8009e50:	d803      	bhi.n	8009e5a <Simcom_SetState+0xbe>
                    LOG_StrLn("Simcom:PoorSignal");
 8009e52:	48a4      	ldr	r0, [pc, #656]	; (800a0e4 <Simcom_SetState+0x348>)
 8009e54:	f7ff fe5a 	bl	8009b0c <LOG_StrLn>
                    break;
 8009e58:	e190      	b.n	800a17c <Simcom_SetState+0x3e0>
                }
            }
        }

        // Set value
        p = SIM_RESULT_OK;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        lastState = SIM.state;
 8009e60:	4b9e      	ldr	r3, [pc, #632]	; (800a0dc <Simcom_SetState+0x340>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        // Handle states
        switch (SIM.state) {
 8009e68:	4b9c      	ldr	r3, [pc, #624]	; (800a0dc <Simcom_SetState+0x340>)
 8009e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	f200 817a 	bhi.w	800a16a <Simcom_SetState+0x3ce>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <Simcom_SetState+0xe0>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009ee5 	.word	0x08009ee5
 8009e84:	08009fb9 	.word	0x08009fb9
 8009e88:	0800a07b 	.word	0x0800a07b
            case SIM_STATE_DOWN:
                // only executed at power up
                if (init) {
 8009e8c:	4b96      	ldr	r3, [pc, #600]	; (800a0e8 <Simcom_SetState+0x34c>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <Simcom_SetState+0x106>
                    init = 0;
 8009e94:	4b94      	ldr	r3, [pc, #592]	; (800a0e8 <Simcom_SetState+0x34c>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:Init");
 8009e9a:	4894      	ldr	r0, [pc, #592]	; (800a0ec <Simcom_SetState+0x350>)
 8009e9c:	f7ff fe36 	bl	8009b0c <LOG_StrLn>
 8009ea0:	e002      	b.n	8009ea8 <Simcom_SetState+0x10c>
                } else {
                    LOG_StrLn("Simcom:Restarting...");
 8009ea2:	4893      	ldr	r0, [pc, #588]	; (800a0f0 <Simcom_SetState+0x354>)
 8009ea4:	f7ff fe32 	bl	8009b0c <LOG_StrLn>
                }

                // power up the module
                p = Simcom_Power();
 8009ea8:	f000 fb26 	bl	800a4f8 <Simcom_Power>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

                // upgrade simcom state
                if (p > 0) {
 8009eb2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dd0c      	ble.n	8009ed4 <Simcom_SetState+0x138>
                    SIM.state++;
 8009eba:	4b88      	ldr	r3, [pc, #544]	; (800a0dc <Simcom_SetState+0x340>)
 8009ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	b25a      	sxtb	r2, r3
 8009ec8:	4b84      	ldr	r3, [pc, #528]	; (800a0dc <Simcom_SetState+0x340>)
 8009eca:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:ON");
 8009ecc:	4889      	ldr	r0, [pc, #548]	; (800a0f4 <Simcom_SetState+0x358>)
 8009ece:	f7ff fe1d 	bl	8009b0c <LOG_StrLn>
 8009ed2:	e002      	b.n	8009eda <Simcom_SetState+0x13e>
                } else {
                    LOG_StrLn("Simcom:Error");
 8009ed4:	4888      	ldr	r0, [pc, #544]	; (800a0f8 <Simcom_SetState+0x35c>)
 8009ed6:	f7ff fe19 	bl	8009b0c <LOG_StrLn>
                }

                _DelayMS(500);
 8009eda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ede:	f000 fbec 	bl	800a6ba <_DelayMS>
                break;
 8009ee2:	e143      	b.n	800a16c <Simcom_SetState+0x3d0>
            case SIM_STATE_READY:
                // =========== BASIC CONFIGURATION
                // disable command echo
                if (p > 0) {
 8009ee4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dd05      	ble.n	8009ef8 <Simcom_SetState+0x15c>
                    p = AT_CommandEchoMode(0);
 8009eec:	2000      	movs	r0, #0
 8009eee:	f7fe fb85 	bl	80085fc <AT_CommandEchoMode>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Set serial baud-rate
                if (p > 0) {
 8009ef8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dd0a      	ble.n	8009f16 <Simcom_SetState+0x17a>
                    uint32_t rate = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	64bb      	str	r3, [r7, #72]	; 0x48
                    p = AT_FixedLocalRate(ATW, &rate);
 8009f04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f08:	4619      	mov	r1, r3
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	f7fe fe44 	bl	8008b98 <AT_FixedLocalRate>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Error report format: 0, 1(Numeric), 2(verbose)
                if (p > 0) {
 8009f16:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dd0a      	ble.n	8009f34 <Simcom_SetState+0x198>
                    AT_CMEE state = CMEE_VERBOSE;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	647b      	str	r3, [r7, #68]	; 0x44
                    p = AT_ReportMobileEquipmentError(ATW, &state);
 8009f22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f26:	4619      	mov	r1, r3
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f7fe fe21 	bl	8008b70 <AT_ReportMobileEquipmentError>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Use pin DTR as sleep control
                if (p > 0) {
 8009f34:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dd0a      	ble.n	8009f52 <Simcom_SetState+0x1b6>
                    AT_CSCLK state = CSCLK_EN_DTR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	643b      	str	r3, [r7, #64]	; 0x40
                    p = AT_ConfigureSlowClock(ATW, &state);
 8009f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f44:	4619      	mov	r1, r3
 8009f46:	2000      	movs	r0, #0
 8009f48:	f7fe fdfe 	bl	8008b48 <AT_ConfigureSlowClock>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    p = AT_ShowRemoteIp(ATW, &state);
                }
#endif
                // =========== NETWORK CONFIGURATION
                // Check SIM Card
                if (p > 0) {
 8009f52:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd09      	ble.n	8009f6e <Simcom_SetState+0x1d2>
                    p = Simcom_Command("AT+CPIN?\r", "READY", 500, 0);
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009f60:	4966      	ldr	r1, [pc, #408]	; (800a0fc <Simcom_SetState+0x360>)
 8009f62:	4867      	ldr	r0, [pc, #412]	; (800a100 <Simcom_SetState+0x364>)
 8009f64:	f000 f9f4 	bl	800a350 <Simcom_Command>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Disable presentation of <AcT>&<rac> at CREG and CGREG
                if (p > 0) {
 8009f6e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	dd0e      	ble.n	8009f94 <Simcom_SetState+0x1f8>
                    at_csact_t param = {
 8009f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	605a      	str	r2, [r3, #4]
 8009f80:	609a      	str	r2, [r3, #8]
                            .creg = 0,
                            .cgreg = 0,
                    };
                    p = AT_NetworkAttachedStatus(ATW, &param);
 8009f82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f86:	4619      	mov	r1, r3
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f7fe fca1 	bl	80088d0 <AT_NetworkAttachedStatus>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }

                // upgrade simcom state
                if (p > 0) {
 8009f94:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dd08      	ble.n	8009fae <Simcom_SetState+0x212>
                    SIM.state++;
 8009f9c:	4b4f      	ldr	r3, [pc, #316]	; (800a0dc <Simcom_SetState+0x340>)
 8009f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	b25a      	sxtb	r2, r3
 8009faa:	4b4c      	ldr	r3, [pc, #304]	; (800a0dc <Simcom_SetState+0x340>)
 8009fac:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 8009fae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009fb2:	f000 fb82 	bl	800a6ba <_DelayMS>
                break;
 8009fb6:	e0d9      	b.n	800a16c <Simcom_SetState+0x3d0>
            case SIM_STATE_CONFIGURED:
                // =========== NETWORK ATTACH
                // Set signal Generation 2G(13)/3G(14)/AUTO(2)
                if (p > 0) {
 8009fb8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dd0f      	ble.n	8009fe0 <Simcom_SetState+0x244>
                    at_cnmp_t param = {
 8009fc0:	4a50      	ldr	r2, [pc, #320]	; (800a104 <Simcom_SetState+0x368>)
 8009fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fca:	e883 0003 	stmia.w	r3, {r0, r1}
                            .mode = CNMP_ACT_AUTO,
                            .preferred = CNMP_ACT_P_UMTS
                    };
                    p = AT_RadioAccessTechnology(ATW, &param);
 8009fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	f7fe fbe5 	bl	80087a4 <AT_RadioAccessTechnology>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                }
                // Network Registration Status
                if (p > 0) {
 8009fe0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd36      	ble.n	800a056 <Simcom_SetState+0x2ba>
                    at_c_greg_t read, param = {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	2301      	movs	r3, #1
 8009fee:	623b      	str	r3, [r7, #32]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CREG", ATW, &param);
 8009ff0:	f107 031c 	add.w	r3, r7, #28
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4843      	ldr	r0, [pc, #268]	; (800a108 <Simcom_SetState+0x36c>)
 8009ffa:	f7fe fd15 	bl	8008a28 <AT_NetworkRegistration>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        if (p > 0) {
 800a004:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dd09      	ble.n	800a020 <Simcom_SetState+0x284>
                            p = AT_NetworkRegistration("CREG", ATR, &read);
 800a00c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a010:	461a      	mov	r2, r3
 800a012:	2101      	movs	r1, #1
 800a014:	483c      	ldr	r0, [pc, #240]	; (800a108 <Simcom_SetState+0x36c>)
 800a016:	f7fe fd07 	bl	8008a28 <AT_NetworkRegistration>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <Simcom_SetState+0x2a2>
 800a026:	f000 fb53 	bl	800a6d0 <_GetTickMS>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d203      	bcs.n	800a03e <Simcom_SetState+0x2a2>
                            LOG_StrLn("Simcom:StateTimeout");
 800a036:	4828      	ldr	r0, [pc, #160]	; (800a0d8 <Simcom_SetState+0x33c>)
 800a038:	f7ff fd68 	bl	8009b0c <LOG_StrLn>
                            break;
 800a03c:	e00b      	b.n	800a056 <Simcom_SetState+0x2ba>
                        }
                        _DelayMS(1000);
 800a03e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a042:	f000 fb3a 	bl	800a6ba <_DelayMS>
                    } while (p && read.stat != param.stat);
 800a046:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <Simcom_SetState+0x2ba>
 800a04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	429a      	cmp	r2, r3
 800a054:	d1cc      	bne.n	8009ff0 <Simcom_SetState+0x254>
                }

                // upgrade simcom state
                if (p > 0) {
 800a056:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd08      	ble.n	800a070 <Simcom_SetState+0x2d4>
                    SIM.state++;
 800a05e:	4b1f      	ldr	r3, [pc, #124]	; (800a0dc <Simcom_SetState+0x340>)
 800a060:	f993 3000 	ldrsb.w	r3, [r3]
 800a064:	b2db      	uxtb	r3, r3
 800a066:	3301      	adds	r3, #1
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	b25a      	sxtb	r2, r3
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <Simcom_SetState+0x340>)
 800a06e:	701a      	strb	r2, [r3, #0]
                }

                _DelayMS(500);
 800a070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a074:	f000 fb21 	bl	800a6ba <_DelayMS>
                break;
 800a078:	e078      	b.n	800a16c <Simcom_SetState+0x3d0>
            case SIM_STATE_NETWORK_ON:
                // =========== GPRS ATTACH
                // GPRS Registration Status
                if (p > 0) {
 800a07a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd52      	ble.n	800a128 <Simcom_SetState+0x38c>
                    at_c_greg_t read, param = {
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	2301      	movs	r3, #1
 800a088:	613b      	str	r3, [r7, #16]
                            .mode = CREG_MODE_DISABLE,
                            .stat = CREG_STAT_REG_HOME
                    };
                    // wait until attached
                    do {
                        p = AT_NetworkRegistration("CGREG", ATW, &param);
 800a08a:	f107 030c 	add.w	r3, r7, #12
 800a08e:	461a      	mov	r2, r3
 800a090:	2100      	movs	r1, #0
 800a092:	481e      	ldr	r0, [pc, #120]	; (800a10c <Simcom_SetState+0x370>)
 800a094:	f7fe fcc8 	bl	8008a28 <AT_NetworkRegistration>
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        if (p > 0) {
 800a09e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd09      	ble.n	800a0ba <Simcom_SetState+0x31e>
                            p = AT_NetworkRegistration("CGREG", ATR, &read);
 800a0a6:	f107 0314 	add.w	r3, r7, #20
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	4817      	ldr	r0, [pc, #92]	; (800a10c <Simcom_SetState+0x370>)
 800a0b0:	f7fe fcba 	bl	8008a28 <AT_NetworkRegistration>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                        }

                        // Handle timeout
                        if (timeout && (_GetTickMS() - tick) > timeout) {
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d027      	beq.n	800a110 <Simcom_SetState+0x374>
 800a0c0:	f000 fb06 	bl	800a6d0 <_GetTickMS>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d21f      	bcs.n	800a110 <Simcom_SetState+0x374>
                            LOG_StrLn("Simcom:StateTimeout");
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <Simcom_SetState+0x33c>)
 800a0d2:	f7ff fd1b 	bl	8009b0c <LOG_StrLn>
                            break;
 800a0d6:	e027      	b.n	800a128 <Simcom_SetState+0x38c>
 800a0d8:	0800b718 	.word	0x0800b718
 800a0dc:	20000010 	.word	0x20000010
 800a0e0:	0800b72c 	.word	0x0800b72c
 800a0e4:	0800b744 	.word	0x0800b744
 800a0e8:	20000028 	.word	0x20000028
 800a0ec:	0800b758 	.word	0x0800b758
 800a0f0:	0800b764 	.word	0x0800b764
 800a0f4:	0800b77c 	.word	0x0800b77c
 800a0f8:	0800b788 	.word	0x0800b788
 800a0fc:	0800b798 	.word	0x0800b798
 800a100:	0800b7a0 	.word	0x0800b7a0
 800a104:	0800b7bc 	.word	0x0800b7bc
 800a108:	0800b7ac 	.word	0x0800b7ac
 800a10c:	0800b7b4 	.word	0x0800b7b4
                        }
                        _DelayMS(1000);
 800a110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a114:	f000 fad1 	bl	800a6ba <_DelayMS>
                    } while (p && read.stat != param.stat);
 800a118:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <Simcom_SetState+0x38c>
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	429a      	cmp	r2, r3
 800a126:	d1b0      	bne.n	800a08a <Simcom_SetState+0x2ee>
                }

                // upgrade simcom state
                if (p > 0) {
 800a128:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd09      	ble.n	800a144 <Simcom_SetState+0x3a8>
                    SIM.state++;
 800a130:	4b1a      	ldr	r3, [pc, #104]	; (800a19c <Simcom_SetState+0x400>)
 800a132:	f993 3000 	ldrsb.w	r3, [r3]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	3301      	adds	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	b25a      	sxtb	r2, r3
 800a13e:	4b17      	ldr	r3, [pc, #92]	; (800a19c <Simcom_SetState+0x400>)
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e00d      	b.n	800a160 <Simcom_SetState+0x3c4>
                } else {
                    if (SIM.state == SIM_STATE_NETWORK_ON) {
 800a144:	4b15      	ldr	r3, [pc, #84]	; (800a19c <Simcom_SetState+0x400>)
 800a146:	f993 3000 	ldrsb.w	r3, [r3]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d108      	bne.n	800a160 <Simcom_SetState+0x3c4>
                        SIM.state--;
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <Simcom_SetState+0x400>)
 800a150:	f993 3000 	ldrsb.w	r3, [r3]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	3b01      	subs	r3, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	b25a      	sxtb	r2, r3
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <Simcom_SetState+0x400>)
 800a15e:	701a      	strb	r2, [r3, #0]
                    }
                }

                _DelayMS(500);
 800a160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a164:	f000 faa9 	bl	800a6ba <_DelayMS>
                break;
 800a168:	e000      	b.n	800a16c <Simcom_SetState+0x3d0>
                }

                break;
#endif
            default:
                break;
 800a16a:	bf00      	nop
        }
    } while (SIM.state < state);
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <Simcom_SetState+0x400>)
 800a16e:	f993 3000 	ldrsb.w	r3, [r3]
 800a172:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a176:	429a      	cmp	r2, r3
 800a178:	f73f ae21 	bgt.w	8009dbe <Simcom_SetState+0x22>
    Simcom_Unlock();
 800a17c:	f7ff fdf6 	bl	8009d6c <Simcom_Unlock>

    return (SIM.state >= state);
 800a180:	4b06      	ldr	r3, [pc, #24]	; (800a19c <Simcom_SetState+0x400>)
 800a182:	f993 3000 	ldrsb.w	r3, [r3]
 800a186:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	bfd4      	ite	le
 800a18e:	2301      	movle	r3, #1
 800a190:	2300      	movgt	r3, #0
 800a192:	b2db      	uxtb	r3, r3
}
 800a194:	4618      	mov	r0, r3
 800a196:	3758      	adds	r7, #88	; 0x58
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000010 	.word	0x20000010

0800a1a0 <Simcom_FOTA>:

    Simcom_Unlock();
    return p;
}
#else
uint8_t Simcom_FOTA(uint32_t checksumOld) {
 800a1a0:	b5b0      	push	{r4, r5, r7, lr}
 800a1a2:	b0ac      	sub	sp, #176	; 0xb0
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    uint32_t checksum = 0, len = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    at_ftp_t ftp = {
 800a1ba:	f107 030c 	add.w	r3, r7, #12
 800a1be:	2298      	movs	r2, #152	; 0x98
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 fb1e 	bl	800a804 <memset>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	4b59      	ldr	r3, [pc, #356]	; (800a334 <Simcom_FOTA+0x194>)
 800a1ce:	f107 0410 	add.w	r4, r7, #16
 800a1d2:	461d      	mov	r5, r3
 800a1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a1dc:	6020      	str	r0, [r4, #0]
 800a1de:	3404      	adds	r4, #4
 800a1e0:	8021      	strh	r1, [r4, #0]
 800a1e2:	3402      	adds	r4, #2
 800a1e4:	0c0b      	lsrs	r3, r1, #16
 800a1e6:	7023      	strb	r3, [r4, #0]
 800a1e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f8c3 2003 	str.w	r2, [r3, #3]
 800a1f4:	4b50      	ldr	r3, [pc, #320]	; (800a338 <Simcom_FOTA+0x198>)
 800a1f6:	f107 052e 	add.w	r5, r7, #46	; 0x2e
 800a1fa:	461c      	mov	r4, r3
 800a1fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1fe:	6028      	str	r0, [r5, #0]
 800a200:	6069      	str	r1, [r5, #4]
 800a202:	60aa      	str	r2, [r5, #8]
 800a204:	60eb      	str	r3, [r5, #12]
 800a206:	cc03      	ldmia	r4!, {r0, r1}
 800a208:	6128      	str	r0, [r5, #16]
 800a20a:	6169      	str	r1, [r5, #20]
 800a20c:	f107 0346 	add.w	r3, r7, #70	; 0x46
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	809a      	strh	r2, [r3, #4]
 800a216:	4a49      	ldr	r2, [pc, #292]	; (800a33c <Simcom_FOTA+0x19c>)
 800a218:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a21c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a21e:	c303      	stmia	r3!, {r0, r1}
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	605a      	str	r2, [r3, #4]
 800a22c:	811a      	strh	r2, [r3, #8]
 800a22e:	4a44      	ldr	r2, [pc, #272]	; (800a340 <Simcom_FOTA+0x1a0>)
 800a230:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a234:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a238:	6018      	str	r0, [r3, #0]
 800a23a:	3304      	adds	r3, #4
 800a23c:	8019      	strh	r1, [r3, #0]
 800a23e:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	605a      	str	r2, [r3, #4]
 800a248:	609a      	str	r2, [r3, #8]
 800a24a:	819a      	strh	r2, [r3, #12]
 800a24c:	4b3d      	ldr	r3, [pc, #244]	; (800a344 <Simcom_FOTA+0x1a4>)
 800a24e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a252:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	605a      	str	r2, [r3, #4]
 800a25c:	609a      	str	r2, [r3, #8]
 800a25e:	60da      	str	r2, [r3, #12]
            .path = "/vcu/",
            .version = "APP",
            .size = 0,
    };

    Simcom_Lock();
 800a260:	f7ff fd7d 	bl	8009d5e <Simcom_Lock>
    // FOTA download, program & check
    if (Simcom_SetState(SIM_STATE_GPRS_ON, 60000)) {
 800a264:	f64e 2160 	movw	r1, #60000	; 0xea60
 800a268:	2003      	movs	r0, #3
 800a26a:	f7ff fd97 	bl	8009d9c <Simcom_SetState>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d052      	beq.n	800a31a <Simcom_FOTA+0x17a>
        // Initialize bearer for TCP based apps.
        p = AT_BearerInitialize();
 800a274:	f7fe fca4 	bl	8008bc0 <AT_BearerInitialize>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

        // Initialize FTP
        if (p > 0) {
 800a27e:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a282:	2b00      	cmp	r3, #0
 800a284:	dd07      	ble.n	800a296 <Simcom_FOTA+0xf6>
            p = AT_FtpInitialize(&ftp);
 800a286:	f107 030c 	add.w	r3, r7, #12
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe fcca 	bl	8008c24 <AT_FtpInitialize>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        // Get checksum of new firmware
        if (p > 0) {
 800a296:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dd0a      	ble.n	800a2b4 <Simcom_FOTA+0x114>
            p = FOTA_GetChecksum(&ftp, &checksum);
 800a29e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800a2a2:	f107 030c 	add.w	r3, r7, #12
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7f7 f92d 	bl	8001508 <FOTA_GetChecksum>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        // Only download when image is different
        if (p > 0) {
 800a2b4:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dd10      	ble.n	800a2de <Simcom_FOTA+0x13e>
            p = (checksumOld != checksum);
 800a2bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            if (!p) {
 800a2d0:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <Simcom_FOTA+0x13e>
                LOG_StrLn("FOTA:Cancelled => SameVersion");
 800a2d8:	481b      	ldr	r0, [pc, #108]	; (800a348 <Simcom_FOTA+0x1a8>)
 800a2da:	f7ff fc17 	bl	8009b0c <LOG_StrLn>
            }
        }

        // Download & Program new firmware
        if (p > 0) {
 800a2de:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dd0a      	ble.n	800a2fc <Simcom_FOTA+0x15c>
            p = FOTA_DownloadAndInstall(&ftp, &len);
 800a2e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a2ea:	f107 030c 	add.w	r3, r7, #12
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7f7 f96d 	bl	80015d0 <FOTA_DownloadAndInstall>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        // Buffer filled, compare the checksum
        if (p > 0) {
 800a2fc:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a300:	2b00      	cmp	r3, #0
 800a302:	dd0a      	ble.n	800a31a <Simcom_FOTA+0x17a>
            p = FOTA_CompareChecksum(checksum, len, APP_START_ADDR);
 800a304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a308:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a30c:	4a0f      	ldr	r2, [pc, #60]	; (800a34c <Simcom_FOTA+0x1ac>)
 800a30e:	4618      	mov	r0, r3
 800a310:	f7f7 fa32 	bl	8001778 <FOTA_CompareChecksum>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }
    }
    Simcom_Unlock();
 800a31a:	f7ff fd27 	bl	8009d6c <Simcom_Unlock>

    return (p == SIM_RESULT_OK);
 800a31e:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800a322:	2b01      	cmp	r3, #1
 800a324:	bf0c      	ite	eq
 800a326:	2301      	moveq	r3, #1
 800a328:	2300      	movne	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	37b0      	adds	r7, #176	; 0xb0
 800a330:	46bd      	mov	sp, r7
 800a332:	bdb0      	pop	{r4, r5, r7, pc}
 800a334:	0800b7e4 	.word	0x0800b7e4
 800a338:	0800b804 	.word	0x0800b804
 800a33c:	0800b824 	.word	0x0800b824
 800a340:	0800b838 	.word	0x0800b838
 800a344:	00505041 	.word	0x00505041
 800a348:	0800b7c4 	.word	0x0800b7c4
 800a34c:	08020000 	.word	0x08020000

0800a350 <Simcom_Command>:
#endif

SIMCOM_RESULT Simcom_Command(char *data, char *res, uint32_t ms, uint16_t size) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	807b      	strh	r3, [r7, #2]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]
    uint8_t upload = 1;
 800a362:	2301      	movs	r3, #1
 800a364:	75bb      	strb	r3, [r7, #22]

    // Handle default value
    if (res == NULL) {
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <Simcom_Command+0x20>
        res = SIMCOM_RSP_OK;
 800a36c:	4b28      	ldr	r3, [pc, #160]	; (800a410 <Simcom_Command+0xc0>)
 800a36e:	60bb      	str	r3, [r7, #8]
    }
    if (!size) {
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <Simcom_Command+0x34>
        upload = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	75bb      	strb	r3, [r7, #22]
        size = strlen(data);
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7f5 ff5a 	bl	8000234 <strlen>
 800a380:	4603      	mov	r3, r0
 800a382:	807b      	strh	r3, [r7, #2]
    }

    // only handle command if SIM_STATE_READY or BOOT_CMD
    if (SIM.state >= SIM_STATE_READY || (strcmp(data, SIMCOM_CMD_BOOT) == 0)) {
 800a384:	4b23      	ldr	r3, [pc, #140]	; (800a414 <Simcom_Command+0xc4>)
 800a386:	f993 3000 	ldrsb.w	r3, [r3]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da06      	bge.n	800a39c <Simcom_Command+0x4c>
 800a38e:	4922      	ldr	r1, [pc, #136]	; (800a418 <Simcom_Command+0xc8>)
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7f5 ff45 	bl	8000220 <strcmp>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d133      	bne.n	800a404 <Simcom_Command+0xb4>
        Simcom_Lock();
 800a39c:	f7ff fcdf 	bl	8009d5e <Simcom_Lock>

        // Debug: print command
        if (SIMCOM_DEBUG) {
            if (!upload) {
 800a3a0:	7dbb      	ldrb	r3, [r7, #22]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d108      	bne.n	800a3b8 <Simcom_Command+0x68>
                LOG_Str("\n=> ");
 800a3a6:	481d      	ldr	r0, [pc, #116]	; (800a41c <Simcom_Command+0xcc>)
 800a3a8:	f7ff fb98 	bl	8009adc <LOG_Str>
                LOG_Buf(data, size);
 800a3ac:	887b      	ldrh	r3, [r7, #2]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff fbc6 	bl	8009b42 <LOG_Buf>
 800a3b6:	e004      	b.n	800a3c2 <Simcom_Command+0x72>
            } else {
                LOG_BufHex(data, size);
 800a3b8:	887b      	ldrh	r3, [r7, #2]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7ff fbdf 	bl	8009b80 <LOG_BufHex>
            }
            LOG_Enter();
 800a3c2:	f7ff fb07 	bl	80099d4 <LOG_Enter>
        }

        // send command
        p = Simcom_Execute(data, size, ms, res);
 800a3c6:	8879      	ldrh	r1, [r7, #2]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f8db 	bl	800a588 <Simcom_Execute>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75fb      	strb	r3, [r7, #23]

        // Debug: print response
        if (SIMCOM_DEBUG) {
            char *FTPGET = "AT+FTPGET=2";
 800a3d6:	4b12      	ldr	r3, [pc, #72]	; (800a420 <Simcom_Command+0xd0>)
 800a3d8:	613b      	str	r3, [r7, #16]
            if (strncmp(data, FTPGET, strlen(FTPGET)) != 0) {
 800a3da:	6938      	ldr	r0, [r7, #16]
 800a3dc:	f7f5 ff2a 	bl	8000234 <strlen>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6939      	ldr	r1, [r7, #16]
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 fa34 	bl	800a854 <strncmp>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <Simcom_Command+0xb0>
                LOG_Buf(SIMCOM_UART_RX, sizeof(SIMCOM_UART_RX));
 800a3f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a3f6:	480b      	ldr	r0, [pc, #44]	; (800a424 <Simcom_Command+0xd4>)
 800a3f8:	f7ff fba3 	bl	8009b42 <LOG_Buf>
                LOG_Enter();
 800a3fc:	f7ff faea 	bl	80099d4 <LOG_Enter>
            }
        }

        Simcom_Unlock();
 800a400:	f7ff fcb4 	bl	8009d6c <Simcom_Unlock>
    }

    return p;
 800a404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	0800b84c 	.word	0x0800b84c
 800a414:	20000010 	.word	0x20000010
 800a418:	0800b850 	.word	0x0800b850
 800a41c:	0800b854 	.word	0x0800b854
 800a420:	0800b85c 	.word	0x0800b85c
 800a424:	20000400 	.word	0x20000400

0800a428 <Simcom_IdleJob>:

SIMCOM_RESULT Simcom_IdleJob(uint8_t *iteration) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]
    at_csq_t signal;

    // debug
    if (iteration != NULL) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <Simcom_IdleJob+0x2e>
        LOG_Str("Simcom:Iteration = ");
 800a43a:	4811      	ldr	r0, [pc, #68]	; (800a480 <Simcom_IdleJob+0x58>)
 800a43c:	f7ff fb4e 	bl	8009adc <LOG_Str>
        LOG_Int((*iteration)++);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	b2d1      	uxtb	r1, r2
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7011      	strb	r1, [r2, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff facd 	bl	80099ec <LOG_Int>
        LOG_Enter();
 800a452:	f7ff fabf 	bl	80099d4 <LOG_Enter>
    }

    // other routines
    p = AT_SignalQualityReport(&signal);
 800a456:	f107 030c 	add.w	r3, r7, #12
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe f8f4 	bl	8008648 <AT_SignalQualityReport>
 800a460:	4603      	mov	r3, r0
 800a462:	73fb      	strb	r3, [r7, #15]
    if (p > 0) {
 800a464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd02      	ble.n	800a472 <Simcom_IdleJob+0x4a>
        SIM.signal = signal.percent;
 800a46c:	7bba      	ldrb	r2, [r7, #14]
 800a46e:	4b05      	ldr	r3, [pc, #20]	; (800a484 <Simcom_IdleJob+0x5c>)
 800a470:	741a      	strb	r2, [r3, #16]
    }
#if (!BOOTLOADER)
    p = AT_ConnectionStatusSingle(&(SIM.ip_status));
#endif
    return p;
 800a472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	0800b868 	.word	0x0800b868
 800a484:	20000010 	.word	0x20000010

0800a488 <Simcom_Ready>:
static uint8_t Simcom_CommandoIRQ(void) {
    return Simcom_Response(PREFIX_COMMAND) != NULL;
}
#endif

static SIMCOM_RESULT Simcom_Ready(void) {
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
    // save event
    VCU.SetEvent(EV_VCU_NETWORK_RESTART, 1);
#endif

    // wait until 1s response
    tick = _GetTickMS();
 800a48e:	f000 f91f 	bl	800a6d0 <_GetTickMS>
 800a492:	6078      	str	r0, [r7, #4]
    while (SIM.state == SIM_STATE_DOWN) {
 800a494:	e016      	b.n	800a4c4 <Simcom_Ready+0x3c>
        if (Simcom_Response(SIMCOM_RSP_READY)
 800a496:	4814      	ldr	r0, [pc, #80]	; (800a4e8 <Simcom_Ready+0x60>)
 800a498:	f7ff fc70 	bl	8009d7c <Simcom_Response>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d116      	bne.n	800a4d0 <Simcom_Ready+0x48>
                || Simcom_Response(SIMCOM_RSP_OK)
 800a4a2:	4812      	ldr	r0, [pc, #72]	; (800a4ec <Simcom_Ready+0x64>)
 800a4a4:	f7ff fc6a 	bl	8009d7c <Simcom_Response>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d110      	bne.n	800a4d0 <Simcom_Ready+0x48>
                || (_GetTickMS() - tick) >= NET_BOOT_TIMEOUT) {
 800a4ae:	f000 f90f 	bl	800a6d0 <_GetTickMS>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a4bc:	d208      	bcs.n	800a4d0 <Simcom_Ready+0x48>
            break;
        }
        _DelayMS(1);
 800a4be:	2001      	movs	r0, #1
 800a4c0:	f000 f8fb 	bl	800a6ba <_DelayMS>
    while (SIM.state == SIM_STATE_DOWN) {
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <Simcom_Ready+0x68>)
 800a4c6:	f993 3000 	ldrsb.w	r3, [r3]
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ce:	d0e2      	beq.n	800a496 <Simcom_Ready+0xe>
    }

    // check
    return Simcom_Command(SIMCOM_CMD_BOOT, SIMCOM_RSP_READY, 1000, 0);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4d6:	4904      	ldr	r1, [pc, #16]	; (800a4e8 <Simcom_Ready+0x60>)
 800a4d8:	4806      	ldr	r0, [pc, #24]	; (800a4f4 <Simcom_Ready+0x6c>)
 800a4da:	f7ff ff39 	bl	800a350 <Simcom_Command>
 800a4de:	4603      	mov	r3, r0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800b87c 	.word	0x0800b87c
 800a4ec:	0800b84c 	.word	0x0800b84c
 800a4f0:	20000010 	.word	0x20000010
 800a4f4:	0800b850 	.word	0x0800b850

0800a4f8 <Simcom_Power>:

static SIMCOM_RESULT Simcom_Power(void) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
    LOG_StrLn("Simcom:Powered");
 800a4fc:	4814      	ldr	r0, [pc, #80]	; (800a550 <Simcom_Power+0x58>)
 800a4fe:	f7ff fb05 	bl	8009b0c <LOG_StrLn>
    // reset buffer
    SIMCOM_Reset_Buffer();
 800a502:	f7fe f84d 	bl	80085a0 <SIMCOM_Reset_Buffer>

    // power control
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 0);
 800a506:	2200      	movs	r2, #0
 800a508:	2101      	movs	r1, #1
 800a50a:	4812      	ldr	r0, [pc, #72]	; (800a554 <Simcom_Power+0x5c>)
 800a50c:	f7f9 ffec 	bl	80044e8 <HAL_GPIO_WritePin>
    _DelayMS(100);
 800a510:	2064      	movs	r0, #100	; 0x64
 800a512:	f000 f8d2 	bl	800a6ba <_DelayMS>
    HAL_GPIO_WritePin(INT_NET_PWR_GPIO_Port, INT_NET_PWR_Pin, 1);
 800a516:	2201      	movs	r2, #1
 800a518:	2101      	movs	r1, #1
 800a51a:	480e      	ldr	r0, [pc, #56]	; (800a554 <Simcom_Power+0x5c>)
 800a51c:	f7f9 ffe4 	bl	80044e8 <HAL_GPIO_WritePin>
    _DelayMS(1000);
 800a520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a524:	f000 f8c9 	bl	800a6ba <_DelayMS>

    // simcom reset pin
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 1);
 800a528:	2201      	movs	r2, #1
 800a52a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a52e:	480a      	ldr	r0, [pc, #40]	; (800a558 <Simcom_Power+0x60>)
 800a530:	f7f9 ffda 	bl	80044e8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800a534:	2001      	movs	r0, #1
 800a536:	f7f8 f88d 	bl	8002654 <HAL_Delay>
    HAL_GPIO_WritePin(INT_NET_RST_GPIO_Port, INT_NET_RST_Pin, 0);
 800a53a:	2200      	movs	r2, #0
 800a53c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a540:	4805      	ldr	r0, [pc, #20]	; (800a558 <Simcom_Power+0x60>)
 800a542:	f7f9 ffd1 	bl	80044e8 <HAL_GPIO_WritePin>

    // wait response
    return Simcom_Ready();
 800a546:	f7ff ff9f 	bl	800a488 <Simcom_Ready>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	0800b880 	.word	0x0800b880
 800a554:	40020800 	.word	0x40020800
 800a558:	40020400 	.word	0x40020400

0800a55c <Simcom_Sleep>:

static void Simcom_Sleep(uint8_t state) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(INT_NET_DTR_GPIO_Port, INT_NET_DTR_Pin, state);
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	461a      	mov	r2, r3
 800a56a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a56e:	4805      	ldr	r0, [pc, #20]	; (800a584 <Simcom_Sleep+0x28>)
 800a570:	f7f9 ffba 	bl	80044e8 <HAL_GPIO_WritePin>
    _DelayMS(50);
 800a574:	2032      	movs	r0, #50	; 0x32
 800a576:	f000 f8a0 	bl	800a6ba <_DelayMS>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40020400 	.word	0x40020400

0800a588 <Simcom_Execute>:

static SIMCOM_RESULT Simcom_Execute(char *data, uint16_t size, uint32_t ms, char *res) {
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	460b      	mov	r3, r1
 800a596:	817b      	strh	r3, [r7, #10]
    SIMCOM_RESULT p = SIM_RESULT_ERROR;
 800a598:	2300      	movs	r3, #0
 800a59a:	77fb      	strb	r3, [r7, #31]
    uint32_t tick, timeout = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61bb      	str	r3, [r7, #24]

    Simcom_Lock();
 800a5a0:	f7ff fbdd 	bl	8009d5e <Simcom_Lock>
    // wake-up the SIMCOM
    Simcom_Sleep(0);
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	f7ff ffd9 	bl	800a55c <Simcom_Sleep>

    // transmit to serial (low-level)
    Simcom_BeforeTransmitHook();
 800a5aa:	f000 f87f 	bl	800a6ac <Simcom_BeforeTransmitHook>
    SIMCOM_Transmit(data, size);
 800a5ae:	897b      	ldrh	r3, [r7, #10]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f7fe f806 	bl	80085c4 <SIMCOM_Transmit>

    // convert time to tick
    timeout = (ms + NET_EXTRA_TIME );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a5be:	61bb      	str	r3, [r7, #24]
    // set timeout guard
    tick = _GetTickMS();
 800a5c0:	f000 f886 	bl	800a6d0 <_GetTickMS>
 800a5c4:	6178      	str	r0, [r7, #20]

    // wait response from SIMCOM
    while (1) {
        if (Simcom_Response(res)
 800a5c6:	6838      	ldr	r0, [r7, #0]
 800a5c8:	f7ff fbd8 	bl	8009d7c <Simcom_Response>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d113      	bne.n	800a5fa <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_ERROR)
 800a5d2:	482f      	ldr	r0, [pc, #188]	; (800a690 <Simcom_Execute+0x108>)
 800a5d4:	f7ff fbd2 	bl	8009d7c <Simcom_Response>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10d      	bne.n	800a5fa <Simcom_Execute+0x72>
                || Simcom_Response(SIMCOM_RSP_READY)
 800a5de:	482d      	ldr	r0, [pc, #180]	; (800a694 <Simcom_Execute+0x10c>)
 800a5e0:	f7ff fbcc 	bl	8009d7c <Simcom_Response>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d107      	bne.n	800a5fa <Simcom_Execute+0x72>
                #if (!BOOTLOADER)
                || Simcom_CommandoIRQ()
#endif
                || (_GetTickMS() - tick) >= timeout) {
 800a5ea:	f000 f871 	bl	800a6d0 <_GetTickMS>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d83a      	bhi.n	800a670 <Simcom_Execute+0xe8>

            // check response
            if (Simcom_Response(res)) {
 800a5fa:	6838      	ldr	r0, [r7, #0]
 800a5fc:	f7ff fbbe 	bl	8009d7c <Simcom_Response>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <Simcom_Execute+0x82>
                p = SIM_RESULT_OK;
 800a606:	2301      	movs	r3, #1
 800a608:	77fb      	strb	r3, [r7, #31]
            }

            // Handle failure
            if (p != SIM_RESULT_OK) {
 800a60a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d032      	beq.n	800a678 <Simcom_Execute+0xf0>
                // exception for no response
                if (strlen(SIMCOM_UART_RX) == 0) {
 800a612:	4b21      	ldr	r3, [pc, #132]	; (800a698 <Simcom_Execute+0x110>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <Simcom_Execute+0xa4>
                    p = SIM_RESULT_NO_RESPONSE;
 800a61a:	23fe      	movs	r3, #254	; 0xfe
 800a61c:	77fb      	strb	r3, [r7, #31]
                    SIM.state = SIM_STATE_DOWN;
 800a61e:	4b1f      	ldr	r3, [pc, #124]	; (800a69c <Simcom_Execute+0x114>)
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	701a      	strb	r2, [r3, #0]
                    LOG_StrLn("Simcom:NoResponse");
 800a624:	481e      	ldr	r0, [pc, #120]	; (800a6a0 <Simcom_Execute+0x118>)
 800a626:	f7ff fa71 	bl	8009b0c <LOG_StrLn>
                    }
                }
            }

            // exit loop
            break;
 800a62a:	e025      	b.n	800a678 <Simcom_Execute+0xf0>
                    if (Simcom_Response(SIMCOM_RSP_READY) && (SIM.state >= SIM_STATE_READY)) {
 800a62c:	4819      	ldr	r0, [pc, #100]	; (800a694 <Simcom_Execute+0x10c>)
 800a62e:	f7ff fba5 	bl	8009d7c <Simcom_Response>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00d      	beq.n	800a654 <Simcom_Execute+0xcc>
 800a638:	4b18      	ldr	r3, [pc, #96]	; (800a69c <Simcom_Execute+0x114>)
 800a63a:	f993 3000 	ldrsb.w	r3, [r3]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	db08      	blt.n	800a654 <Simcom_Execute+0xcc>
                        LOG_StrLn("Simcom:Restarted");
 800a642:	4818      	ldr	r0, [pc, #96]	; (800a6a4 <Simcom_Execute+0x11c>)
 800a644:	f7ff fa62 	bl	8009b0c <LOG_StrLn>
                        p = SIM_RESULT_RESTARTED;
 800a648:	23fd      	movs	r3, #253	; 0xfd
 800a64a:	77fb      	strb	r3, [r7, #31]
                        SIM.state = SIM_STATE_READY;
 800a64c:	4b13      	ldr	r3, [pc, #76]	; (800a69c <Simcom_Execute+0x114>)
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
            break;
 800a652:	e011      	b.n	800a678 <Simcom_Execute+0xf0>
                    else if ((_GetTickMS() - tick) >= timeout) {
 800a654:	f000 f83c 	bl	800a6d0 <_GetTickMS>
 800a658:	4602      	mov	r2, r0
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	429a      	cmp	r2, r3
 800a662:	d809      	bhi.n	800a678 <Simcom_Execute+0xf0>
                        LOG_StrLn("Simcom:Timeout");
 800a664:	4810      	ldr	r0, [pc, #64]	; (800a6a8 <Simcom_Execute+0x120>)
 800a666:	f7ff fa51 	bl	8009b0c <LOG_StrLn>
                        p = SIM_RESULT_TIMEOUT;
 800a66a:	23ff      	movs	r3, #255	; 0xff
 800a66c:	77fb      	strb	r3, [r7, #31]
            break;
 800a66e:	e003      	b.n	800a678 <Simcom_Execute+0xf0>
        }
        _DelayMS(10);
 800a670:	200a      	movs	r0, #10
 800a672:	f000 f822 	bl	800a6ba <_DelayMS>
        if (Simcom_Response(res)
 800a676:	e7a6      	b.n	800a5c6 <Simcom_Execute+0x3e>
            break;
 800a678:	bf00      	nop
    }

    // sleep the SIMCOM
    Simcom_Sleep(1);
 800a67a:	2001      	movs	r0, #1
 800a67c:	f7ff ff6e 	bl	800a55c <Simcom_Sleep>
    Simcom_Unlock();
 800a680:	f7ff fb74 	bl	8009d6c <Simcom_Unlock>
    return p;
 800a684:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	0800b890 	.word	0x0800b890
 800a694:	0800b87c 	.word	0x0800b87c
 800a698:	20000400 	.word	0x20000400
 800a69c:	20000010 	.word	0x20000010
 800a6a0:	0800b898 	.word	0x0800b898
 800a6a4:	0800b8ac 	.word	0x0800b8ac
 800a6a8:	0800b8c0 	.word	0x0800b8c0

0800a6ac <Simcom_BeforeTransmitHook>:

static void Simcom_BeforeTransmitHook(void) {
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
    //  LOG_StrLn("============ SIMCOM DEBUG ============");
    //  LOG_Buf(SIMCOM_UART_RX, strlen(SIMCOM_UART_RX));
    //  LOG_Enter();
    //  LOG_StrLn("======================================");

}
 800a6b0:	bf00      	nop
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <_DelayMS>:
extern vcu_t VCU;
extern sw_t SW;
#endif

/* Public functions implementation --------------------------------------------*/
void _DelayMS(uint32_t ms) {
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    osDelay(ms);
#else
    HAL_Delay(ms);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7f7 ffc6 	bl	8002654 <HAL_Delay>
#endif
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <_GetTickMS>:

uint32_t _GetTickMS(void) {
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
#if RTOS_ENABLE
    return osKernelGetTickCount();
#else
    return HAL_GetTick();
 800a6d4:	f7f7 ffb2 	bl	800263c <HAL_GetTick>
 800a6d8:	4603      	mov	r3, r0
#endif
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <_LedWrite>:

uint8_t _LedRead(void) {
    return HAL_GPIO_ReadPin(SYS_LED_GPIO_Port, SYS_LED_Pin);
}

void _LedWrite(uint8_t state) {
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SYS_LED_GPIO_Port, SYS_LED_Pin, state);
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6f2:	4803      	ldr	r0, [pc, #12]	; (800a700 <_LedWrite+0x20>)
 800a6f4:	f7f9 fef8 	bl	80044e8 <HAL_GPIO_WritePin>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	40020c00 	.word	0x40020c00

0800a704 <_LedToggle>:

void _LedToggle(void) {
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 800a708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a70c:	4802      	ldr	r0, [pc, #8]	; (800a718 <_LedToggle+0x14>)
 800a70e:	f7f9 ff04 	bl	800451a <HAL_GPIO_TogglePin>
}
 800a712:	bf00      	nop
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40020c00 	.word	0x40020c00

0800a71c <_Error>:

void _Error(char msg[50]) {
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
#if RTOS_ENABLE
    if (osKernelGetState() == osKernelRunning) {
        LOG_StrLn(msg);
    }
#else
    LOG_StrLn(msg);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff f9f1 	bl	8009b0c <LOG_StrLn>
#endif

    // indicator error
    while (1) {
        _LedToggle();
 800a72a:	f7ff ffeb 	bl	800a704 <_LedToggle>
        HAL_Delay(50);
 800a72e:	2032      	movs	r0, #50	; 0x32
 800a730:	f7f7 ff90 	bl	8002654 <HAL_Delay>
        _LedToggle();
 800a734:	e7f9      	b.n	800a72a <_Error+0xe>

0800a736 <_ByteSwap32>:
    }
}

uint32_t _ByteSwap32(uint32_t x) {
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
    uint32_t y = (x >> 24) & 0xff;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	0e1b      	lsrs	r3, r3, #24
 800a742:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 16) & 0xff) << 8;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	0c1b      	lsrs	r3, r3, #16
 800a748:	021b      	lsls	r3, r3, #8
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
    y |= ((x >> 8) & 0xff) << 16;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	0a1b      	lsrs	r3, r3, #8
 800a756:	041b      	lsls	r3, r3, #16
 800a758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60fb      	str	r3, [r7, #12]
    y |= (x & 0xff) << 24;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	061b      	lsls	r3, r3, #24
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]

    return y;
 800a76c:	68fb      	ldr	r3, [r7, #12]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <__errno>:
 800a77c:	4b01      	ldr	r3, [pc, #4]	; (800a784 <__errno+0x8>)
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	2000002c 	.word	0x2000002c

0800a788 <__libc_init_array>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	4e0d      	ldr	r6, [pc, #52]	; (800a7c0 <__libc_init_array+0x38>)
 800a78c:	4c0d      	ldr	r4, [pc, #52]	; (800a7c4 <__libc_init_array+0x3c>)
 800a78e:	1ba4      	subs	r4, r4, r6
 800a790:	10a4      	asrs	r4, r4, #2
 800a792:	2500      	movs	r5, #0
 800a794:	42a5      	cmp	r5, r4
 800a796:	d109      	bne.n	800a7ac <__libc_init_array+0x24>
 800a798:	4e0b      	ldr	r6, [pc, #44]	; (800a7c8 <__libc_init_array+0x40>)
 800a79a:	4c0c      	ldr	r4, [pc, #48]	; (800a7cc <__libc_init_array+0x44>)
 800a79c:	f000 fd14 	bl	800b1c8 <_init>
 800a7a0:	1ba4      	subs	r4, r4, r6
 800a7a2:	10a4      	asrs	r4, r4, #2
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	42a5      	cmp	r5, r4
 800a7a8:	d105      	bne.n	800a7b6 <__libc_init_array+0x2e>
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7b0:	4798      	blx	r3
 800a7b2:	3501      	adds	r5, #1
 800a7b4:	e7ee      	b.n	800a794 <__libc_init_array+0xc>
 800a7b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7ba:	4798      	blx	r3
 800a7bc:	3501      	adds	r5, #1
 800a7be:	e7f2      	b.n	800a7a6 <__libc_init_array+0x1e>
 800a7c0:	0800ba38 	.word	0x0800ba38
 800a7c4:	0800ba38 	.word	0x0800ba38
 800a7c8:	0800ba38 	.word	0x0800ba38
 800a7cc:	0800ba3c 	.word	0x0800ba3c

0800a7d0 <memcmp>:
 800a7d0:	b530      	push	{r4, r5, lr}
 800a7d2:	2400      	movs	r4, #0
 800a7d4:	42a2      	cmp	r2, r4
 800a7d6:	d101      	bne.n	800a7dc <memcmp+0xc>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e007      	b.n	800a7ec <memcmp+0x1c>
 800a7dc:	5d03      	ldrb	r3, [r0, r4]
 800a7de:	3401      	adds	r4, #1
 800a7e0:	190d      	adds	r5, r1, r4
 800a7e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a7e6:	42ab      	cmp	r3, r5
 800a7e8:	d0f4      	beq.n	800a7d4 <memcmp+0x4>
 800a7ea:	1b58      	subs	r0, r3, r5
 800a7ec:	bd30      	pop	{r4, r5, pc}

0800a7ee <memcpy>:
 800a7ee:	b510      	push	{r4, lr}
 800a7f0:	1e43      	subs	r3, r0, #1
 800a7f2:	440a      	add	r2, r1
 800a7f4:	4291      	cmp	r1, r2
 800a7f6:	d100      	bne.n	800a7fa <memcpy+0xc>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a802:	e7f7      	b.n	800a7f4 <memcpy+0x6>

0800a804 <memset>:
 800a804:	4402      	add	r2, r0
 800a806:	4603      	mov	r3, r0
 800a808:	4293      	cmp	r3, r2
 800a80a:	d100      	bne.n	800a80e <memset+0xa>
 800a80c:	4770      	bx	lr
 800a80e:	f803 1b01 	strb.w	r1, [r3], #1
 800a812:	e7f9      	b.n	800a808 <memset+0x4>

0800a814 <siprintf>:
 800a814:	b40e      	push	{r1, r2, r3}
 800a816:	b500      	push	{lr}
 800a818:	b09c      	sub	sp, #112	; 0x70
 800a81a:	ab1d      	add	r3, sp, #116	; 0x74
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	9006      	str	r0, [sp, #24]
 800a820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a824:	4809      	ldr	r0, [pc, #36]	; (800a84c <siprintf+0x38>)
 800a826:	9107      	str	r1, [sp, #28]
 800a828:	9104      	str	r1, [sp, #16]
 800a82a:	4909      	ldr	r1, [pc, #36]	; (800a850 <siprintf+0x3c>)
 800a82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a830:	9105      	str	r1, [sp, #20]
 800a832:	6800      	ldr	r0, [r0, #0]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	a902      	add	r1, sp, #8
 800a838:	f000 f938 	bl	800aaac <_svfiprintf_r>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	b01c      	add	sp, #112	; 0x70
 800a844:	f85d eb04 	ldr.w	lr, [sp], #4
 800a848:	b003      	add	sp, #12
 800a84a:	4770      	bx	lr
 800a84c:	2000002c 	.word	0x2000002c
 800a850:	ffff0208 	.word	0xffff0208

0800a854 <strncmp>:
 800a854:	b510      	push	{r4, lr}
 800a856:	b16a      	cbz	r2, 800a874 <strncmp+0x20>
 800a858:	3901      	subs	r1, #1
 800a85a:	1884      	adds	r4, r0, r2
 800a85c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a860:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a864:	4293      	cmp	r3, r2
 800a866:	d103      	bne.n	800a870 <strncmp+0x1c>
 800a868:	42a0      	cmp	r0, r4
 800a86a:	d001      	beq.n	800a870 <strncmp+0x1c>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1f5      	bne.n	800a85c <strncmp+0x8>
 800a870:	1a98      	subs	r0, r3, r2
 800a872:	bd10      	pop	{r4, pc}
 800a874:	4610      	mov	r0, r2
 800a876:	e7fc      	b.n	800a872 <strncmp+0x1e>

0800a878 <strstr>:
 800a878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87a:	7803      	ldrb	r3, [r0, #0]
 800a87c:	b17b      	cbz	r3, 800a89e <strstr+0x26>
 800a87e:	4604      	mov	r4, r0
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	4620      	mov	r0, r4
 800a884:	1c66      	adds	r6, r4, #1
 800a886:	b17b      	cbz	r3, 800a8a8 <strstr+0x30>
 800a888:	1e4a      	subs	r2, r1, #1
 800a88a:	1e63      	subs	r3, r4, #1
 800a88c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a890:	b14d      	cbz	r5, 800a8a6 <strstr+0x2e>
 800a892:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a896:	42af      	cmp	r7, r5
 800a898:	4634      	mov	r4, r6
 800a89a:	d0f7      	beq.n	800a88c <strstr+0x14>
 800a89c:	e7f0      	b.n	800a880 <strstr+0x8>
 800a89e:	780b      	ldrb	r3, [r1, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bf18      	it	ne
 800a8a4:	2000      	movne	r0, #0
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	e7fc      	b.n	800a8a6 <strstr+0x2e>

0800a8ac <_strtoul_l.isra.0>:
 800a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	4692      	mov	sl, r2
 800a8b6:	461e      	mov	r6, r3
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	463d      	mov	r5, r7
 800a8bc:	9808      	ldr	r0, [sp, #32]
 800a8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8c2:	f000 f883 	bl	800a9cc <__locale_ctype_ptr_l>
 800a8c6:	4420      	add	r0, r4
 800a8c8:	7843      	ldrb	r3, [r0, #1]
 800a8ca:	f013 0308 	ands.w	r3, r3, #8
 800a8ce:	d130      	bne.n	800a932 <_strtoul_l.isra.0+0x86>
 800a8d0:	2c2d      	cmp	r4, #45	; 0x2d
 800a8d2:	d130      	bne.n	800a936 <_strtoul_l.isra.0+0x8a>
 800a8d4:	787c      	ldrb	r4, [r7, #1]
 800a8d6:	1cbd      	adds	r5, r7, #2
 800a8d8:	2101      	movs	r1, #1
 800a8da:	2e00      	cmp	r6, #0
 800a8dc:	d05c      	beq.n	800a998 <_strtoul_l.isra.0+0xec>
 800a8de:	2e10      	cmp	r6, #16
 800a8e0:	d109      	bne.n	800a8f6 <_strtoul_l.isra.0+0x4a>
 800a8e2:	2c30      	cmp	r4, #48	; 0x30
 800a8e4:	d107      	bne.n	800a8f6 <_strtoul_l.isra.0+0x4a>
 800a8e6:	782b      	ldrb	r3, [r5, #0]
 800a8e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8ec:	2b58      	cmp	r3, #88	; 0x58
 800a8ee:	d14e      	bne.n	800a98e <_strtoul_l.isra.0+0xe2>
 800a8f0:	786c      	ldrb	r4, [r5, #1]
 800a8f2:	2610      	movs	r6, #16
 800a8f4:	3502      	adds	r5, #2
 800a8f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	fbb2 f2f6 	udiv	r2, r2, r6
 800a900:	fb06 fc02 	mul.w	ip, r6, r2
 800a904:	ea6f 0c0c 	mvn.w	ip, ip
 800a908:	4618      	mov	r0, r3
 800a90a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a90e:	2f09      	cmp	r7, #9
 800a910:	d817      	bhi.n	800a942 <_strtoul_l.isra.0+0x96>
 800a912:	463c      	mov	r4, r7
 800a914:	42a6      	cmp	r6, r4
 800a916:	dd23      	ble.n	800a960 <_strtoul_l.isra.0+0xb4>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db1e      	blt.n	800a95a <_strtoul_l.isra.0+0xae>
 800a91c:	4282      	cmp	r2, r0
 800a91e:	d31c      	bcc.n	800a95a <_strtoul_l.isra.0+0xae>
 800a920:	d101      	bne.n	800a926 <_strtoul_l.isra.0+0x7a>
 800a922:	45a4      	cmp	ip, r4
 800a924:	db19      	blt.n	800a95a <_strtoul_l.isra.0+0xae>
 800a926:	fb00 4006 	mla	r0, r0, r6, r4
 800a92a:	2301      	movs	r3, #1
 800a92c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a930:	e7eb      	b.n	800a90a <_strtoul_l.isra.0+0x5e>
 800a932:	462f      	mov	r7, r5
 800a934:	e7c1      	b.n	800a8ba <_strtoul_l.isra.0+0xe>
 800a936:	2c2b      	cmp	r4, #43	; 0x2b
 800a938:	bf04      	itt	eq
 800a93a:	1cbd      	addeq	r5, r7, #2
 800a93c:	787c      	ldrbeq	r4, [r7, #1]
 800a93e:	4619      	mov	r1, r3
 800a940:	e7cb      	b.n	800a8da <_strtoul_l.isra.0+0x2e>
 800a942:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a946:	2f19      	cmp	r7, #25
 800a948:	d801      	bhi.n	800a94e <_strtoul_l.isra.0+0xa2>
 800a94a:	3c37      	subs	r4, #55	; 0x37
 800a94c:	e7e2      	b.n	800a914 <_strtoul_l.isra.0+0x68>
 800a94e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a952:	2f19      	cmp	r7, #25
 800a954:	d804      	bhi.n	800a960 <_strtoul_l.isra.0+0xb4>
 800a956:	3c57      	subs	r4, #87	; 0x57
 800a958:	e7dc      	b.n	800a914 <_strtoul_l.isra.0+0x68>
 800a95a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a95e:	e7e5      	b.n	800a92c <_strtoul_l.isra.0+0x80>
 800a960:	2b00      	cmp	r3, #0
 800a962:	da09      	bge.n	800a978 <_strtoul_l.isra.0+0xcc>
 800a964:	2322      	movs	r3, #34	; 0x22
 800a966:	f8c8 3000 	str.w	r3, [r8]
 800a96a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a96e:	f1ba 0f00 	cmp.w	sl, #0
 800a972:	d107      	bne.n	800a984 <_strtoul_l.isra.0+0xd8>
 800a974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a978:	b101      	cbz	r1, 800a97c <_strtoul_l.isra.0+0xd0>
 800a97a:	4240      	negs	r0, r0
 800a97c:	f1ba 0f00 	cmp.w	sl, #0
 800a980:	d0f8      	beq.n	800a974 <_strtoul_l.isra.0+0xc8>
 800a982:	b10b      	cbz	r3, 800a988 <_strtoul_l.isra.0+0xdc>
 800a984:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a988:	f8ca 9000 	str.w	r9, [sl]
 800a98c:	e7f2      	b.n	800a974 <_strtoul_l.isra.0+0xc8>
 800a98e:	2430      	movs	r4, #48	; 0x30
 800a990:	2e00      	cmp	r6, #0
 800a992:	d1b0      	bne.n	800a8f6 <_strtoul_l.isra.0+0x4a>
 800a994:	2608      	movs	r6, #8
 800a996:	e7ae      	b.n	800a8f6 <_strtoul_l.isra.0+0x4a>
 800a998:	2c30      	cmp	r4, #48	; 0x30
 800a99a:	d0a4      	beq.n	800a8e6 <_strtoul_l.isra.0+0x3a>
 800a99c:	260a      	movs	r6, #10
 800a99e:	e7aa      	b.n	800a8f6 <_strtoul_l.isra.0+0x4a>

0800a9a0 <strtoul>:
 800a9a0:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <strtoul+0x24>)
 800a9a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a4:	681c      	ldr	r4, [r3, #0]
 800a9a6:	4d08      	ldr	r5, [pc, #32]	; (800a9c8 <strtoul+0x28>)
 800a9a8:	6a23      	ldr	r3, [r4, #32]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bf08      	it	eq
 800a9ae:	462b      	moveq	r3, r5
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	460a      	mov	r2, r1
 800a9b6:	4601      	mov	r1, r0
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff ff77 	bl	800a8ac <_strtoul_l.isra.0>
 800a9be:	b003      	add	sp, #12
 800a9c0:	bd30      	pop	{r4, r5, pc}
 800a9c2:	bf00      	nop
 800a9c4:	2000002c 	.word	0x2000002c
 800a9c8:	20000090 	.word	0x20000090

0800a9cc <__locale_ctype_ptr_l>:
 800a9cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a9d0:	4770      	bx	lr

0800a9d2 <__ascii_mbtowc>:
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	b901      	cbnz	r1, 800a9d8 <__ascii_mbtowc+0x6>
 800a9d6:	a901      	add	r1, sp, #4
 800a9d8:	b142      	cbz	r2, 800a9ec <__ascii_mbtowc+0x1a>
 800a9da:	b14b      	cbz	r3, 800a9f0 <__ascii_mbtowc+0x1e>
 800a9dc:	7813      	ldrb	r3, [r2, #0]
 800a9de:	600b      	str	r3, [r1, #0]
 800a9e0:	7812      	ldrb	r2, [r2, #0]
 800a9e2:	1c10      	adds	r0, r2, #0
 800a9e4:	bf18      	it	ne
 800a9e6:	2001      	movne	r0, #1
 800a9e8:	b002      	add	sp, #8
 800a9ea:	4770      	bx	lr
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	e7fb      	b.n	800a9e8 <__ascii_mbtowc+0x16>
 800a9f0:	f06f 0001 	mvn.w	r0, #1
 800a9f4:	e7f8      	b.n	800a9e8 <__ascii_mbtowc+0x16>

0800a9f6 <__ssputs_r>:
 800a9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fa:	688e      	ldr	r6, [r1, #8]
 800a9fc:	429e      	cmp	r6, r3
 800a9fe:	4682      	mov	sl, r0
 800aa00:	460c      	mov	r4, r1
 800aa02:	4690      	mov	r8, r2
 800aa04:	4699      	mov	r9, r3
 800aa06:	d837      	bhi.n	800aa78 <__ssputs_r+0x82>
 800aa08:	898a      	ldrh	r2, [r1, #12]
 800aa0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa0e:	d031      	beq.n	800aa74 <__ssputs_r+0x7e>
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	6909      	ldr	r1, [r1, #16]
 800aa14:	1a6f      	subs	r7, r5, r1
 800aa16:	6965      	ldr	r5, [r4, #20]
 800aa18:	2302      	movs	r3, #2
 800aa1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa1e:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa22:	f109 0301 	add.w	r3, r9, #1
 800aa26:	443b      	add	r3, r7
 800aa28:	429d      	cmp	r5, r3
 800aa2a:	bf38      	it	cc
 800aa2c:	461d      	movcc	r5, r3
 800aa2e:	0553      	lsls	r3, r2, #21
 800aa30:	d530      	bpl.n	800aa94 <__ssputs_r+0x9e>
 800aa32:	4629      	mov	r1, r5
 800aa34:	f000 fb2e 	bl	800b094 <_malloc_r>
 800aa38:	4606      	mov	r6, r0
 800aa3a:	b950      	cbnz	r0, 800aa52 <__ssputs_r+0x5c>
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	f8ca 3000 	str.w	r3, [sl]
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa52:	463a      	mov	r2, r7
 800aa54:	6921      	ldr	r1, [r4, #16]
 800aa56:	f7ff feca 	bl	800a7ee <memcpy>
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	6126      	str	r6, [r4, #16]
 800aa68:	6165      	str	r5, [r4, #20]
 800aa6a:	443e      	add	r6, r7
 800aa6c:	1bed      	subs	r5, r5, r7
 800aa6e:	6026      	str	r6, [r4, #0]
 800aa70:	60a5      	str	r5, [r4, #8]
 800aa72:	464e      	mov	r6, r9
 800aa74:	454e      	cmp	r6, r9
 800aa76:	d900      	bls.n	800aa7a <__ssputs_r+0x84>
 800aa78:	464e      	mov	r6, r9
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	f000 faa1 	bl	800afc6 <memmove>
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	1b9b      	subs	r3, r3, r6
 800aa88:	60a3      	str	r3, [r4, #8]
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	441e      	add	r6, r3
 800aa8e:	6026      	str	r6, [r4, #0]
 800aa90:	2000      	movs	r0, #0
 800aa92:	e7dc      	b.n	800aa4e <__ssputs_r+0x58>
 800aa94:	462a      	mov	r2, r5
 800aa96:	f000 fb57 	bl	800b148 <_realloc_r>
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d1e2      	bne.n	800aa66 <__ssputs_r+0x70>
 800aaa0:	6921      	ldr	r1, [r4, #16]
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	f000 faa8 	bl	800aff8 <_free_r>
 800aaa8:	e7c8      	b.n	800aa3c <__ssputs_r+0x46>
	...

0800aaac <_svfiprintf_r>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	461d      	mov	r5, r3
 800aab2:	898b      	ldrh	r3, [r1, #12]
 800aab4:	061f      	lsls	r7, r3, #24
 800aab6:	b09d      	sub	sp, #116	; 0x74
 800aab8:	4680      	mov	r8, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4616      	mov	r6, r2
 800aabe:	d50f      	bpl.n	800aae0 <_svfiprintf_r+0x34>
 800aac0:	690b      	ldr	r3, [r1, #16]
 800aac2:	b96b      	cbnz	r3, 800aae0 <_svfiprintf_r+0x34>
 800aac4:	2140      	movs	r1, #64	; 0x40
 800aac6:	f000 fae5 	bl	800b094 <_malloc_r>
 800aaca:	6020      	str	r0, [r4, #0]
 800aacc:	6120      	str	r0, [r4, #16]
 800aace:	b928      	cbnz	r0, 800aadc <_svfiprintf_r+0x30>
 800aad0:	230c      	movs	r3, #12
 800aad2:	f8c8 3000 	str.w	r3, [r8]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aada:	e0c8      	b.n	800ac6e <_svfiprintf_r+0x1c2>
 800aadc:	2340      	movs	r3, #64	; 0x40
 800aade:	6163      	str	r3, [r4, #20]
 800aae0:	2300      	movs	r3, #0
 800aae2:	9309      	str	r3, [sp, #36]	; 0x24
 800aae4:	2320      	movs	r3, #32
 800aae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaea:	2330      	movs	r3, #48	; 0x30
 800aaec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaf0:	9503      	str	r5, [sp, #12]
 800aaf2:	f04f 0b01 	mov.w	fp, #1
 800aaf6:	4637      	mov	r7, r6
 800aaf8:	463d      	mov	r5, r7
 800aafa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aafe:	b10b      	cbz	r3, 800ab04 <_svfiprintf_r+0x58>
 800ab00:	2b25      	cmp	r3, #37	; 0x25
 800ab02:	d13e      	bne.n	800ab82 <_svfiprintf_r+0xd6>
 800ab04:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab08:	d00b      	beq.n	800ab22 <_svfiprintf_r+0x76>
 800ab0a:	4653      	mov	r3, sl
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4640      	mov	r0, r8
 800ab12:	f7ff ff70 	bl	800a9f6 <__ssputs_r>
 800ab16:	3001      	adds	r0, #1
 800ab18:	f000 80a4 	beq.w	800ac64 <_svfiprintf_r+0x1b8>
 800ab1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1e:	4453      	add	r3, sl
 800ab20:	9309      	str	r3, [sp, #36]	; 0x24
 800ab22:	783b      	ldrb	r3, [r7, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 809d 	beq.w	800ac64 <_svfiprintf_r+0x1b8>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab3e:	462f      	mov	r7, r5
 800ab40:	2205      	movs	r2, #5
 800ab42:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ab46:	4850      	ldr	r0, [pc, #320]	; (800ac88 <_svfiprintf_r+0x1dc>)
 800ab48:	f7f5 fb82 	bl	8000250 <memchr>
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	b9d0      	cbnz	r0, 800ab86 <_svfiprintf_r+0xda>
 800ab50:	06d9      	lsls	r1, r3, #27
 800ab52:	bf44      	itt	mi
 800ab54:	2220      	movmi	r2, #32
 800ab56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab5a:	071a      	lsls	r2, r3, #28
 800ab5c:	bf44      	itt	mi
 800ab5e:	222b      	movmi	r2, #43	; 0x2b
 800ab60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab64:	782a      	ldrb	r2, [r5, #0]
 800ab66:	2a2a      	cmp	r2, #42	; 0x2a
 800ab68:	d015      	beq.n	800ab96 <_svfiprintf_r+0xea>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	462f      	mov	r7, r5
 800ab6e:	2000      	movs	r0, #0
 800ab70:	250a      	movs	r5, #10
 800ab72:	4639      	mov	r1, r7
 800ab74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab78:	3b30      	subs	r3, #48	; 0x30
 800ab7a:	2b09      	cmp	r3, #9
 800ab7c:	d94d      	bls.n	800ac1a <_svfiprintf_r+0x16e>
 800ab7e:	b1b8      	cbz	r0, 800abb0 <_svfiprintf_r+0x104>
 800ab80:	e00f      	b.n	800aba2 <_svfiprintf_r+0xf6>
 800ab82:	462f      	mov	r7, r5
 800ab84:	e7b8      	b.n	800aaf8 <_svfiprintf_r+0x4c>
 800ab86:	4a40      	ldr	r2, [pc, #256]	; (800ac88 <_svfiprintf_r+0x1dc>)
 800ab88:	1a80      	subs	r0, r0, r2
 800ab8a:	fa0b f000 	lsl.w	r0, fp, r0
 800ab8e:	4318      	orrs	r0, r3
 800ab90:	9004      	str	r0, [sp, #16]
 800ab92:	463d      	mov	r5, r7
 800ab94:	e7d3      	b.n	800ab3e <_svfiprintf_r+0x92>
 800ab96:	9a03      	ldr	r2, [sp, #12]
 800ab98:	1d11      	adds	r1, r2, #4
 800ab9a:	6812      	ldr	r2, [r2, #0]
 800ab9c:	9103      	str	r1, [sp, #12]
 800ab9e:	2a00      	cmp	r2, #0
 800aba0:	db01      	blt.n	800aba6 <_svfiprintf_r+0xfa>
 800aba2:	9207      	str	r2, [sp, #28]
 800aba4:	e004      	b.n	800abb0 <_svfiprintf_r+0x104>
 800aba6:	4252      	negs	r2, r2
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	9207      	str	r2, [sp, #28]
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	783b      	ldrb	r3, [r7, #0]
 800abb2:	2b2e      	cmp	r3, #46	; 0x2e
 800abb4:	d10c      	bne.n	800abd0 <_svfiprintf_r+0x124>
 800abb6:	787b      	ldrb	r3, [r7, #1]
 800abb8:	2b2a      	cmp	r3, #42	; 0x2a
 800abba:	d133      	bne.n	800ac24 <_svfiprintf_r+0x178>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	9203      	str	r2, [sp, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfb8      	it	lt
 800abc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abcc:	3702      	adds	r7, #2
 800abce:	9305      	str	r3, [sp, #20]
 800abd0:	4d2e      	ldr	r5, [pc, #184]	; (800ac8c <_svfiprintf_r+0x1e0>)
 800abd2:	7839      	ldrb	r1, [r7, #0]
 800abd4:	2203      	movs	r2, #3
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7f5 fb3a 	bl	8000250 <memchr>
 800abdc:	b138      	cbz	r0, 800abee <_svfiprintf_r+0x142>
 800abde:	2340      	movs	r3, #64	; 0x40
 800abe0:	1b40      	subs	r0, r0, r5
 800abe2:	fa03 f000 	lsl.w	r0, r3, r0
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	4303      	orrs	r3, r0
 800abea:	3701      	adds	r7, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	7839      	ldrb	r1, [r7, #0]
 800abf0:	4827      	ldr	r0, [pc, #156]	; (800ac90 <_svfiprintf_r+0x1e4>)
 800abf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abf6:	2206      	movs	r2, #6
 800abf8:	1c7e      	adds	r6, r7, #1
 800abfa:	f7f5 fb29 	bl	8000250 <memchr>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d038      	beq.n	800ac74 <_svfiprintf_r+0x1c8>
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <_svfiprintf_r+0x1e8>)
 800ac04:	bb13      	cbnz	r3, 800ac4c <_svfiprintf_r+0x1a0>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	3307      	adds	r3, #7
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	3308      	adds	r3, #8
 800ac10:	9303      	str	r3, [sp, #12]
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	444b      	add	r3, r9
 800ac16:	9309      	str	r3, [sp, #36]	; 0x24
 800ac18:	e76d      	b.n	800aaf6 <_svfiprintf_r+0x4a>
 800ac1a:	fb05 3202 	mla	r2, r5, r2, r3
 800ac1e:	2001      	movs	r0, #1
 800ac20:	460f      	mov	r7, r1
 800ac22:	e7a6      	b.n	800ab72 <_svfiprintf_r+0xc6>
 800ac24:	2300      	movs	r3, #0
 800ac26:	3701      	adds	r7, #1
 800ac28:	9305      	str	r3, [sp, #20]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	250a      	movs	r5, #10
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac34:	3a30      	subs	r2, #48	; 0x30
 800ac36:	2a09      	cmp	r2, #9
 800ac38:	d903      	bls.n	800ac42 <_svfiprintf_r+0x196>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0c8      	beq.n	800abd0 <_svfiprintf_r+0x124>
 800ac3e:	9105      	str	r1, [sp, #20]
 800ac40:	e7c6      	b.n	800abd0 <_svfiprintf_r+0x124>
 800ac42:	fb05 2101 	mla	r1, r5, r1, r2
 800ac46:	2301      	movs	r3, #1
 800ac48:	4607      	mov	r7, r0
 800ac4a:	e7f0      	b.n	800ac2e <_svfiprintf_r+0x182>
 800ac4c:	ab03      	add	r3, sp, #12
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4622      	mov	r2, r4
 800ac52:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <_svfiprintf_r+0x1ec>)
 800ac54:	a904      	add	r1, sp, #16
 800ac56:	4640      	mov	r0, r8
 800ac58:	f3af 8000 	nop.w
 800ac5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ac60:	4681      	mov	r9, r0
 800ac62:	d1d6      	bne.n	800ac12 <_svfiprintf_r+0x166>
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	065b      	lsls	r3, r3, #25
 800ac68:	f53f af35 	bmi.w	800aad6 <_svfiprintf_r+0x2a>
 800ac6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac6e:	b01d      	add	sp, #116	; 0x74
 800ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac74:	ab03      	add	r3, sp, #12
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <_svfiprintf_r+0x1ec>)
 800ac7c:	a904      	add	r1, sp, #16
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f000 f882 	bl	800ad88 <_printf_i>
 800ac84:	e7ea      	b.n	800ac5c <_svfiprintf_r+0x1b0>
 800ac86:	bf00      	nop
 800ac88:	0800b8fa 	.word	0x0800b8fa
 800ac8c:	0800b900 	.word	0x0800b900
 800ac90:	0800b904 	.word	0x0800b904
 800ac94:	00000000 	.word	0x00000000
 800ac98:	0800a9f7 	.word	0x0800a9f7

0800ac9c <_printf_common>:
 800ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	4691      	mov	r9, r2
 800aca2:	461f      	mov	r7, r3
 800aca4:	688a      	ldr	r2, [r1, #8]
 800aca6:	690b      	ldr	r3, [r1, #16]
 800aca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acac:	4293      	cmp	r3, r2
 800acae:	bfb8      	it	lt
 800acb0:	4613      	movlt	r3, r2
 800acb2:	f8c9 3000 	str.w	r3, [r9]
 800acb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acba:	4606      	mov	r6, r0
 800acbc:	460c      	mov	r4, r1
 800acbe:	b112      	cbz	r2, 800acc6 <_printf_common+0x2a>
 800acc0:	3301      	adds	r3, #1
 800acc2:	f8c9 3000 	str.w	r3, [r9]
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	0699      	lsls	r1, r3, #26
 800acca:	bf42      	ittt	mi
 800accc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800acd0:	3302      	addmi	r3, #2
 800acd2:	f8c9 3000 	strmi.w	r3, [r9]
 800acd6:	6825      	ldr	r5, [r4, #0]
 800acd8:	f015 0506 	ands.w	r5, r5, #6
 800acdc:	d107      	bne.n	800acee <_printf_common+0x52>
 800acde:	f104 0a19 	add.w	sl, r4, #25
 800ace2:	68e3      	ldr	r3, [r4, #12]
 800ace4:	f8d9 2000 	ldr.w	r2, [r9]
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	42ab      	cmp	r3, r5
 800acec:	dc28      	bgt.n	800ad40 <_printf_common+0xa4>
 800acee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	3300      	adds	r3, #0
 800acf6:	bf18      	it	ne
 800acf8:	2301      	movne	r3, #1
 800acfa:	0692      	lsls	r2, r2, #26
 800acfc:	d42d      	bmi.n	800ad5a <_printf_common+0xbe>
 800acfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad02:	4639      	mov	r1, r7
 800ad04:	4630      	mov	r0, r6
 800ad06:	47c0      	blx	r8
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d020      	beq.n	800ad4e <_printf_common+0xb2>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	68e5      	ldr	r5, [r4, #12]
 800ad10:	f8d9 2000 	ldr.w	r2, [r9]
 800ad14:	f003 0306 	and.w	r3, r3, #6
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	bf08      	it	eq
 800ad1c:	1aad      	subeq	r5, r5, r2
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	6922      	ldr	r2, [r4, #16]
 800ad22:	bf0c      	ite	eq
 800ad24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad28:	2500      	movne	r5, #0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	bfc4      	itt	gt
 800ad2e:	1a9b      	subgt	r3, r3, r2
 800ad30:	18ed      	addgt	r5, r5, r3
 800ad32:	f04f 0900 	mov.w	r9, #0
 800ad36:	341a      	adds	r4, #26
 800ad38:	454d      	cmp	r5, r9
 800ad3a:	d11a      	bne.n	800ad72 <_printf_common+0xd6>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e008      	b.n	800ad52 <_printf_common+0xb6>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4652      	mov	r2, sl
 800ad44:	4639      	mov	r1, r7
 800ad46:	4630      	mov	r0, r6
 800ad48:	47c0      	blx	r8
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d103      	bne.n	800ad56 <_printf_common+0xba>
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad56:	3501      	adds	r5, #1
 800ad58:	e7c3      	b.n	800ace2 <_printf_common+0x46>
 800ad5a:	18e1      	adds	r1, r4, r3
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	2030      	movs	r0, #48	; 0x30
 800ad60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad64:	4422      	add	r2, r4
 800ad66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad6e:	3302      	adds	r3, #2
 800ad70:	e7c5      	b.n	800acfe <_printf_common+0x62>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4622      	mov	r2, r4
 800ad76:	4639      	mov	r1, r7
 800ad78:	4630      	mov	r0, r6
 800ad7a:	47c0      	blx	r8
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	d0e6      	beq.n	800ad4e <_printf_common+0xb2>
 800ad80:	f109 0901 	add.w	r9, r9, #1
 800ad84:	e7d8      	b.n	800ad38 <_printf_common+0x9c>
	...

0800ad88 <_printf_i>:
 800ad88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ad90:	460c      	mov	r4, r1
 800ad92:	7e09      	ldrb	r1, [r1, #24]
 800ad94:	b085      	sub	sp, #20
 800ad96:	296e      	cmp	r1, #110	; 0x6e
 800ad98:	4617      	mov	r7, r2
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	4698      	mov	r8, r3
 800ad9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ada0:	f000 80b3 	beq.w	800af0a <_printf_i+0x182>
 800ada4:	d822      	bhi.n	800adec <_printf_i+0x64>
 800ada6:	2963      	cmp	r1, #99	; 0x63
 800ada8:	d036      	beq.n	800ae18 <_printf_i+0x90>
 800adaa:	d80a      	bhi.n	800adc2 <_printf_i+0x3a>
 800adac:	2900      	cmp	r1, #0
 800adae:	f000 80b9 	beq.w	800af24 <_printf_i+0x19c>
 800adb2:	2958      	cmp	r1, #88	; 0x58
 800adb4:	f000 8083 	beq.w	800aebe <_printf_i+0x136>
 800adb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800adc0:	e032      	b.n	800ae28 <_printf_i+0xa0>
 800adc2:	2964      	cmp	r1, #100	; 0x64
 800adc4:	d001      	beq.n	800adca <_printf_i+0x42>
 800adc6:	2969      	cmp	r1, #105	; 0x69
 800adc8:	d1f6      	bne.n	800adb8 <_printf_i+0x30>
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	6813      	ldr	r3, [r2, #0]
 800adce:	0605      	lsls	r5, r0, #24
 800add0:	f103 0104 	add.w	r1, r3, #4
 800add4:	d52a      	bpl.n	800ae2c <_printf_i+0xa4>
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6011      	str	r1, [r2, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	da03      	bge.n	800ade6 <_printf_i+0x5e>
 800adde:	222d      	movs	r2, #45	; 0x2d
 800ade0:	425b      	negs	r3, r3
 800ade2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ade6:	486f      	ldr	r0, [pc, #444]	; (800afa4 <_printf_i+0x21c>)
 800ade8:	220a      	movs	r2, #10
 800adea:	e039      	b.n	800ae60 <_printf_i+0xd8>
 800adec:	2973      	cmp	r1, #115	; 0x73
 800adee:	f000 809d 	beq.w	800af2c <_printf_i+0x1a4>
 800adf2:	d808      	bhi.n	800ae06 <_printf_i+0x7e>
 800adf4:	296f      	cmp	r1, #111	; 0x6f
 800adf6:	d020      	beq.n	800ae3a <_printf_i+0xb2>
 800adf8:	2970      	cmp	r1, #112	; 0x70
 800adfa:	d1dd      	bne.n	800adb8 <_printf_i+0x30>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	f043 0320 	orr.w	r3, r3, #32
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	e003      	b.n	800ae0e <_printf_i+0x86>
 800ae06:	2975      	cmp	r1, #117	; 0x75
 800ae08:	d017      	beq.n	800ae3a <_printf_i+0xb2>
 800ae0a:	2978      	cmp	r1, #120	; 0x78
 800ae0c:	d1d4      	bne.n	800adb8 <_printf_i+0x30>
 800ae0e:	2378      	movs	r3, #120	; 0x78
 800ae10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae14:	4864      	ldr	r0, [pc, #400]	; (800afa8 <_printf_i+0x220>)
 800ae16:	e055      	b.n	800aec4 <_printf_i+0x13c>
 800ae18:	6813      	ldr	r3, [r2, #0]
 800ae1a:	1d19      	adds	r1, r3, #4
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6011      	str	r1, [r2, #0]
 800ae20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e08c      	b.n	800af46 <_printf_i+0x1be>
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6011      	str	r1, [r2, #0]
 800ae30:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae34:	bf18      	it	ne
 800ae36:	b21b      	sxthne	r3, r3
 800ae38:	e7cf      	b.n	800adda <_printf_i+0x52>
 800ae3a:	6813      	ldr	r3, [r2, #0]
 800ae3c:	6825      	ldr	r5, [r4, #0]
 800ae3e:	1d18      	adds	r0, r3, #4
 800ae40:	6010      	str	r0, [r2, #0]
 800ae42:	0628      	lsls	r0, r5, #24
 800ae44:	d501      	bpl.n	800ae4a <_printf_i+0xc2>
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	e002      	b.n	800ae50 <_printf_i+0xc8>
 800ae4a:	0668      	lsls	r0, r5, #25
 800ae4c:	d5fb      	bpl.n	800ae46 <_printf_i+0xbe>
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	4854      	ldr	r0, [pc, #336]	; (800afa4 <_printf_i+0x21c>)
 800ae52:	296f      	cmp	r1, #111	; 0x6f
 800ae54:	bf14      	ite	ne
 800ae56:	220a      	movne	r2, #10
 800ae58:	2208      	moveq	r2, #8
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae60:	6865      	ldr	r5, [r4, #4]
 800ae62:	60a5      	str	r5, [r4, #8]
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	f2c0 8095 	blt.w	800af94 <_printf_i+0x20c>
 800ae6a:	6821      	ldr	r1, [r4, #0]
 800ae6c:	f021 0104 	bic.w	r1, r1, #4
 800ae70:	6021      	str	r1, [r4, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d13d      	bne.n	800aef2 <_printf_i+0x16a>
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	f040 808e 	bne.w	800af98 <_printf_i+0x210>
 800ae7c:	4665      	mov	r5, ip
 800ae7e:	2a08      	cmp	r2, #8
 800ae80:	d10b      	bne.n	800ae9a <_printf_i+0x112>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	07db      	lsls	r3, r3, #31
 800ae86:	d508      	bpl.n	800ae9a <_printf_i+0x112>
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	6862      	ldr	r2, [r4, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	bfde      	ittt	le
 800ae90:	2330      	movle	r3, #48	; 0x30
 800ae92:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae9a:	ebac 0305 	sub.w	r3, ip, r5
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	f8cd 8000 	str.w	r8, [sp]
 800aea4:	463b      	mov	r3, r7
 800aea6:	aa03      	add	r2, sp, #12
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff fef6 	bl	800ac9c <_printf_common>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d14d      	bne.n	800af50 <_printf_i+0x1c8>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb8:	b005      	add	sp, #20
 800aeba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aebe:	4839      	ldr	r0, [pc, #228]	; (800afa4 <_printf_i+0x21c>)
 800aec0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aec4:	6813      	ldr	r3, [r2, #0]
 800aec6:	6821      	ldr	r1, [r4, #0]
 800aec8:	1d1d      	adds	r5, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6015      	str	r5, [r2, #0]
 800aece:	060a      	lsls	r2, r1, #24
 800aed0:	d50b      	bpl.n	800aeea <_printf_i+0x162>
 800aed2:	07ca      	lsls	r2, r1, #31
 800aed4:	bf44      	itt	mi
 800aed6:	f041 0120 	orrmi.w	r1, r1, #32
 800aeda:	6021      	strmi	r1, [r4, #0]
 800aedc:	b91b      	cbnz	r3, 800aee6 <_printf_i+0x15e>
 800aede:	6822      	ldr	r2, [r4, #0]
 800aee0:	f022 0220 	bic.w	r2, r2, #32
 800aee4:	6022      	str	r2, [r4, #0]
 800aee6:	2210      	movs	r2, #16
 800aee8:	e7b7      	b.n	800ae5a <_printf_i+0xd2>
 800aeea:	064d      	lsls	r5, r1, #25
 800aeec:	bf48      	it	mi
 800aeee:	b29b      	uxthmi	r3, r3
 800aef0:	e7ef      	b.n	800aed2 <_printf_i+0x14a>
 800aef2:	4665      	mov	r5, ip
 800aef4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aef8:	fb02 3311 	mls	r3, r2, r1, r3
 800aefc:	5cc3      	ldrb	r3, [r0, r3]
 800aefe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af02:	460b      	mov	r3, r1
 800af04:	2900      	cmp	r1, #0
 800af06:	d1f5      	bne.n	800aef4 <_printf_i+0x16c>
 800af08:	e7b9      	b.n	800ae7e <_printf_i+0xf6>
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	6825      	ldr	r5, [r4, #0]
 800af0e:	6961      	ldr	r1, [r4, #20]
 800af10:	1d18      	adds	r0, r3, #4
 800af12:	6010      	str	r0, [r2, #0]
 800af14:	0628      	lsls	r0, r5, #24
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	d501      	bpl.n	800af1e <_printf_i+0x196>
 800af1a:	6019      	str	r1, [r3, #0]
 800af1c:	e002      	b.n	800af24 <_printf_i+0x19c>
 800af1e:	066a      	lsls	r2, r5, #25
 800af20:	d5fb      	bpl.n	800af1a <_printf_i+0x192>
 800af22:	8019      	strh	r1, [r3, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	4665      	mov	r5, ip
 800af2a:	e7b9      	b.n	800aea0 <_printf_i+0x118>
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	1d19      	adds	r1, r3, #4
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	681d      	ldr	r5, [r3, #0]
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	2100      	movs	r1, #0
 800af38:	4628      	mov	r0, r5
 800af3a:	f7f5 f989 	bl	8000250 <memchr>
 800af3e:	b108      	cbz	r0, 800af44 <_printf_i+0x1bc>
 800af40:	1b40      	subs	r0, r0, r5
 800af42:	6060      	str	r0, [r4, #4]
 800af44:	6863      	ldr	r3, [r4, #4]
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	2300      	movs	r3, #0
 800af4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af4e:	e7a7      	b.n	800aea0 <_printf_i+0x118>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	462a      	mov	r2, r5
 800af54:	4639      	mov	r1, r7
 800af56:	4630      	mov	r0, r6
 800af58:	47c0      	blx	r8
 800af5a:	3001      	adds	r0, #1
 800af5c:	d0aa      	beq.n	800aeb4 <_printf_i+0x12c>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	079b      	lsls	r3, r3, #30
 800af62:	d413      	bmi.n	800af8c <_printf_i+0x204>
 800af64:	68e0      	ldr	r0, [r4, #12]
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	4298      	cmp	r0, r3
 800af6a:	bfb8      	it	lt
 800af6c:	4618      	movlt	r0, r3
 800af6e:	e7a3      	b.n	800aeb8 <_printf_i+0x130>
 800af70:	2301      	movs	r3, #1
 800af72:	464a      	mov	r2, r9
 800af74:	4639      	mov	r1, r7
 800af76:	4630      	mov	r0, r6
 800af78:	47c0      	blx	r8
 800af7a:	3001      	adds	r0, #1
 800af7c:	d09a      	beq.n	800aeb4 <_printf_i+0x12c>
 800af7e:	3501      	adds	r5, #1
 800af80:	68e3      	ldr	r3, [r4, #12]
 800af82:	9a03      	ldr	r2, [sp, #12]
 800af84:	1a9b      	subs	r3, r3, r2
 800af86:	42ab      	cmp	r3, r5
 800af88:	dcf2      	bgt.n	800af70 <_printf_i+0x1e8>
 800af8a:	e7eb      	b.n	800af64 <_printf_i+0x1dc>
 800af8c:	2500      	movs	r5, #0
 800af8e:	f104 0919 	add.w	r9, r4, #25
 800af92:	e7f5      	b.n	800af80 <_printf_i+0x1f8>
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1ac      	bne.n	800aef2 <_printf_i+0x16a>
 800af98:	7803      	ldrb	r3, [r0, #0]
 800af9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afa2:	e76c      	b.n	800ae7e <_printf_i+0xf6>
 800afa4:	0800b90b 	.word	0x0800b90b
 800afa8:	0800b91c 	.word	0x0800b91c

0800afac <__ascii_wctomb>:
 800afac:	b149      	cbz	r1, 800afc2 <__ascii_wctomb+0x16>
 800afae:	2aff      	cmp	r2, #255	; 0xff
 800afb0:	bf85      	ittet	hi
 800afb2:	238a      	movhi	r3, #138	; 0x8a
 800afb4:	6003      	strhi	r3, [r0, #0]
 800afb6:	700a      	strbls	r2, [r1, #0]
 800afb8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800afbc:	bf98      	it	ls
 800afbe:	2001      	movls	r0, #1
 800afc0:	4770      	bx	lr
 800afc2:	4608      	mov	r0, r1
 800afc4:	4770      	bx	lr

0800afc6 <memmove>:
 800afc6:	4288      	cmp	r0, r1
 800afc8:	b510      	push	{r4, lr}
 800afca:	eb01 0302 	add.w	r3, r1, r2
 800afce:	d807      	bhi.n	800afe0 <memmove+0x1a>
 800afd0:	1e42      	subs	r2, r0, #1
 800afd2:	4299      	cmp	r1, r3
 800afd4:	d00a      	beq.n	800afec <memmove+0x26>
 800afd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afda:	f802 4f01 	strb.w	r4, [r2, #1]!
 800afde:	e7f8      	b.n	800afd2 <memmove+0xc>
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d9f5      	bls.n	800afd0 <memmove+0xa>
 800afe4:	1881      	adds	r1, r0, r2
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	42d3      	cmn	r3, r2
 800afea:	d100      	bne.n	800afee <memmove+0x28>
 800afec:	bd10      	pop	{r4, pc}
 800afee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aff2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aff6:	e7f7      	b.n	800afe8 <memmove+0x22>

0800aff8 <_free_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4605      	mov	r5, r0
 800affc:	2900      	cmp	r1, #0
 800affe:	d045      	beq.n	800b08c <_free_r+0x94>
 800b000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b004:	1f0c      	subs	r4, r1, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfb8      	it	lt
 800b00a:	18e4      	addlt	r4, r4, r3
 800b00c:	f000 f8d2 	bl	800b1b4 <__malloc_lock>
 800b010:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <_free_r+0x98>)
 800b012:	6813      	ldr	r3, [r2, #0]
 800b014:	4610      	mov	r0, r2
 800b016:	b933      	cbnz	r3, 800b026 <_free_r+0x2e>
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	6014      	str	r4, [r2, #0]
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b022:	f000 b8c8 	b.w	800b1b6 <__malloc_unlock>
 800b026:	42a3      	cmp	r3, r4
 800b028:	d90c      	bls.n	800b044 <_free_r+0x4c>
 800b02a:	6821      	ldr	r1, [r4, #0]
 800b02c:	1862      	adds	r2, r4, r1
 800b02e:	4293      	cmp	r3, r2
 800b030:	bf04      	itt	eq
 800b032:	681a      	ldreq	r2, [r3, #0]
 800b034:	685b      	ldreq	r3, [r3, #4]
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	bf04      	itt	eq
 800b03a:	1852      	addeq	r2, r2, r1
 800b03c:	6022      	streq	r2, [r4, #0]
 800b03e:	6004      	str	r4, [r0, #0]
 800b040:	e7ec      	b.n	800b01c <_free_r+0x24>
 800b042:	4613      	mov	r3, r2
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	b10a      	cbz	r2, 800b04c <_free_r+0x54>
 800b048:	42a2      	cmp	r2, r4
 800b04a:	d9fa      	bls.n	800b042 <_free_r+0x4a>
 800b04c:	6819      	ldr	r1, [r3, #0]
 800b04e:	1858      	adds	r0, r3, r1
 800b050:	42a0      	cmp	r0, r4
 800b052:	d10b      	bne.n	800b06c <_free_r+0x74>
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	4401      	add	r1, r0
 800b058:	1858      	adds	r0, r3, r1
 800b05a:	4282      	cmp	r2, r0
 800b05c:	6019      	str	r1, [r3, #0]
 800b05e:	d1dd      	bne.n	800b01c <_free_r+0x24>
 800b060:	6810      	ldr	r0, [r2, #0]
 800b062:	6852      	ldr	r2, [r2, #4]
 800b064:	605a      	str	r2, [r3, #4]
 800b066:	4401      	add	r1, r0
 800b068:	6019      	str	r1, [r3, #0]
 800b06a:	e7d7      	b.n	800b01c <_free_r+0x24>
 800b06c:	d902      	bls.n	800b074 <_free_r+0x7c>
 800b06e:	230c      	movs	r3, #12
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	e7d3      	b.n	800b01c <_free_r+0x24>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	1821      	adds	r1, r4, r0
 800b078:	428a      	cmp	r2, r1
 800b07a:	bf04      	itt	eq
 800b07c:	6811      	ldreq	r1, [r2, #0]
 800b07e:	6852      	ldreq	r2, [r2, #4]
 800b080:	6062      	str	r2, [r4, #4]
 800b082:	bf04      	itt	eq
 800b084:	1809      	addeq	r1, r1, r0
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	605c      	str	r4, [r3, #4]
 800b08a:	e7c7      	b.n	800b01c <_free_r+0x24>
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	200002b0 	.word	0x200002b0

0800b094 <_malloc_r>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	1ccd      	adds	r5, r1, #3
 800b098:	f025 0503 	bic.w	r5, r5, #3
 800b09c:	3508      	adds	r5, #8
 800b09e:	2d0c      	cmp	r5, #12
 800b0a0:	bf38      	it	cc
 800b0a2:	250c      	movcc	r5, #12
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	db01      	blt.n	800b0ae <_malloc_r+0x1a>
 800b0aa:	42a9      	cmp	r1, r5
 800b0ac:	d903      	bls.n	800b0b6 <_malloc_r+0x22>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	f000 f87d 	bl	800b1b4 <__malloc_lock>
 800b0ba:	4a21      	ldr	r2, [pc, #132]	; (800b140 <_malloc_r+0xac>)
 800b0bc:	6814      	ldr	r4, [r2, #0]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	b991      	cbnz	r1, 800b0e8 <_malloc_r+0x54>
 800b0c2:	4c20      	ldr	r4, [pc, #128]	; (800b144 <_malloc_r+0xb0>)
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	b91b      	cbnz	r3, 800b0d0 <_malloc_r+0x3c>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f863 	bl	800b194 <_sbrk_r>
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f000 f85e 	bl	800b194 <_sbrk_r>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d124      	bne.n	800b126 <_malloc_r+0x92>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	6033      	str	r3, [r6, #0]
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 f868 	bl	800b1b6 <__malloc_unlock>
 800b0e6:	e7e4      	b.n	800b0b2 <_malloc_r+0x1e>
 800b0e8:	680b      	ldr	r3, [r1, #0]
 800b0ea:	1b5b      	subs	r3, r3, r5
 800b0ec:	d418      	bmi.n	800b120 <_malloc_r+0x8c>
 800b0ee:	2b0b      	cmp	r3, #11
 800b0f0:	d90f      	bls.n	800b112 <_malloc_r+0x7e>
 800b0f2:	600b      	str	r3, [r1, #0]
 800b0f4:	50cd      	str	r5, [r1, r3]
 800b0f6:	18cc      	adds	r4, r1, r3
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f000 f85c 	bl	800b1b6 <__malloc_unlock>
 800b0fe:	f104 000b 	add.w	r0, r4, #11
 800b102:	1d23      	adds	r3, r4, #4
 800b104:	f020 0007 	bic.w	r0, r0, #7
 800b108:	1ac3      	subs	r3, r0, r3
 800b10a:	d0d3      	beq.n	800b0b4 <_malloc_r+0x20>
 800b10c:	425a      	negs	r2, r3
 800b10e:	50e2      	str	r2, [r4, r3]
 800b110:	e7d0      	b.n	800b0b4 <_malloc_r+0x20>
 800b112:	428c      	cmp	r4, r1
 800b114:	684b      	ldr	r3, [r1, #4]
 800b116:	bf16      	itet	ne
 800b118:	6063      	strne	r3, [r4, #4]
 800b11a:	6013      	streq	r3, [r2, #0]
 800b11c:	460c      	movne	r4, r1
 800b11e:	e7eb      	b.n	800b0f8 <_malloc_r+0x64>
 800b120:	460c      	mov	r4, r1
 800b122:	6849      	ldr	r1, [r1, #4]
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x2c>
 800b126:	1cc4      	adds	r4, r0, #3
 800b128:	f024 0403 	bic.w	r4, r4, #3
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d005      	beq.n	800b13c <_malloc_r+0xa8>
 800b130:	1a21      	subs	r1, r4, r0
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f82e 	bl	800b194 <_sbrk_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d0cf      	beq.n	800b0dc <_malloc_r+0x48>
 800b13c:	6025      	str	r5, [r4, #0]
 800b13e:	e7db      	b.n	800b0f8 <_malloc_r+0x64>
 800b140:	200002b0 	.word	0x200002b0
 800b144:	200002b4 	.word	0x200002b4

0800b148 <_realloc_r>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	4607      	mov	r7, r0
 800b14c:	4614      	mov	r4, r2
 800b14e:	460e      	mov	r6, r1
 800b150:	b921      	cbnz	r1, 800b15c <_realloc_r+0x14>
 800b152:	4611      	mov	r1, r2
 800b154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b158:	f7ff bf9c 	b.w	800b094 <_malloc_r>
 800b15c:	b922      	cbnz	r2, 800b168 <_realloc_r+0x20>
 800b15e:	f7ff ff4b 	bl	800aff8 <_free_r>
 800b162:	4625      	mov	r5, r4
 800b164:	4628      	mov	r0, r5
 800b166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b168:	f000 f826 	bl	800b1b8 <_malloc_usable_size_r>
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d20f      	bcs.n	800b190 <_realloc_r+0x48>
 800b170:	4621      	mov	r1, r4
 800b172:	4638      	mov	r0, r7
 800b174:	f7ff ff8e 	bl	800b094 <_malloc_r>
 800b178:	4605      	mov	r5, r0
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0f2      	beq.n	800b164 <_realloc_r+0x1c>
 800b17e:	4631      	mov	r1, r6
 800b180:	4622      	mov	r2, r4
 800b182:	f7ff fb34 	bl	800a7ee <memcpy>
 800b186:	4631      	mov	r1, r6
 800b188:	4638      	mov	r0, r7
 800b18a:	f7ff ff35 	bl	800aff8 <_free_r>
 800b18e:	e7e9      	b.n	800b164 <_realloc_r+0x1c>
 800b190:	4635      	mov	r5, r6
 800b192:	e7e7      	b.n	800b164 <_realloc_r+0x1c>

0800b194 <_sbrk_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4c06      	ldr	r4, [pc, #24]	; (800b1b0 <_sbrk_r+0x1c>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4605      	mov	r5, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	f7f7 f946 	bl	8002430 <_sbrk>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_sbrk_r+0x1a>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_sbrk_r+0x1a>
 800b1ac:	602b      	str	r3, [r5, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000a48 	.word	0x20000a48

0800b1b4 <__malloc_lock>:
 800b1b4:	4770      	bx	lr

0800b1b6 <__malloc_unlock>:
 800b1b6:	4770      	bx	lr

0800b1b8 <_malloc_usable_size_r>:
 800b1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1bc:	1f18      	subs	r0, r3, #4
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfbc      	itt	lt
 800b1c2:	580b      	ldrlt	r3, [r1, r0]
 800b1c4:	18c0      	addlt	r0, r0, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_init>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_fini>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr
